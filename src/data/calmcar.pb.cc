// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calmcar.proto

#include "calmcar.pb.h"

#include <algorithm>

#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/wire_format.h>
#include <google/protobuf/wire_format_lite_inl.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_calmcar_2eproto
{
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 0 > scc_info_Can;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 0 > scc_info_Gps;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 0 > scc_info_Image;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 0 > scc_info_ImageInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 0 > scc_info_Point2i;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 0 > scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 0 > scc_info_Rect;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 1 > scc_info_Contour;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 1 > scc_info_Header;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 1 > scc_info_Lane;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 2 > scc_info_Object;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto::google::protobuf::internal::SCCInfo< 2 >
    scc_info_Segmentation;
}  // namespace protobuf_calmcar_2eproto
namespace calmcar
{
namespace proto
{
class PointDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Point > _instance;
} _Point_default_instance_;
class Point2iDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Point2i > _instance;
} _Point2i_default_instance_;
class RectDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Rect > _instance;
} _Rect_default_instance_;
class ImageInfoDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< ImageInfo > _instance;
} _ImageInfo_default_instance_;
class ImageDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Image > _instance;
} _Image_default_instance_;
class CanDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Can > _instance;
} _Can_default_instance_;
class GpsDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Gps > _instance;
} _Gps_default_instance_;
class ObjectDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Object > _instance;
} _Object_default_instance_;
class LaneDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Lane > _instance;
} _Lane_default_instance_;
class HeaderDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Header > _instance;
} _Header_default_instance_;
class ContourDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Contour > _instance;
} _Contour_default_instance_;
class SegmentationDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Segmentation > _instance;
} _Segmentation_default_instance_;
class FrameDefaultTypeInternal
{
  public:
    ::google::protobuf::internal::ExplicitlyConstructed< Frame > _instance;
} _Frame_default_instance_;
}  // namespace proto
}  // namespace calmcar
namespace protobuf_calmcar_2eproto
{
static void InitDefaultsPoint()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Point_default_instance_;
        new (ptr)::calmcar::proto::Point();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 0 > scc_info_Point = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint},
    {}};

static void InitDefaultsPoint2i()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Point2i_default_instance_;
        new (ptr)::calmcar::proto::Point2i();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Point2i::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 0 > scc_info_Point2i = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint2i},
    {}};

static void InitDefaultsRect()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Rect_default_instance_;
        new (ptr)::calmcar::proto::Rect();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Rect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 0 > scc_info_Rect = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRect},
    {}};

static void InitDefaultsImageInfo()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_ImageInfo_default_instance_;
        new (ptr)::calmcar::proto::ImageInfo();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::ImageInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 0 > scc_info_ImageInfo = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImageInfo},
    {}};

static void InitDefaultsImage()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Image_default_instance_;
        new (ptr)::calmcar::proto::Image();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Image::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 0 > scc_info_Image = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImage},
    {}};

static void InitDefaultsCan()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Can_default_instance_;
        new (ptr)::calmcar::proto::Can();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Can::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 0 > scc_info_Can = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCan},
    {}};

static void InitDefaultsGps()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Gps_default_instance_;
        new (ptr)::calmcar::proto::Gps();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Gps::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 0 > scc_info_Gps = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGps},
    {}};

static void InitDefaultsObject()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Object_default_instance_;
        new (ptr)::calmcar::proto::Object();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Object::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 2 > scc_info_Object = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsObject},
    {
        &protobuf_calmcar_2eproto::scc_info_Rect.base,
        &protobuf_calmcar_2eproto::scc_info_Point.base,
    }};

static void InitDefaultsLane()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Lane_default_instance_;
        new (ptr)::calmcar::proto::Lane();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Lane::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 1 > scc_info_Lane = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLane},
    {
        &protobuf_calmcar_2eproto::scc_info_Point.base,
    }};

static void InitDefaultsHeader()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Header_default_instance_;
        new (ptr)::calmcar::proto::Header();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Header::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 1 > scc_info_Header = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHeader},
    {
        &protobuf_calmcar_2eproto::scc_info_ImageInfo.base,
    }};

static void InitDefaultsContour()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Contour_default_instance_;
        new (ptr)::calmcar::proto::Contour();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Contour::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 1 > scc_info_Contour = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsContour},
    {
        &protobuf_calmcar_2eproto::scc_info_Point2i.base,
    }};

static void InitDefaultsSegmentation()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Segmentation_default_instance_;
        new (ptr)::calmcar::proto::Segmentation();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Segmentation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 2 > scc_info_Segmentation = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSegmentation},
    {
        &protobuf_calmcar_2eproto::scc_info_Contour.base,
        &protobuf_calmcar_2eproto::scc_info_Point.base,
    }};

static void InitDefaultsFrame()
{
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
        void* ptr = &::calmcar::proto::_Frame_default_instance_;
        new (ptr)::calmcar::proto::Frame();
        ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::calmcar::proto::Frame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo< 8 > scc_info_Frame = {
    {ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsFrame},
    {
        &protobuf_calmcar_2eproto::scc_info_Header.base,
        &protobuf_calmcar_2eproto::scc_info_Image.base,
        &protobuf_calmcar_2eproto::scc_info_Can.base,
        &protobuf_calmcar_2eproto::scc_info_Gps.base,
        &protobuf_calmcar_2eproto::scc_info_Object.base,
        &protobuf_calmcar_2eproto::scc_info_Lane.base,
        &protobuf_calmcar_2eproto::scc_info_Segmentation.base,
        &protobuf_calmcar_2eproto::scc_info_Point.base,
    }};

void InitDefaults()
{
    ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Point2i.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Rect.base);
    ::google::protobuf::internal::InitSCC(&scc_info_ImageInfo.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Image.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Can.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Gps.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Object.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Lane.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Header.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Contour.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Segmentation.base);
    ::google::protobuf::internal::InitSCC(&scc_info_Frame.base);
}

::google::protobuf::Metadata file_level_metadata[13];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Point, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Point, z_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Point2i, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Point2i, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Point2i, y_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Rect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Rect, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Rect, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Rect, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Rect, height_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::ImageInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::ImageInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::ImageInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::ImageInfo, pixel_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::ImageInfo, intrinsic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::ImageInfo, extrinsic_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Image, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Image, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Image, timestamp_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Can, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Can, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Can, dlc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Can, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Can, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Can, channel_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, millisecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, satellites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, ground_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Gps, unit_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, sensor_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, class__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, class_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, subclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, subclass_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, bbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, life_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, relative_velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, relative_acceleration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, ttc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, thw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, angle_left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, angle_right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, yaw_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, lane_assignment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, motion_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Object, cutin_cutout_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, coordinate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, c0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, c1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, c2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, c3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, line_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, line_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, distance_to_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, image_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Lane, width_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, pdaq_serial_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, protocol_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, calmcar_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, pdaq_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, image_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, car_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, calmcar_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Header, run_mode_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Contour, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Contour, point_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Segmentation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Segmentation, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Segmentation, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Segmentation, mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Segmentation, contour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Segmentation, freespace_),
    ~0u,  // no _has_bits_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, raw_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, raw_can_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, gps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, lane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, cipv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, ldw_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, fcw_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, pcw_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, asw_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, bsd_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, segmentation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, lane_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, road_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, ttlc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, left_right_indication_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, camera_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, lane_boundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::calmcar::proto::Frame, timestamp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    {0, -1, sizeof(::calmcar::proto::Point)},
    {8, -1, sizeof(::calmcar::proto::Point2i)},
    {15, -1, sizeof(::calmcar::proto::Rect)},
    {24, -1, sizeof(::calmcar::proto::ImageInfo)},
    {34, -1, sizeof(::calmcar::proto::Image)},
    {41, -1, sizeof(::calmcar::proto::Can)},
    {51, -1, sizeof(::calmcar::proto::Gps)},
    {72, -1, sizeof(::calmcar::proto::Object)},
    {101, -1, sizeof(::calmcar::proto::Lane)},
    {120, -1, sizeof(::calmcar::proto::Header)},
    {133, -1, sizeof(::calmcar::proto::Contour)},
    {139, -1, sizeof(::calmcar::proto::Segmentation)},
    {149, -1, sizeof(::calmcar::proto::Frame)},
};

static ::google::protobuf::Message const* const file_default_instances[] = {
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Point_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Point2i_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Rect_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_ImageInfo_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Image_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Can_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Gps_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Object_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Lane_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Header_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Contour_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Segmentation_default_instance_),
    reinterpret_cast< const ::google::protobuf::Message* >(&::calmcar::proto::_Frame_default_instance_),
};

void protobuf_AssignDescriptors()
{
    AddDescriptors();
    AssignDescriptors("calmcar.proto",
                      schemas,
                      file_default_instances,
                      TableStruct::offsets,
                      file_level_metadata,
                      file_level_enum_descriptors,
                      NULL);
}

void protobuf_AssignDescriptorsOnce()
{
    static ::google::protobuf::internal::once_flag once;
    ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&)
{
    protobuf_AssignDescriptorsOnce();
    ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 13);
}

void AddDescriptorsImpl()
{
    InitDefaults();
    static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        "\n\rcalmcar.proto\022\rcalmcar.proto\"(\n\005Point\022"
        "\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"\037\n\007Poin"
        "t2i\022\t\n\001x\030\001 \001(\003\022\t\n\001y\030\002 \001(\003\";\n\004Rect\022\t\n\001x\030\001"
        " \001(\001\022\t\n\001y\030\002 \001(\001\022\r\n\005width\030\003 \001(\001\022\016\n\006height"
        "\030\004 \001(\001\"\253\002\n\tImageInfo\022\016\n\006height\030\001 \001(\003\022\r\n\005"
        "width\030\002 \001(\003\022:\n\014pixel_format\030\003 \001(\0162$.calm"
        "car.proto.ImageInfo.PixelFormat\022\021\n\tintri"
        "nsic\030\004 \001(\014\022\021\n\textrinsic\030\005 \001(\014\"\234\001\n\013PixelF"
        "ormat\022\030\n\024PIXEL_FORMAT_UNKNOWN\020\000\022\027\n\023PIXEL"
        "_FORMAT_YUV422\020\001\022\027\n\023PIXEL_FORMAT_YUV420\020"
        "\002\022\024\n\020PIXEL_FORMAT_BGR\020\003\022\024\n\020PIXEL_FORMAT_"
        "RGB\020\004\022\025\n\021PIXEL_FORMAT_JPEG\020\005\"(\n\005Image\022\014\n"
        "\004data\030\001 \001(\014\022\021\n\ttimestamp\030\002 \001(\003\"P\n\003Can\022\n\n"
        "\002id\030\001 \001(\003\022\013\n\003dlc\030\002 \001(\003\022\014\n\004data\030\003 \001(\014\022\021\n\t"
        "timestamp\030\004 \001(\003\022\017\n\007channel\030\005 \001(\005\"\216\002\n\003Gps"
        "\022\020\n\010latitude\030\001 \001(\001\022\021\n\tlongitude\030\002 \001(\001\022\016\n"
        "\006height\030\003 \001(\001\022\r\n\005angle\030\004 \001(\001\022\r\n\005speed\030\005 "
        "\001(\001\022\014\n\004hour\030\006 \001(\003\022\016\n\006minute\030\007 \001(\003\022\016\n\006sec"
        "ond\030\010 \001(\003\022\023\n\013millisecond\030\t \001(\003\022\013\n\003day\030\n "
        "\001(\003\022\r\n\005month\030\013 \001(\003\022\014\n\004year\030\014 \001(\003\022\016\n\006cour"
        "se\030\r \001(\001\022\022\n\nsatellites\030\016 \001(\003\022\025\n\rground_h"
        "eight\030\017 \001(\001\022\014\n\004unit\030\020 \001(\003\"\310\013\n\006Object\0225\n\013"
        "sensor_type\030\001 \001(\0162 .calmcar.proto.Object"
        ".SensorType\022\n\n\002id\030\002 \001(\003\022\016\n\006class_\030\003 \001(\003\022"
        "\022\n\nclass_name\030\004 \001(\t\022\020\n\010subclass\030\005 \001(\003\022\025\n"
        "\rsubclass_name\030\006 \001(\t\022\022\n\nconfidence\030\007 \001(\001"
        "\022!\n\004bbox\030\010 \001(\0132\023.calmcar.proto.Rect\022\021\n\tl"
        "ife_time\030\t \001(\003\022\021\n\ttimestamp\030\n \001(\003\022\016\n\006hei"
        "ght\030\013 \001(\001\022\r\n\005width\030\014 \001(\001\022\016\n\006length\030\r \001(\001"
        "\022&\n\010distance\030\016 \001(\0132\024.calmcar.proto.Point"
        "\022/\n\021relative_velocity\030\017 \001(\0132\024.calmcar.pr"
        "oto.Point\0223\n\025relative_acceleration\030\020 \001(\013"
        "2\024.calmcar.proto.Point\022\013\n\003ttc\030\021 \001(\001\022\013\n\003t"
        "hw\030\022 \001(\001\022\022\n\nangle_left\030\023 \001(\001\022\023\n\013angle_ri"
        "ght\030\024 \001(\001\022\021\n\tyaw_angle\030\025 \001(\001\022=\n\017lane_ass"
        "ignment\030\026 \001(\0162$.calmcar.proto.Object.Lan"
        "eAssignment\0229\n\rmotion_status\030\027 \001(\0162\".cal"
        "mcar.proto.Object.MotionStatus\0227\n\014cutin_"
        "cutout\030\030 \001(\0162!.calmcar.proto.Object.CutI"
        "nCutOut\"\202\001\n\nSensorType\022\027\n\023SENSOR_TYPE_UN"
        "KNOWN\020\000\022\026\n\022SENSOR_TYPE_CAMERA\020\001\022\025\n\021SENSO"
        "R_TYPE_RADAR\020\002\022\025\n\021SENSOR_TYPE_LIDAR\020\003\022\025\n"
        "\021SENSOR_TYPE_FUSED\020\004\"\354\001\n\016LaneAssignment\022"
        " \n\034LANE_ASSIGNMENT_NOT_ASSIGNED\020\000\022\034\n\030LAN"
        "E_ASSIGNMENT_EGO_LANE\020\001\022\"\n\036LANE_ASSIGNME"
        "NT_NEXT_LANE_LEFT\020\002\022#\n\037LANE_ASSIGNMENT_N"
        "EXT_LANE_RIGHT\020\003\022\'\n#LANE_ASSIGNMENT_NEXT"
        "_NEXT_LANE_LEFT\020\004\022(\n$LANE_ASSIGNMENT_NEX"
        "T_NEXT_LANE_RIGHT\020\005\"\260\001\n\014MotionStatus\022\031\n\025"
        "MOTION_STATUS_UNKNOWN\020\000\022\030\n\024MOTION_STATUS"
        "_PARKED\020\001\022\031\n\025MOTION_STATUS_STOPPED\020\002\022\030\n\024"
        "MOTION_STATUS_MOVING\020\003\022\032\n\026MOTION_STATUS_"
        "ONCOMING\020\004\022\032\n\026MOTION_STATUS_CROSSING\020\005\"\343"
        "\001\n\013CutInCutOut\022\032\n\026CUT_IN_CUT_OUT_UNKNOWN"
        "\020\000\022#\n\037CUT_IN_CUT_OUT_HOST_CUT_IN_LEFT\020\001\022"
        "$\n CUT_IN_CUT_OUT_HOST_CUT_IN_RIGHT\020\002\022$\n"
        " CUT_IN_CUT_OUT_HOST_CUT_OUT_LEFT\020\003\022%\n!C"
        "UT_IN_CUT_OUT_HOST_CUT_OUT_RIGHT\020\004\022 \n\034CU"
        "T_IN_CUT_OUT_NO_CUT_IN_OUT\020\005\"\200\006\n\004Lane\022;\n"
        "\017coordinate_type\030\001 \001(\0162\".calmcar.proto.L"
        "ane.CoordinateType\022\n\n\002C0\030\002 \001(\001\022\n\n\002C1\030\003 \001"
        "(\001\022\n\n\002C2\030\004 \001(\001\022\n\n\002C3\030\005 \001(\001\022\r\n\005index\030\006 \001("
        "\003\022\017\n\007quality\030\007 \001(\003\022/\n\tline_type\030\010 \001(\0162\034."
        "calmcar.proto.Lane.LineType\0221\n\nline_colo"
        "r\030\t \001(\0162\035.calmcar.proto.Lane.LineColor\022#"
        "\n\005start\030\n \001(\0132\024.calmcar.proto.Point\022!\n\003e"
        "nd\030\013 \001(\0132\024.calmcar.proto.Point\022\030\n\020distan"
        "ce_to_host\030\014 \001(\001\022*\n\014image_points\030\r \003(\0132\024"
        ".calmcar.proto.Point\022\r\n\005width\030\016 \001(\001\"F\n\016C"
        "oordinateType\022\031\n\025COORDINATE_TYPE_IMAGE\020\000"
        "\022\031\n\025COORDINATE_TYPE_WORLD\020\001\"\230\001\n\010LineType"
        "\022\027\n\023LINE_TYPE_UNDECIDED\020\000\022\023\n\017LINE_TYPE_S"
        "OLID\020\001\022\024\n\020LINE_TYPE_DASHED\020\002\022\025\n\021LINE_TYP"
        "E_VIRTUAL\020\003\022\027\n\023LINE_TYPE_ROAD_EDGE\020\004\022\030\n\024"
        "LINE_TYPE_BOTTS_DOTS\020\005\"\206\001\n\tLineColor\022\026\n\022"
        "LINE_COLOR_UNKNOWN\020\000\022\024\n\020LINE_COLOR_WHITE"
        "\020\001\022\025\n\021LINE_COLOR_YELLOW\020\002\022\031\n\025LINE_COLOR_"
        "BLUE_GREEN\020\003\022\031\n\025LINE_COLOR_ORANGE_RED\020\004\""
        "\327\001\n\006Header\022\032\n\022pdaq_serial_number\030\001 \001(\t\022\030"
        "\n\020protocol_version\030\002 \001(\t\022\027\n\017calmcar_vers"
        "ion\030\003 \001(\t\022\024\n\014pdaq_version\030\004 \001(\t\022,\n\nimage"
        "_info\030\005 \001(\0132\030.calmcar.proto.ImageInfo\022\020\n"
        "\010car_type\030\006 \001(\t\022\026\n\016calmcar_config\030\007 \001(\014\022"
        "\020\n\010run_mode\030\010 \001(\t\"0\n\007Contour\022%\n\005point\030\001 "
        "\003(\0132\026.calmcar.proto.Point2i\"\215\001\n\014Segmenta"
        "tion\022\016\n\006height\030\001 \001(\003\022\r\n\005width\030\002 \001(\003\022\014\n\004m"
        "ask\030\003 \003(\003\022\'\n\007contour\030\004 \003(\0132\026.calmcar.pro"
        "to.Contour\022\'\n\tfreespace\030\005 \003(\0132\024.calmcar."
        "proto.Point\"\234\005\n\005Frame\022%\n\006header\030\001 \001(\0132\025."
        "calmcar.proto.Header\022\n\n\002id\030\002 \001(\003\022\'\n\traw_"
        "image\030\003 \001(\0132\024.calmcar.proto.Image\022#\n\007raw"
        "_can\030\004 \003(\0132\022.calmcar.proto.Can\022\037\n\003gps\030\005 "
        "\001(\0132\022.calmcar.proto.Gps\022%\n\006object\030\006 \003(\0132"
        "\025.calmcar.proto.Object\022!\n\004lane\030\007 \003(\0132\023.c"
        "almcar.proto.Lane\022\017\n\007cipv_id\030\010 \001(\003\022\022\n\nld"
        "w_status\030\t \001(\003\022\022\n\nfcw_status\030\n \001(\003\022\022\n\npc"
        "w_status\030\013 \001(\003\022\022\n\nasw_status\030\014 \001(\003\022\022\n\nbs"
        "d_status\030\r \001(\003\0221\n\014segmentation\030\016 \001(\0132\033.c"
        "almcar.proto.Segmentation\022\023\n\013lane_number"
        "\030\017 \001(\003\022*\n\troad_type\030\020 \001(\0162\027.calmcar.prot"
        "o.RoadType\022\014\n\004ttlc\030\021 \001(\001\022A\n\025left_right_i"
        "ndication\030\022 \001(\0162\".calmcar.proto.LeftRigh"
        "tIndication\022-\n\017camera_position\030\023 \003(\0132\024.c"
        "almcar.proto.Point\022+\n\rlane_boundary\030\024 \003("
        "\0132\024.calmcar.proto.Point\022\021\n\ttimestamp\030\025 \001"
        "(\003*8\n\010RoadType\022\025\n\021ROAD_TYPE_UNKNOWN\020\000\022\025\n"
        "\021ROAD_TYPE_HIGHWAY\020\001*\235\001\n\023LeftRightIndica"
        "tion\0223\n/LEFT_RIGHT_INDICATION_NO_LANE_CR"
        "OSSING_DETECTED\020\000\022\'\n#LEFT_RIGHT_INDICATI"
        "ON_LEFT_CROSSING\020\001\022(\n$LEFT_RIGHT_INDICAT"
        "ION_RIGHT_CROSSING\020\002b\006proto3"};
    ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(descriptor, 4428);
    ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile("calmcar.proto", &protobuf_RegisterTypes);
}

void AddDescriptors()
{
    static ::google::protobuf::internal::once_flag once;
    ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer
{
    StaticDescriptorInitializer() { AddDescriptors(); }
} static_descriptor_initializer;
}  // namespace protobuf_calmcar_2eproto
namespace calmcar
{
namespace proto
{
const ::google::protobuf::EnumDescriptor* ImageInfo_PixelFormat_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[0];
}
bool ImageInfo_PixelFormat_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ImageInfo_PixelFormat ImageInfo::PIXEL_FORMAT_UNKNOWN;
const ImageInfo_PixelFormat ImageInfo::PIXEL_FORMAT_YUV422;
const ImageInfo_PixelFormat ImageInfo::PIXEL_FORMAT_YUV420;
const ImageInfo_PixelFormat ImageInfo::PIXEL_FORMAT_BGR;
const ImageInfo_PixelFormat ImageInfo::PIXEL_FORMAT_RGB;
const ImageInfo_PixelFormat ImageInfo::PIXEL_FORMAT_JPEG;
const ImageInfo_PixelFormat ImageInfo::PixelFormat_MIN;
const ImageInfo_PixelFormat ImageInfo::PixelFormat_MAX;
const int ImageInfo::PixelFormat_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_SensorType_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[1];
}
bool Object_SensorType_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_SensorType Object::SENSOR_TYPE_UNKNOWN;
const Object_SensorType Object::SENSOR_TYPE_CAMERA;
const Object_SensorType Object::SENSOR_TYPE_RADAR;
const Object_SensorType Object::SENSOR_TYPE_LIDAR;
const Object_SensorType Object::SENSOR_TYPE_FUSED;
const Object_SensorType Object::SensorType_MIN;
const Object_SensorType Object::SensorType_MAX;
const int Object::SensorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_LaneAssignment_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[2];
}
bool Object_LaneAssignment_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_LaneAssignment Object::LANE_ASSIGNMENT_NOT_ASSIGNED;
const Object_LaneAssignment Object::LANE_ASSIGNMENT_EGO_LANE;
const Object_LaneAssignment Object::LANE_ASSIGNMENT_NEXT_LANE_LEFT;
const Object_LaneAssignment Object::LANE_ASSIGNMENT_NEXT_LANE_RIGHT;
const Object_LaneAssignment Object::LANE_ASSIGNMENT_NEXT_NEXT_LANE_LEFT;
const Object_LaneAssignment Object::LANE_ASSIGNMENT_NEXT_NEXT_LANE_RIGHT;
const Object_LaneAssignment Object::LaneAssignment_MIN;
const Object_LaneAssignment Object::LaneAssignment_MAX;
const int Object::LaneAssignment_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_MotionStatus_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[3];
}
bool Object_MotionStatus_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_MotionStatus Object::MOTION_STATUS_UNKNOWN;
const Object_MotionStatus Object::MOTION_STATUS_PARKED;
const Object_MotionStatus Object::MOTION_STATUS_STOPPED;
const Object_MotionStatus Object::MOTION_STATUS_MOVING;
const Object_MotionStatus Object::MOTION_STATUS_ONCOMING;
const Object_MotionStatus Object::MOTION_STATUS_CROSSING;
const Object_MotionStatus Object::MotionStatus_MIN;
const Object_MotionStatus Object::MotionStatus_MAX;
const int Object::MotionStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Object_CutInCutOut_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[4];
}
bool Object_CutInCutOut_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Object_CutInCutOut Object::CUT_IN_CUT_OUT_UNKNOWN;
const Object_CutInCutOut Object::CUT_IN_CUT_OUT_HOST_CUT_IN_LEFT;
const Object_CutInCutOut Object::CUT_IN_CUT_OUT_HOST_CUT_IN_RIGHT;
const Object_CutInCutOut Object::CUT_IN_CUT_OUT_HOST_CUT_OUT_LEFT;
const Object_CutInCutOut Object::CUT_IN_CUT_OUT_HOST_CUT_OUT_RIGHT;
const Object_CutInCutOut Object::CUT_IN_CUT_OUT_NO_CUT_IN_OUT;
const Object_CutInCutOut Object::CutInCutOut_MIN;
const Object_CutInCutOut Object::CutInCutOut_MAX;
const int Object::CutInCutOut_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_CoordinateType_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[5];
}
bool Lane_CoordinateType_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_CoordinateType Lane::COORDINATE_TYPE_IMAGE;
const Lane_CoordinateType Lane::COORDINATE_TYPE_WORLD;
const Lane_CoordinateType Lane::CoordinateType_MIN;
const Lane_CoordinateType Lane::CoordinateType_MAX;
const int Lane::CoordinateType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LineType_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[6];
}
bool Lane_LineType_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LineType Lane::LINE_TYPE_UNDECIDED;
const Lane_LineType Lane::LINE_TYPE_SOLID;
const Lane_LineType Lane::LINE_TYPE_DASHED;
const Lane_LineType Lane::LINE_TYPE_VIRTUAL;
const Lane_LineType Lane::LINE_TYPE_ROAD_EDGE;
const Lane_LineType Lane::LINE_TYPE_BOTTS_DOTS;
const Lane_LineType Lane::LineType_MIN;
const Lane_LineType Lane::LineType_MAX;
const int Lane::LineType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Lane_LineColor_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[7];
}
bool Lane_LineColor_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
            return true;
        default:
            return false;
    }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Lane_LineColor Lane::LINE_COLOR_UNKNOWN;
const Lane_LineColor Lane::LINE_COLOR_WHITE;
const Lane_LineColor Lane::LINE_COLOR_YELLOW;
const Lane_LineColor Lane::LINE_COLOR_BLUE_GREEN;
const Lane_LineColor Lane::LINE_COLOR_ORANGE_RED;
const Lane_LineColor Lane::LineColor_MIN;
const Lane_LineColor Lane::LineColor_MAX;
const int Lane::LineColor_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RoadType_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[8];
}
bool RoadType_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
            return true;
        default:
            return false;
    }
}

const ::google::protobuf::EnumDescriptor* LeftRightIndication_descriptor()
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return protobuf_calmcar_2eproto::file_level_enum_descriptors[9];
}
bool LeftRightIndication_IsValid(int value)
{
    switch (value)
    {
        case 0:
        case 1:
        case 2:
            return true;
        default:
            return false;
    }
}

// ===================================================================

void Point::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Point.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Point)
}
Point::Point(const Point& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&x_,
             &from.x_,
             static_cast< size_t >(reinterpret_cast< char* >(&z_) - reinterpret_cast< char* >(&x_)) + sizeof(z_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Point)
}

void Point::SharedCtor()
{
    ::memset(
        &x_, 0, static_cast< size_t >(reinterpret_cast< char* >(&z_) - reinterpret_cast< char* >(&x_)) + sizeof(z_));
}

Point::~Point()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Point)
    SharedDtor();
}

void Point::SharedDtor()
{
}

void Point::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Point.base);
    return *internal_default_instance();
}

void Point::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Point)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(
        &x_, 0, static_cast< size_t >(reinterpret_cast< char* >(&z_) - reinterpret_cast< char* >(&x_)) + sizeof(z_));
    _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Point)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // double x = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(9u /* 9 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &x_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double y = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(17u /* 17 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &y_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double z = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(25u /* 25 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &z_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Point)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Point)
    return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Point)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
    }

    // double y = 2;
    if (this->y() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
    }

    // double z = 3;
    if (this->z() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                          ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Point)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
    }

    // double y = 2;
    if (this->y() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
    }

    // double z = 3;
    if (this->z() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Point)
    return target;
}

size_t Point::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Point)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // double x = 1;
    if (this->x() != 0)
    {
        total_size += 1 + 8;
    }

    // double y = 2;
    if (this->y() != 0)
    {
        total_size += 1 + 8;
    }

    // double z = 3;
    if (this->z() != 0)
    {
        total_size += 1 + 8;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Point)
    GOOGLE_DCHECK_NE(&from, this);
    const Point* source = ::google::protobuf::internal::DynamicCastToGenerated< const Point >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Point)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Point)
        MergeFrom(*source);
    }
}

void Point::MergeFrom(const Point& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Point)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.x() != 0)
    {
        set_x(from.x());
    }
    if (from.y() != 0)
    {
        set_y(from.y());
    }
    if (from.z() != 0)
    {
        set_z(from.z());
    }
}

void Point::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Point)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Point::CopyFrom(const Point& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Point)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Point::IsInitialized() const
{
    return true;
}

void Point::Swap(Point* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Point::InternalSwap(Point* other)
{
    using std::swap;
    swap(x_, other->x_);
    swap(y_, other->y_);
    swap(z_, other->z_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Point2i::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2i::kXFieldNumber;
const int Point2i::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2i::Point2i() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Point2i.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Point2i)
}
Point2i::Point2i(const Point2i& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&x_,
             &from.x_,
             static_cast< size_t >(reinterpret_cast< char* >(&y_) - reinterpret_cast< char* >(&x_)) + sizeof(y_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Point2i)
}

void Point2i::SharedCtor()
{
    ::memset(
        &x_, 0, static_cast< size_t >(reinterpret_cast< char* >(&y_) - reinterpret_cast< char* >(&x_)) + sizeof(y_));
}

Point2i::~Point2i()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Point2i)
    SharedDtor();
}

void Point2i::SharedDtor()
{
}

void Point2i::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point2i::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point2i& Point2i::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Point2i.base);
    return *internal_default_instance();
}

void Point2i::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Point2i)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(
        &x_, 0, static_cast< size_t >(reinterpret_cast< char* >(&y_) - reinterpret_cast< char* >(&x_)) + sizeof(y_));
    _internal_metadata_.Clear();
}

bool Point2i::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Point2i)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // int64 x = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(8u /* 8 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &x_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 y = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(16u /* 16 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &y_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Point2i)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Point2i)
    return false;
#undef DO_
}

void Point2i::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Point2i)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 x = 1;
    if (this->x() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->x(), output);
    }

    // int64 y = 2;
    if (this->y() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->y(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Point2i)
}

::google::protobuf::uint8* Point2i::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                            ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Point2i)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 x = 1;
    if (this->x() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->x(), target);
    }

    // int64 y = 2;
    if (this->y() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->y(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Point2i)
    return target;
}

size_t Point2i::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Point2i)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // int64 x = 1;
    if (this->x() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->x());
    }

    // int64 y = 2;
    if (this->y() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->y());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Point2i::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Point2i)
    GOOGLE_DCHECK_NE(&from, this);
    const Point2i* source = ::google::protobuf::internal::DynamicCastToGenerated< const Point2i >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Point2i)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Point2i)
        MergeFrom(*source);
    }
}

void Point2i::MergeFrom(const Point2i& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Point2i)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.x() != 0)
    {
        set_x(from.x());
    }
    if (from.y() != 0)
    {
        set_y(from.y());
    }
}

void Point2i::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Point2i)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Point2i::CopyFrom(const Point2i& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Point2i)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Point2i::IsInitialized() const
{
    return true;
}

void Point2i::Swap(Point2i* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Point2i::InternalSwap(Point2i* other)
{
    using std::swap;
    swap(x_, other->x_);
    swap(y_, other->y_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point2i::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Rect::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Rect.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Rect)
}
Rect::Rect(const Rect& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(
        &x_,
        &from.x_,
        static_cast< size_t >(reinterpret_cast< char* >(&height_) - reinterpret_cast< char* >(&x_)) + sizeof(height_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Rect)
}

void Rect::SharedCtor()
{
    ::memset(
        &x_,
        0,
        static_cast< size_t >(reinterpret_cast< char* >(&height_) - reinterpret_cast< char* >(&x_)) + sizeof(height_));
}

Rect::~Rect()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Rect)
    SharedDtor();
}

void Rect::SharedDtor()
{
}

void Rect::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rect::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rect& Rect::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Rect.base);
    return *internal_default_instance();
}

void Rect::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Rect)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(
        &x_,
        0,
        static_cast< size_t >(reinterpret_cast< char* >(&height_) - reinterpret_cast< char* >(&x_)) + sizeof(height_));
    _internal_metadata_.Clear();
}

bool Rect::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Rect)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // double x = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(9u /* 9 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &x_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double y = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(17u /* 17 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &y_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double width = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(25u /* 25 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &width_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double height = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(33u /* 33 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &height_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Rect)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Rect)
    return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Rect)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
    }

    // double y = 2;
    if (this->y() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
    }

    // double width = 3;
    if (this->width() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
    }

    // double height = 4;
    if (this->height() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->height(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Rect)
}

::google::protobuf::uint8* Rect::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                         ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Rect)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double x = 1;
    if (this->x() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
    }

    // double y = 2;
    if (this->y() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
    }

    // double width = 3;
    if (this->width() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
    }

    // double height = 4;
    if (this->height() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->height(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Rect)
    return target;
}

size_t Rect::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Rect)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // double x = 1;
    if (this->x() != 0)
    {
        total_size += 1 + 8;
    }

    // double y = 2;
    if (this->y() != 0)
    {
        total_size += 1 + 8;
    }

    // double width = 3;
    if (this->width() != 0)
    {
        total_size += 1 + 8;
    }

    // double height = 4;
    if (this->height() != 0)
    {
        total_size += 1 + 8;
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Rect::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Rect)
    GOOGLE_DCHECK_NE(&from, this);
    const Rect* source = ::google::protobuf::internal::DynamicCastToGenerated< const Rect >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Rect)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Rect)
        MergeFrom(*source);
    }
}

void Rect::MergeFrom(const Rect& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Rect)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.x() != 0)
    {
        set_x(from.x());
    }
    if (from.y() != 0)
    {
        set_y(from.y());
    }
    if (from.width() != 0)
    {
        set_width(from.width());
    }
    if (from.height() != 0)
    {
        set_height(from.height());
    }
}

void Rect::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Rect)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Rect)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Rect::IsInitialized() const
{
    return true;
}

void Rect::Swap(Rect* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Rect::InternalSwap(Rect* other)
{
    using std::swap;
    swap(x_, other->x_);
    swap(y_, other->y_);
    swap(width_, other->width_);
    swap(height_, other->height_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rect::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void ImageInfo::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageInfo::kHeightFieldNumber;
const int ImageInfo::kWidthFieldNumber;
const int ImageInfo::kPixelFormatFieldNumber;
const int ImageInfo::kIntrinsicFieldNumber;
const int ImageInfo::kExtrinsicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageInfo::ImageInfo() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_ImageInfo.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.ImageInfo)
}
ImageInfo::ImageInfo(const ImageInfo& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    intrinsic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.intrinsic().size() > 0)
    {
        intrinsic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.intrinsic_);
    }
    extrinsic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.extrinsic().size() > 0)
    {
        extrinsic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extrinsic_);
    }
    ::memcpy(&height_,
             &from.height_,
             static_cast< size_t >(reinterpret_cast< char* >(&pixel_format_) - reinterpret_cast< char* >(&height_)) +
                 sizeof(pixel_format_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.ImageInfo)
}

void ImageInfo::SharedCtor()
{
    intrinsic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    extrinsic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&height_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&pixel_format_) - reinterpret_cast< char* >(&height_)) +
                 sizeof(pixel_format_));
}

ImageInfo::~ImageInfo()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.ImageInfo)
    SharedDtor();
}

void ImageInfo::SharedDtor()
{
    intrinsic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    extrinsic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageInfo::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ImageInfo::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageInfo& ImageInfo::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_ImageInfo.base);
    return *internal_default_instance();
}

void ImageInfo::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.ImageInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    intrinsic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    extrinsic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&height_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&pixel_format_) - reinterpret_cast< char* >(&height_)) +
                 sizeof(pixel_format_));
    _internal_metadata_.Clear();
}

bool ImageInfo::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.ImageInfo)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // int64 height = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(8u /* 8 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &height_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 width = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(16u /* 16 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &width_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.ImageInfo.PixelFormat pixel_format = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(24u /* 24 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_pixel_format(static_cast<::calmcar::proto::ImageInfo_PixelFormat >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // bytes intrinsic = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(34u /* 34 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(input, this->mutable_intrinsic()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // bytes extrinsic = 5;
            case 5:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(42u /* 42 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(input, this->mutable_extrinsic()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.ImageInfo)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.ImageInfo)
    return false;
#undef DO_
}

void ImageInfo::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.ImageInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 height = 1;
    if (this->height() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->height(), output);
    }

    // int64 width = 2;
    if (this->width() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->width(), output);
    }

    // .calmcar.proto.ImageInfo.PixelFormat pixel_format = 3;
    if (this->pixel_format() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(3, this->pixel_format(), output);
    }

    // bytes intrinsic = 4;
    if (this->intrinsic().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(4, this->intrinsic(), output);
    }

    // bytes extrinsic = 5;
    if (this->extrinsic().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(5, this->extrinsic(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.ImageInfo)
}

::google::protobuf::uint8* ImageInfo::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                              ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.ImageInfo)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 height = 1;
    if (this->height() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->height(), target);
    }

    // int64 width = 2;
    if (this->width() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->width(), target);
    }

    // .calmcar.proto.ImageInfo.PixelFormat pixel_format = 3;
    if (this->pixel_format() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(3, this->pixel_format(), target);
    }

    // bytes intrinsic = 4;
    if (this->intrinsic().size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(4, this->intrinsic(), target);
    }

    // bytes extrinsic = 5;
    if (this->extrinsic().size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(5, this->extrinsic(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.ImageInfo)
    return target;
}

size_t ImageInfo::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.ImageInfo)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // bytes intrinsic = 4;
    if (this->intrinsic().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->intrinsic());
    }

    // bytes extrinsic = 5;
    if (this->extrinsic().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->extrinsic());
    }

    // int64 height = 1;
    if (this->height() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->height());
    }

    // int64 width = 2;
    if (this->width() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->width());
    }

    // .calmcar.proto.ImageInfo.PixelFormat pixel_format = 3;
    if (this->pixel_format() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->pixel_format());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void ImageInfo::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.ImageInfo)
    GOOGLE_DCHECK_NE(&from, this);
    const ImageInfo* source = ::google::protobuf::internal::DynamicCastToGenerated< const ImageInfo >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.ImageInfo)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.ImageInfo)
        MergeFrom(*source);
    }
}

void ImageInfo::MergeFrom(const ImageInfo& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.ImageInfo)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.intrinsic().size() > 0)
    {

        intrinsic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.intrinsic_);
    }
    if (from.extrinsic().size() > 0)
    {

        extrinsic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extrinsic_);
    }
    if (from.height() != 0)
    {
        set_height(from.height());
    }
    if (from.width() != 0)
    {
        set_width(from.width());
    }
    if (from.pixel_format() != 0)
    {
        set_pixel_format(from.pixel_format());
    }
}

void ImageInfo::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.ImageInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void ImageInfo::CopyFrom(const ImageInfo& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.ImageInfo)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool ImageInfo::IsInitialized() const
{
    return true;
}

void ImageInfo::Swap(ImageInfo* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void ImageInfo::InternalSwap(ImageInfo* other)
{
    using std::swap;
    intrinsic_.Swap(
        &other->intrinsic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    extrinsic_.Swap(
        &other->extrinsic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    swap(height_, other->height_);
    swap(width_, other->width_);
    swap(pixel_format_, other->pixel_format_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ImageInfo::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Image::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Image::kDataFieldNumber;
const int Image::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Image::Image() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Image.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Image)
}
Image::Image(const Image& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.data().size() > 0)
    {
        data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    timestamp_ = from.timestamp_;
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Image)
}

void Image::SharedCtor()
{
    data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    timestamp_ = GOOGLE_LONGLONG(0);
}

Image::~Image()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Image)
    SharedDtor();
}

void Image::SharedDtor()
{
    data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Image::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Image::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Image& Image::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Image.base);
    return *internal_default_instance();
}

void Image::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Image)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    timestamp_ = GOOGLE_LONGLONG(0);
    _internal_metadata_.Clear();
}

bool Image::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Image)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // bytes data = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(10u /* 10 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(input, this->mutable_data()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 timestamp = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(16u /* 16 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &timestamp_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Image)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Image)
    return false;
#undef DO_
}

void Image::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Image)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // bytes data = 1;
    if (this->data().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(1, this->data(), output);
    }

    // int64 timestamp = 2;
    if (this->timestamp() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Image)
}

::google::protobuf::uint8* Image::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                          ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Image)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // bytes data = 1;
    if (this->data().size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(1, this->data(), target);
    }

    // int64 timestamp = 2;
    if (this->timestamp() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Image)
    return target;
}

size_t Image::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Image)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // bytes data = 1;
    if (this->data().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->data());
    }

    // int64 timestamp = 2;
    if (this->timestamp() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Image::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Image)
    GOOGLE_DCHECK_NE(&from, this);
    const Image* source = ::google::protobuf::internal::DynamicCastToGenerated< const Image >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Image)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Image)
        MergeFrom(*source);
    }
}

void Image::MergeFrom(const Image& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Image)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.data().size() > 0)
    {

        data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.timestamp() != 0)
    {
        set_timestamp(from.timestamp());
    }
}

void Image::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Image)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Image::CopyFrom(const Image& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Image)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Image::IsInitialized() const
{
    return true;
}

void Image::Swap(Image* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Image::InternalSwap(Image* other)
{
    using std::swap;
    data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    swap(timestamp_, other->timestamp_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Image::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Can::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Can::kIdFieldNumber;
const int Can::kDlcFieldNumber;
const int Can::kDataFieldNumber;
const int Can::kTimestampFieldNumber;
const int Can::kChannelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Can::Can() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Can.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Can)
}
Can::Can(const Can& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.data().size() > 0)
    {
        data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    ::memcpy(&id_,
             &from.id_,
             static_cast< size_t >(reinterpret_cast< char* >(&channel_) - reinterpret_cast< char* >(&id_)) +
                 sizeof(channel_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Can)
}

void Can::SharedCtor()
{
    data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&id_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&channel_) - reinterpret_cast< char* >(&id_)) +
                 sizeof(channel_));
}

Can::~Can()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Can)
    SharedDtor();
}

void Can::SharedDtor()
{
    data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Can::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Can::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Can& Can::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Can.base);
    return *internal_default_instance();
}

void Can::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Can)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&id_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&channel_) - reinterpret_cast< char* >(&id_)) +
                 sizeof(channel_));
    _internal_metadata_.Clear();
}

bool Can::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Can)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // int64 id = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(8u /* 8 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &id_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 dlc = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(16u /* 16 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &dlc_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // bytes data = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(26u /* 26 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(input, this->mutable_data()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 timestamp = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(32u /* 32 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &timestamp_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int32 channel = 5;
            case 5:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(40u /* 40 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int32,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT32 >(input, &channel_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Can)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Can)
    return false;
#undef DO_
}

void Can::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Can)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 id = 1;
    if (this->id() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
    }

    // int64 dlc = 2;
    if (this->dlc() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dlc(), output);
    }

    // bytes data = 3;
    if (this->data().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(3, this->data(), output);
    }

    // int64 timestamp = 4;
    if (this->timestamp() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
    }

    // int32 channel = 5;
    if (this->channel() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->channel(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Can)
}

::google::protobuf::uint8* Can::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                        ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Can)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 id = 1;
    if (this->id() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
    }

    // int64 dlc = 2;
    if (this->dlc() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dlc(), target);
    }

    // bytes data = 3;
    if (this->data().size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(3, this->data(), target);
    }

    // int64 timestamp = 4;
    if (this->timestamp() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
    }

    // int32 channel = 5;
    if (this->channel() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->channel(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Can)
    return target;
}

size_t Can::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Can)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // bytes data = 3;
    if (this->data().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->data());
    }

    // int64 id = 1;
    if (this->id() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->id());
    }

    // int64 dlc = 2;
    if (this->dlc() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->dlc());
    }

    // int64 timestamp = 4;
    if (this->timestamp() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp());
    }

    // int32 channel = 5;
    if (this->channel() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(this->channel());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Can::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Can)
    GOOGLE_DCHECK_NE(&from, this);
    const Can* source = ::google::protobuf::internal::DynamicCastToGenerated< const Can >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Can)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Can)
        MergeFrom(*source);
    }
}

void Can::MergeFrom(const Can& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Can)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.data().size() > 0)
    {

        data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.id() != 0)
    {
        set_id(from.id());
    }
    if (from.dlc() != 0)
    {
        set_dlc(from.dlc());
    }
    if (from.timestamp() != 0)
    {
        set_timestamp(from.timestamp());
    }
    if (from.channel() != 0)
    {
        set_channel(from.channel());
    }
}

void Can::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Can)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Can::CopyFrom(const Can& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Can)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Can::IsInitialized() const
{
    return true;
}

void Can::Swap(Can* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Can::InternalSwap(Can* other)
{
    using std::swap;
    data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    swap(id_, other->id_);
    swap(dlc_, other->dlc_);
    swap(timestamp_, other->timestamp_);
    swap(channel_, other->channel_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Can::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Gps::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Gps::kLatitudeFieldNumber;
const int Gps::kLongitudeFieldNumber;
const int Gps::kHeightFieldNumber;
const int Gps::kAngleFieldNumber;
const int Gps::kSpeedFieldNumber;
const int Gps::kHourFieldNumber;
const int Gps::kMinuteFieldNumber;
const int Gps::kSecondFieldNumber;
const int Gps::kMillisecondFieldNumber;
const int Gps::kDayFieldNumber;
const int Gps::kMonthFieldNumber;
const int Gps::kYearFieldNumber;
const int Gps::kCourseFieldNumber;
const int Gps::kSatellitesFieldNumber;
const int Gps::kGroundHeightFieldNumber;
const int Gps::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Gps::Gps() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Gps.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Gps)
}
Gps::Gps(const Gps& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&latitude_,
             &from.latitude_,
             static_cast< size_t >(reinterpret_cast< char* >(&unit_) - reinterpret_cast< char* >(&latitude_)) +
                 sizeof(unit_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Gps)
}

void Gps::SharedCtor()
{
    ::memset(&latitude_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&unit_) - reinterpret_cast< char* >(&latitude_)) +
                 sizeof(unit_));
}

Gps::~Gps()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Gps)
    SharedDtor();
}

void Gps::SharedDtor()
{
}

void Gps::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Gps::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Gps& Gps::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Gps.base);
    return *internal_default_instance();
}

void Gps::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Gps)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    ::memset(&latitude_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&unit_) - reinterpret_cast< char* >(&latitude_)) +
                 sizeof(unit_));
    _internal_metadata_.Clear();
}

bool Gps::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Gps)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(16383u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // double latitude = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(9u /* 9 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &latitude_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double longitude = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(17u /* 17 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &longitude_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double height = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(25u /* 25 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &height_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double angle = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(33u /* 33 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &angle_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double speed = 5;
            case 5:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(41u /* 41 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &speed_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 hour = 6;
            case 6:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(48u /* 48 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &hour_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 minute = 7;
            case 7:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(56u /* 56 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &minute_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 second = 8;
            case 8:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(64u /* 64 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &second_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 millisecond = 9;
            case 9:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(72u /* 72 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &millisecond_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 day = 10;
            case 10:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(80u /* 80 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &day_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 month = 11;
            case 11:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(88u /* 88 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &month_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 year = 12;
            case 12:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(96u /* 96 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &year_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double course = 13;
            case 13:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(105u /* 105 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &course_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 satellites = 14;
            case 14:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(112u /* 112 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &satellites_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double ground_height = 15;
            case 15:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(121u /* 121 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &ground_height_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 unit = 16;
            case 16:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(128u /* 128 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &unit_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Gps)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Gps)
    return false;
#undef DO_
}

void Gps::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Gps)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double latitude = 1;
    if (this->latitude() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
    }

    // double longitude = 2;
    if (this->longitude() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
    }

    // double height = 3;
    if (this->height() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
    }

    // double angle = 4;
    if (this->angle() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->angle(), output);
    }

    // double speed = 5;
    if (this->speed() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed(), output);
    }

    // int64 hour = 6;
    if (this->hour() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->hour(), output);
    }

    // int64 minute = 7;
    if (this->minute() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->minute(), output);
    }

    // int64 second = 8;
    if (this->second() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->second(), output);
    }

    // int64 millisecond = 9;
    if (this->millisecond() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->millisecond(), output);
    }

    // int64 day = 10;
    if (this->day() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->day(), output);
    }

    // int64 month = 11;
    if (this->month() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->month(), output);
    }

    // int64 year = 12;
    if (this->year() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->year(), output);
    }

    // double course = 13;
    if (this->course() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->course(), output);
    }

    // int64 satellites = 14;
    if (this->satellites() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->satellites(), output);
    }

    // double ground_height = 15;
    if (this->ground_height() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ground_height(), output);
    }

    // int64 unit = 16;
    if (this->unit() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->unit(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Gps)
}

::google::protobuf::uint8* Gps::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                        ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Gps)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // double latitude = 1;
    if (this->latitude() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
    }

    // double longitude = 2;
    if (this->longitude() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
    }

    // double height = 3;
    if (this->height() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
    }

    // double angle = 4;
    if (this->angle() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->angle(), target);
    }

    // double speed = 5;
    if (this->speed() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed(), target);
    }

    // int64 hour = 6;
    if (this->hour() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->hour(), target);
    }

    // int64 minute = 7;
    if (this->minute() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->minute(), target);
    }

    // int64 second = 8;
    if (this->second() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->second(), target);
    }

    // int64 millisecond = 9;
    if (this->millisecond() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->millisecond(), target);
    }

    // int64 day = 10;
    if (this->day() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->day(), target);
    }

    // int64 month = 11;
    if (this->month() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->month(), target);
    }

    // int64 year = 12;
    if (this->year() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->year(), target);
    }

    // double course = 13;
    if (this->course() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->course(), target);
    }

    // int64 satellites = 14;
    if (this->satellites() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->satellites(), target);
    }

    // double ground_height = 15;
    if (this->ground_height() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->ground_height(), target);
    }

    // int64 unit = 16;
    if (this->unit() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->unit(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Gps)
    return target;
}

size_t Gps::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Gps)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // double latitude = 1;
    if (this->latitude() != 0)
    {
        total_size += 1 + 8;
    }

    // double longitude = 2;
    if (this->longitude() != 0)
    {
        total_size += 1 + 8;
    }

    // double height = 3;
    if (this->height() != 0)
    {
        total_size += 1 + 8;
    }

    // double angle = 4;
    if (this->angle() != 0)
    {
        total_size += 1 + 8;
    }

    // double speed = 5;
    if (this->speed() != 0)
    {
        total_size += 1 + 8;
    }

    // int64 hour = 6;
    if (this->hour() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->hour());
    }

    // int64 minute = 7;
    if (this->minute() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->minute());
    }

    // int64 second = 8;
    if (this->second() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->second());
    }

    // int64 millisecond = 9;
    if (this->millisecond() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->millisecond());
    }

    // int64 day = 10;
    if (this->day() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->day());
    }

    // int64 month = 11;
    if (this->month() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->month());
    }

    // int64 year = 12;
    if (this->year() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->year());
    }

    // double course = 13;
    if (this->course() != 0)
    {
        total_size += 1 + 8;
    }

    // int64 satellites = 14;
    if (this->satellites() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->satellites());
    }

    // double ground_height = 15;
    if (this->ground_height() != 0)
    {
        total_size += 1 + 8;
    }

    // int64 unit = 16;
    if (this->unit() != 0)
    {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->unit());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Gps::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Gps)
    GOOGLE_DCHECK_NE(&from, this);
    const Gps* source = ::google::protobuf::internal::DynamicCastToGenerated< const Gps >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Gps)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Gps)
        MergeFrom(*source);
    }
}

void Gps::MergeFrom(const Gps& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Gps)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.latitude() != 0)
    {
        set_latitude(from.latitude());
    }
    if (from.longitude() != 0)
    {
        set_longitude(from.longitude());
    }
    if (from.height() != 0)
    {
        set_height(from.height());
    }
    if (from.angle() != 0)
    {
        set_angle(from.angle());
    }
    if (from.speed() != 0)
    {
        set_speed(from.speed());
    }
    if (from.hour() != 0)
    {
        set_hour(from.hour());
    }
    if (from.minute() != 0)
    {
        set_minute(from.minute());
    }
    if (from.second() != 0)
    {
        set_second(from.second());
    }
    if (from.millisecond() != 0)
    {
        set_millisecond(from.millisecond());
    }
    if (from.day() != 0)
    {
        set_day(from.day());
    }
    if (from.month() != 0)
    {
        set_month(from.month());
    }
    if (from.year() != 0)
    {
        set_year(from.year());
    }
    if (from.course() != 0)
    {
        set_course(from.course());
    }
    if (from.satellites() != 0)
    {
        set_satellites(from.satellites());
    }
    if (from.ground_height() != 0)
    {
        set_ground_height(from.ground_height());
    }
    if (from.unit() != 0)
    {
        set_unit(from.unit());
    }
}

void Gps::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Gps)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Gps::CopyFrom(const Gps& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Gps)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Gps::IsInitialized() const
{
    return true;
}

void Gps::Swap(Gps* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Gps::InternalSwap(Gps* other)
{
    using std::swap;
    swap(latitude_, other->latitude_);
    swap(longitude_, other->longitude_);
    swap(height_, other->height_);
    swap(angle_, other->angle_);
    swap(speed_, other->speed_);
    swap(hour_, other->hour_);
    swap(minute_, other->minute_);
    swap(second_, other->second_);
    swap(millisecond_, other->millisecond_);
    swap(day_, other->day_);
    swap(month_, other->month_);
    swap(year_, other->year_);
    swap(course_, other->course_);
    swap(satellites_, other->satellites_);
    swap(ground_height_, other->ground_height_);
    swap(unit_, other->unit_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Gps::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Object::InitAsDefaultInstance()
{
    ::calmcar::proto::_Object_default_instance_._instance.get_mutable()->bbox_ =
        const_cast<::calmcar::proto::Rect* >(::calmcar::proto::Rect::internal_default_instance());
    ::calmcar::proto::_Object_default_instance_._instance.get_mutable()->distance_ =
        const_cast<::calmcar::proto::Point* >(::calmcar::proto::Point::internal_default_instance());
    ::calmcar::proto::_Object_default_instance_._instance.get_mutable()->relative_velocity_ =
        const_cast<::calmcar::proto::Point* >(::calmcar::proto::Point::internal_default_instance());
    ::calmcar::proto::_Object_default_instance_._instance.get_mutable()->relative_acceleration_ =
        const_cast<::calmcar::proto::Point* >(::calmcar::proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Object::kSensorTypeFieldNumber;
const int Object::kIdFieldNumber;
const int Object::kClassFieldNumber;
const int Object::kClassNameFieldNumber;
const int Object::kSubclassFieldNumber;
const int Object::kSubclassNameFieldNumber;
const int Object::kConfidenceFieldNumber;
const int Object::kBboxFieldNumber;
const int Object::kLifeTimeFieldNumber;
const int Object::kTimestampFieldNumber;
const int Object::kHeightFieldNumber;
const int Object::kWidthFieldNumber;
const int Object::kLengthFieldNumber;
const int Object::kDistanceFieldNumber;
const int Object::kRelativeVelocityFieldNumber;
const int Object::kRelativeAccelerationFieldNumber;
const int Object::kTtcFieldNumber;
const int Object::kThwFieldNumber;
const int Object::kAngleLeftFieldNumber;
const int Object::kAngleRightFieldNumber;
const int Object::kYawAngleFieldNumber;
const int Object::kLaneAssignmentFieldNumber;
const int Object::kMotionStatusFieldNumber;
const int Object::kCutinCutoutFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Object::Object() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Object.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Object)
}
Object::Object(const Object& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.class_name().size() > 0)
    {
        class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.subclass_name().size() > 0)
    {
        subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                         from.subclass_name_);
    }
    if (from.has_bbox())
    {
        bbox_ = new ::calmcar::proto::Rect(*from.bbox_);
    }
    else
    {
        bbox_ = NULL;
    }
    if (from.has_distance())
    {
        distance_ = new ::calmcar::proto::Point(*from.distance_);
    }
    else
    {
        distance_ = NULL;
    }
    if (from.has_relative_velocity())
    {
        relative_velocity_ = new ::calmcar::proto::Point(*from.relative_velocity_);
    }
    else
    {
        relative_velocity_ = NULL;
    }
    if (from.has_relative_acceleration())
    {
        relative_acceleration_ = new ::calmcar::proto::Point(*from.relative_acceleration_);
    }
    else
    {
        relative_acceleration_ = NULL;
    }
    ::memcpy(&id_,
             &from.id_,
             static_cast< size_t >(reinterpret_cast< char* >(&cutin_cutout_) - reinterpret_cast< char* >(&id_)) +
                 sizeof(cutin_cutout_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Object)
}

void Object::SharedCtor()
{
    class_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    subclass_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    ::memset(&bbox_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&cutin_cutout_) - reinterpret_cast< char* >(&bbox_)) +
                 sizeof(cutin_cutout_));
}

Object::~Object()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Object)
    SharedDtor();
}

void Object::SharedDtor()
{
    class_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    subclass_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance())
        delete bbox_;
    if (this != internal_default_instance())
        delete distance_;
    if (this != internal_default_instance())
        delete relative_velocity_;
    if (this != internal_default_instance())
        delete relative_acceleration_;
}

void Object::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Object::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Object& Object::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Object.base);
    return *internal_default_instance();
}

void Object::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Object)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (GetArenaNoVirtual() == NULL && bbox_ != NULL)
    {
        delete bbox_;
    }
    bbox_ = NULL;
    if (GetArenaNoVirtual() == NULL && distance_ != NULL)
    {
        delete distance_;
    }
    distance_ = NULL;
    if (GetArenaNoVirtual() == NULL && relative_velocity_ != NULL)
    {
        delete relative_velocity_;
    }
    relative_velocity_ = NULL;
    if (GetArenaNoVirtual() == NULL && relative_acceleration_ != NULL)
    {
        delete relative_acceleration_;
    }
    relative_acceleration_ = NULL;
    ::memset(&id_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&cutin_cutout_) - reinterpret_cast< char* >(&id_)) +
                 sizeof(cutin_cutout_));
    _internal_metadata_.Clear();
}

bool Object::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Object)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(16383u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // .calmcar.proto.Object.SensorType sensor_type = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(8u /* 8 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_sensor_type(static_cast<::calmcar::proto::Object_SensorType >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 id = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(16u /* 16 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &id_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 class_ = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(24u /* 24 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &class__)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // string class_name = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(34u /* 34 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, this->mutable_class_name()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->class_name().data(),
                        static_cast< int >(this->class_name().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "calmcar.proto.Object.class_name"));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 subclass = 5;
            case 5:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(40u /* 40 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &subclass_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // string subclass_name = 6;
            case 6:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(50u /* 50 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, this->mutable_subclass_name()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->subclass_name().data(),
                        static_cast< int >(this->subclass_name().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "calmcar.proto.Object.subclass_name"));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double confidence = 7;
            case 7:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(57u /* 57 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &confidence_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Rect bbox = 8;
            case 8:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(66u /* 66 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_bbox()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 life_time = 9;
            case 9:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(72u /* 72 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &life_time_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 timestamp = 10;
            case 10:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(80u /* 80 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &timestamp_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double height = 11;
            case 11:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(89u /* 89 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &height_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double width = 12;
            case 12:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(97u /* 97 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &width_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double length = 13;
            case 13:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(105u /* 105 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &length_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Point distance = 14;
            case 14:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(114u /* 114 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_distance()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Point relative_velocity = 15;
            case 15:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(122u /* 122 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_relative_velocity()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Point relative_acceleration = 16;
            case 16:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(130u /* 130 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input,
                                                                                  mutable_relative_acceleration()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double ttc = 17;
            case 17:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(137u /* 137 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &ttc_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double thw = 18;
            case 18:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(145u /* 145 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &thw_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double angle_left = 19;
            case 19:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(153u /* 153 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &angle_left_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double angle_right = 20;
            case 20:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(161u /* 161 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &angle_right_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double yaw_angle = 21;
            case 21:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(169u /* 169 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &yaw_angle_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Object.LaneAssignment lane_assignment = 22;
            case 22:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(176u /* 176 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_lane_assignment(static_cast<::calmcar::proto::Object_LaneAssignment >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Object.MotionStatus motion_status = 23;
            case 23:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(184u /* 184 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_motion_status(static_cast<::calmcar::proto::Object_MotionStatus >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Object.CutInCutOut cutin_cutout = 24;
            case 24:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(192u /* 192 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_cutin_cutout(static_cast<::calmcar::proto::Object_CutInCutOut >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Object)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Object)
    return false;
#undef DO_
}

void Object::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Object)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .calmcar.proto.Object.SensorType sensor_type = 1;
    if (this->sensor_type() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->sensor_type(), output);
    }

    // int64 id = 2;
    if (this->id() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
    }

    // int64 class_ = 3;
    if (this->class_() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->class_(), output);
    }

    // string class_name = 4;
    if (this->class_name().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(),
            static_cast< int >(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Object.class_name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4, this->class_name(), output);
    }

    // int64 subclass = 5;
    if (this->subclass() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->subclass(), output);
    }

    // string subclass_name = 6;
    if (this->subclass_name().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subclass_name().data(),
            static_cast< int >(this->subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Object.subclass_name");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(6, this->subclass_name(), output);
    }

    // double confidence = 7;
    if (this->confidence() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->confidence(), output);
    }

    // .calmcar.proto.Rect bbox = 8;
    if (this->has_bbox())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(8, this->_internal_bbox(), output);
    }

    // int64 life_time = 9;
    if (this->life_time() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->life_time(), output);
    }

    // int64 timestamp = 10;
    if (this->timestamp() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->timestamp(), output);
    }

    // double height = 11;
    if (this->height() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->height(), output);
    }

    // double width = 12;
    if (this->width() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->width(), output);
    }

    // double length = 13;
    if (this->length() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->length(), output);
    }

    // .calmcar.proto.Point distance = 14;
    if (this->has_distance())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(14, this->_internal_distance(), output);
    }

    // .calmcar.proto.Point relative_velocity = 15;
    if (this->has_relative_velocity())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            15, this->_internal_relative_velocity(), output);
    }

    // .calmcar.proto.Point relative_acceleration = 16;
    if (this->has_relative_acceleration())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            16, this->_internal_relative_acceleration(), output);
    }

    // double ttc = 17;
    if (this->ttc() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->ttc(), output);
    }

    // double thw = 18;
    if (this->thw() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->thw(), output);
    }

    // double angle_left = 19;
    if (this->angle_left() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->angle_left(), output);
    }

    // double angle_right = 20;
    if (this->angle_right() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->angle_right(), output);
    }

    // double yaw_angle = 21;
    if (this->yaw_angle() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->yaw_angle(), output);
    }

    // .calmcar.proto.Object.LaneAssignment lane_assignment = 22;
    if (this->lane_assignment() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(22, this->lane_assignment(), output);
    }

    // .calmcar.proto.Object.MotionStatus motion_status = 23;
    if (this->motion_status() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(23, this->motion_status(), output);
    }

    // .calmcar.proto.Object.CutInCutOut cutin_cutout = 24;
    if (this->cutin_cutout() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(24, this->cutin_cutout(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Object)
}

::google::protobuf::uint8* Object::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                           ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Object)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .calmcar.proto.Object.SensorType sensor_type = 1;
    if (this->sensor_type() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(1, this->sensor_type(), target);
    }

    // int64 id = 2;
    if (this->id() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
    }

    // int64 class_ = 3;
    if (this->class_() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->class_(), target);
    }

    // string class_name = 4;
    if (this->class_name().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->class_name().data(),
            static_cast< int >(this->class_name().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Object.class_name");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(4, this->class_name(), target);
    }

    // int64 subclass = 5;
    if (this->subclass() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->subclass(), target);
    }

    // string subclass_name = 6;
    if (this->subclass_name().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subclass_name().data(),
            static_cast< int >(this->subclass_name().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Object.subclass_name");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(6, this->subclass_name(), target);
    }

    // double confidence = 7;
    if (this->confidence() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->confidence(), target);
    }

    // .calmcar.proto.Rect bbox = 8;
    if (this->has_bbox())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            8, this->_internal_bbox(), deterministic, target);
    }

    // int64 life_time = 9;
    if (this->life_time() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->life_time(), target);
    }

    // int64 timestamp = 10;
    if (this->timestamp() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->timestamp(), target);
    }

    // double height = 11;
    if (this->height() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->height(), target);
    }

    // double width = 12;
    if (this->width() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->width(), target);
    }

    // double length = 13;
    if (this->length() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->length(), target);
    }

    // .calmcar.proto.Point distance = 14;
    if (this->has_distance())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            14, this->_internal_distance(), deterministic, target);
    }

    // .calmcar.proto.Point relative_velocity = 15;
    if (this->has_relative_velocity())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            15, this->_internal_relative_velocity(), deterministic, target);
    }

    // .calmcar.proto.Point relative_acceleration = 16;
    if (this->has_relative_acceleration())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            16, this->_internal_relative_acceleration(), deterministic, target);
    }

    // double ttc = 17;
    if (this->ttc() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->ttc(), target);
    }

    // double thw = 18;
    if (this->thw() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->thw(), target);
    }

    // double angle_left = 19;
    if (this->angle_left() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->angle_left(), target);
    }

    // double angle_right = 20;
    if (this->angle_right() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->angle_right(), target);
    }

    // double yaw_angle = 21;
    if (this->yaw_angle() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->yaw_angle(), target);
    }

    // .calmcar.proto.Object.LaneAssignment lane_assignment = 22;
    if (this->lane_assignment() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(22, this->lane_assignment(), target);
    }

    // .calmcar.proto.Object.MotionStatus motion_status = 23;
    if (this->motion_status() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(23, this->motion_status(), target);
    }

    // .calmcar.proto.Object.CutInCutOut cutin_cutout = 24;
    if (this->cutin_cutout() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(24, this->cutin_cutout(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Object)
    return target;
}

size_t Object::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Object)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // string class_name = 4;
    if (this->class_name().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->class_name());
    }

    // string subclass_name = 6;
    if (this->subclass_name().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->subclass_name());
    }

    // .calmcar.proto.Rect bbox = 8;
    if (this->has_bbox())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*bbox_);
    }

    // .calmcar.proto.Point distance = 14;
    if (this->has_distance())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*distance_);
    }

    // .calmcar.proto.Point relative_velocity = 15;
    if (this->has_relative_velocity())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*relative_velocity_);
    }

    // .calmcar.proto.Point relative_acceleration = 16;
    if (this->has_relative_acceleration())
    {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*relative_acceleration_);
    }

    // int64 id = 2;
    if (this->id() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->id());
    }

    // int64 class_ = 3;
    if (this->class_() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->class_());
    }

    // int64 subclass = 5;
    if (this->subclass() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->subclass());
    }

    // double confidence = 7;
    if (this->confidence() != 0)
    {
        total_size += 1 + 8;
    }

    // int64 life_time = 9;
    if (this->life_time() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->life_time());
    }

    // int64 timestamp = 10;
    if (this->timestamp() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp());
    }

    // double height = 11;
    if (this->height() != 0)
    {
        total_size += 1 + 8;
    }

    // .calmcar.proto.Object.SensorType sensor_type = 1;
    if (this->sensor_type() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->sensor_type());
    }

    // .calmcar.proto.Object.LaneAssignment lane_assignment = 22;
    if (this->lane_assignment() != 0)
    {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->lane_assignment());
    }

    // double width = 12;
    if (this->width() != 0)
    {
        total_size += 1 + 8;
    }

    // double length = 13;
    if (this->length() != 0)
    {
        total_size += 1 + 8;
    }

    // double ttc = 17;
    if (this->ttc() != 0)
    {
        total_size += 2 + 8;
    }

    // double thw = 18;
    if (this->thw() != 0)
    {
        total_size += 2 + 8;
    }

    // double angle_left = 19;
    if (this->angle_left() != 0)
    {
        total_size += 2 + 8;
    }

    // double angle_right = 20;
    if (this->angle_right() != 0)
    {
        total_size += 2 + 8;
    }

    // double yaw_angle = 21;
    if (this->yaw_angle() != 0)
    {
        total_size += 2 + 8;
    }

    // .calmcar.proto.Object.MotionStatus motion_status = 23;
    if (this->motion_status() != 0)
    {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_status());
    }

    // .calmcar.proto.Object.CutInCutOut cutin_cutout = 24;
    if (this->cutin_cutout() != 0)
    {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->cutin_cutout());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Object::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Object)
    GOOGLE_DCHECK_NE(&from, this);
    const Object* source = ::google::protobuf::internal::DynamicCastToGenerated< const Object >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Object)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Object)
        MergeFrom(*source);
    }
}

void Object::MergeFrom(const Object& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Object)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.class_name().size() > 0)
    {

        class_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_name_);
    }
    if (from.subclass_name().size() > 0)
    {

        subclass_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                         from.subclass_name_);
    }
    if (from.has_bbox())
    {
        mutable_bbox()->::calmcar::proto::Rect::MergeFrom(from.bbox());
    }
    if (from.has_distance())
    {
        mutable_distance()->::calmcar::proto::Point::MergeFrom(from.distance());
    }
    if (from.has_relative_velocity())
    {
        mutable_relative_velocity()->::calmcar::proto::Point::MergeFrom(from.relative_velocity());
    }
    if (from.has_relative_acceleration())
    {
        mutable_relative_acceleration()->::calmcar::proto::Point::MergeFrom(from.relative_acceleration());
    }
    if (from.id() != 0)
    {
        set_id(from.id());
    }
    if (from.class_() != 0)
    {
        set_class_(from.class_());
    }
    if (from.subclass() != 0)
    {
        set_subclass(from.subclass());
    }
    if (from.confidence() != 0)
    {
        set_confidence(from.confidence());
    }
    if (from.life_time() != 0)
    {
        set_life_time(from.life_time());
    }
    if (from.timestamp() != 0)
    {
        set_timestamp(from.timestamp());
    }
    if (from.height() != 0)
    {
        set_height(from.height());
    }
    if (from.sensor_type() != 0)
    {
        set_sensor_type(from.sensor_type());
    }
    if (from.lane_assignment() != 0)
    {
        set_lane_assignment(from.lane_assignment());
    }
    if (from.width() != 0)
    {
        set_width(from.width());
    }
    if (from.length() != 0)
    {
        set_length(from.length());
    }
    if (from.ttc() != 0)
    {
        set_ttc(from.ttc());
    }
    if (from.thw() != 0)
    {
        set_thw(from.thw());
    }
    if (from.angle_left() != 0)
    {
        set_angle_left(from.angle_left());
    }
    if (from.angle_right() != 0)
    {
        set_angle_right(from.angle_right());
    }
    if (from.yaw_angle() != 0)
    {
        set_yaw_angle(from.yaw_angle());
    }
    if (from.motion_status() != 0)
    {
        set_motion_status(from.motion_status());
    }
    if (from.cutin_cutout() != 0)
    {
        set_cutin_cutout(from.cutin_cutout());
    }
}

void Object::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Object)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Object::CopyFrom(const Object& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Object)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Object::IsInitialized() const
{
    return true;
}

void Object::Swap(Object* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Object::InternalSwap(Object* other)
{
    using std::swap;
    class_name_.Swap(
        &other->class_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    subclass_name_.Swap(
        &other->subclass_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    swap(bbox_, other->bbox_);
    swap(distance_, other->distance_);
    swap(relative_velocity_, other->relative_velocity_);
    swap(relative_acceleration_, other->relative_acceleration_);
    swap(id_, other->id_);
    swap(class__, other->class__);
    swap(subclass_, other->subclass_);
    swap(confidence_, other->confidence_);
    swap(life_time_, other->life_time_);
    swap(timestamp_, other->timestamp_);
    swap(height_, other->height_);
    swap(sensor_type_, other->sensor_type_);
    swap(lane_assignment_, other->lane_assignment_);
    swap(width_, other->width_);
    swap(length_, other->length_);
    swap(ttc_, other->ttc_);
    swap(thw_, other->thw_);
    swap(angle_left_, other->angle_left_);
    swap(angle_right_, other->angle_right_);
    swap(yaw_angle_, other->yaw_angle_);
    swap(motion_status_, other->motion_status_);
    swap(cutin_cutout_, other->cutin_cutout_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Object::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Lane::InitAsDefaultInstance()
{
    ::calmcar::proto::_Lane_default_instance_._instance.get_mutable()->start_ =
        const_cast<::calmcar::proto::Point* >(::calmcar::proto::Point::internal_default_instance());
    ::calmcar::proto::_Lane_default_instance_._instance.get_mutable()->end_ =
        const_cast<::calmcar::proto::Point* >(::calmcar::proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Lane::kCoordinateTypeFieldNumber;
const int Lane::kC0FieldNumber;
const int Lane::kC1FieldNumber;
const int Lane::kC2FieldNumber;
const int Lane::kC3FieldNumber;
const int Lane::kIndexFieldNumber;
const int Lane::kQualityFieldNumber;
const int Lane::kLineTypeFieldNumber;
const int Lane::kLineColorFieldNumber;
const int Lane::kStartFieldNumber;
const int Lane::kEndFieldNumber;
const int Lane::kDistanceToHostFieldNumber;
const int Lane::kImagePointsFieldNumber;
const int Lane::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Lane::Lane() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Lane.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Lane)
}
Lane::Lane(const Lane& from)
    : ::google::protobuf::Message(), _internal_metadata_(NULL), image_points_(from.image_points_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_start())
    {
        start_ = new ::calmcar::proto::Point(*from.start_);
    }
    else
    {
        start_ = NULL;
    }
    if (from.has_end())
    {
        end_ = new ::calmcar::proto::Point(*from.end_);
    }
    else
    {
        end_ = NULL;
    }
    ::memcpy(&c0_,
             &from.c0_,
             static_cast< size_t >(reinterpret_cast< char* >(&line_color_) - reinterpret_cast< char* >(&c0_)) +
                 sizeof(line_color_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Lane)
}

void Lane::SharedCtor()
{
    ::memset(&start_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&line_color_) - reinterpret_cast< char* >(&start_)) +
                 sizeof(line_color_));
}

Lane::~Lane()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Lane)
    SharedDtor();
}

void Lane::SharedDtor()
{
    if (this != internal_default_instance())
        delete start_;
    if (this != internal_default_instance())
        delete end_;
}

void Lane::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Lane::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Lane& Lane::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Lane.base);
    return *internal_default_instance();
}

void Lane::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Lane)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    image_points_.Clear();
    if (GetArenaNoVirtual() == NULL && start_ != NULL)
    {
        delete start_;
    }
    start_ = NULL;
    if (GetArenaNoVirtual() == NULL && end_ != NULL)
    {
        delete end_;
    }
    end_ = NULL;
    ::memset(&c0_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&line_color_) - reinterpret_cast< char* >(&c0_)) +
                 sizeof(line_color_));
    _internal_metadata_.Clear();
}

bool Lane::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Lane)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // .calmcar.proto.Lane.CoordinateType coordinate_type = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(8u /* 8 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_coordinate_type(static_cast<::calmcar::proto::Lane_CoordinateType >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double C0 = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(17u /* 17 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &c0_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double C1 = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(25u /* 25 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &c1_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double C2 = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(33u /* 33 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &c2_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double C3 = 5;
            case 5:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(41u /* 41 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &c3_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 index = 6;
            case 6:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(48u /* 48 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &index_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 quality = 7;
            case 7:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(56u /* 56 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &quality_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Lane.LineType line_type = 8;
            case 8:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(64u /* 64 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_line_type(static_cast<::calmcar::proto::Lane_LineType >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Lane.LineColor line_color = 9;
            case 9:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(72u /* 72 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_line_color(static_cast<::calmcar::proto::Lane_LineColor >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Point start = 10;
            case 10:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(82u /* 82 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_start()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Point end = 11;
            case 11:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(90u /* 90 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_end()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double distance_to_host = 12;
            case 12:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(97u /* 97 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &distance_to_host_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .calmcar.proto.Point image_points = 13;
            case 13:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(106u /* 106 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_image_points()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double width = 14;
            case 14:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(113u /* 113 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &width_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Lane)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Lane)
    return false;
#undef DO_
}

void Lane::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Lane)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .calmcar.proto.Lane.CoordinateType coordinate_type = 1;
    if (this->coordinate_type() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(1, this->coordinate_type(), output);
    }

    // double C0 = 2;
    if (this->c0() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->c0(), output);
    }

    // double C1 = 3;
    if (this->c1() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->c1(), output);
    }

    // double C2 = 4;
    if (this->c2() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->c2(), output);
    }

    // double C3 = 5;
    if (this->c3() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->c3(), output);
    }

    // int64 index = 6;
    if (this->index() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->index(), output);
    }

    // int64 quality = 7;
    if (this->quality() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->quality(), output);
    }

    // .calmcar.proto.Lane.LineType line_type = 8;
    if (this->line_type() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(8, this->line_type(), output);
    }

    // .calmcar.proto.Lane.LineColor line_color = 9;
    if (this->line_color() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(9, this->line_color(), output);
    }

    // .calmcar.proto.Point start = 10;
    if (this->has_start())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(10, this->_internal_start(), output);
    }

    // .calmcar.proto.Point end = 11;
    if (this->has_end())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(11, this->_internal_end(), output);
    }

    // double distance_to_host = 12;
    if (this->distance_to_host() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->distance_to_host(), output);
    }

    // repeated .calmcar.proto.Point image_points = 13;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->image_points_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            13, this->image_points(static_cast< int >(i)), output);
    }

    // double width = 14;
    if (this->width() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->width(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Lane)
}

::google::protobuf::uint8* Lane::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                         ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Lane)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .calmcar.proto.Lane.CoordinateType coordinate_type = 1;
    if (this->coordinate_type() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(1, this->coordinate_type(), target);
    }

    // double C0 = 2;
    if (this->c0() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->c0(), target);
    }

    // double C1 = 3;
    if (this->c1() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->c1(), target);
    }

    // double C2 = 4;
    if (this->c2() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->c2(), target);
    }

    // double C3 = 5;
    if (this->c3() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->c3(), target);
    }

    // int64 index = 6;
    if (this->index() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->index(), target);
    }

    // int64 quality = 7;
    if (this->quality() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->quality(), target);
    }

    // .calmcar.proto.Lane.LineType line_type = 8;
    if (this->line_type() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(8, this->line_type(), target);
    }

    // .calmcar.proto.Lane.LineColor line_color = 9;
    if (this->line_color() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(9, this->line_color(), target);
    }

    // .calmcar.proto.Point start = 10;
    if (this->has_start())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            10, this->_internal_start(), deterministic, target);
    }

    // .calmcar.proto.Point end = 11;
    if (this->has_end())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            11, this->_internal_end(), deterministic, target);
    }

    // double distance_to_host = 12;
    if (this->distance_to_host() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->distance_to_host(), target);
    }

    // repeated .calmcar.proto.Point image_points = 13;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->image_points_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            13, this->image_points(static_cast< int >(i)), deterministic, target);
    }

    // double width = 14;
    if (this->width() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->width(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Lane)
    return target;
}

size_t Lane::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Lane)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // repeated .calmcar.proto.Point image_points = 13;
    {
        unsigned int count = static_cast< unsigned int >(this->image_points_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(this->image_points(static_cast< int >(i)));
        }
    }

    // .calmcar.proto.Point start = 10;
    if (this->has_start())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*start_);
    }

    // .calmcar.proto.Point end = 11;
    if (this->has_end())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*end_);
    }

    // double C0 = 2;
    if (this->c0() != 0)
    {
        total_size += 1 + 8;
    }

    // double C1 = 3;
    if (this->c1() != 0)
    {
        total_size += 1 + 8;
    }

    // double C2 = 4;
    if (this->c2() != 0)
    {
        total_size += 1 + 8;
    }

    // .calmcar.proto.Lane.CoordinateType coordinate_type = 1;
    if (this->coordinate_type() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->coordinate_type());
    }

    // .calmcar.proto.Lane.LineType line_type = 8;
    if (this->line_type() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_type());
    }

    // double C3 = 5;
    if (this->c3() != 0)
    {
        total_size += 1 + 8;
    }

    // int64 index = 6;
    if (this->index() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->index());
    }

    // int64 quality = 7;
    if (this->quality() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->quality());
    }

    // double distance_to_host = 12;
    if (this->distance_to_host() != 0)
    {
        total_size += 1 + 8;
    }

    // double width = 14;
    if (this->width() != 0)
    {
        total_size += 1 + 8;
    }

    // .calmcar.proto.Lane.LineColor line_color = 9;
    if (this->line_color() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_color());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Lane::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Lane)
    GOOGLE_DCHECK_NE(&from, this);
    const Lane* source = ::google::protobuf::internal::DynamicCastToGenerated< const Lane >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Lane)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Lane)
        MergeFrom(*source);
    }
}

void Lane::MergeFrom(const Lane& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Lane)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    image_points_.MergeFrom(from.image_points_);
    if (from.has_start())
    {
        mutable_start()->::calmcar::proto::Point::MergeFrom(from.start());
    }
    if (from.has_end())
    {
        mutable_end()->::calmcar::proto::Point::MergeFrom(from.end());
    }
    if (from.c0() != 0)
    {
        set_c0(from.c0());
    }
    if (from.c1() != 0)
    {
        set_c1(from.c1());
    }
    if (from.c2() != 0)
    {
        set_c2(from.c2());
    }
    if (from.coordinate_type() != 0)
    {
        set_coordinate_type(from.coordinate_type());
    }
    if (from.line_type() != 0)
    {
        set_line_type(from.line_type());
    }
    if (from.c3() != 0)
    {
        set_c3(from.c3());
    }
    if (from.index() != 0)
    {
        set_index(from.index());
    }
    if (from.quality() != 0)
    {
        set_quality(from.quality());
    }
    if (from.distance_to_host() != 0)
    {
        set_distance_to_host(from.distance_to_host());
    }
    if (from.width() != 0)
    {
        set_width(from.width());
    }
    if (from.line_color() != 0)
    {
        set_line_color(from.line_color());
    }
}

void Lane::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Lane)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Lane)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Lane::IsInitialized() const
{
    return true;
}

void Lane::Swap(Lane* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Lane::InternalSwap(Lane* other)
{
    using std::swap;
    CastToBase(&image_points_)->InternalSwap(CastToBase(&other->image_points_));
    swap(start_, other->start_);
    swap(end_, other->end_);
    swap(c0_, other->c0_);
    swap(c1_, other->c1_);
    swap(c2_, other->c2_);
    swap(coordinate_type_, other->coordinate_type_);
    swap(line_type_, other->line_type_);
    swap(c3_, other->c3_);
    swap(index_, other->index_);
    swap(quality_, other->quality_);
    swap(distance_to_host_, other->distance_to_host_);
    swap(width_, other->width_);
    swap(line_color_, other->line_color_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Lane::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Header::InitAsDefaultInstance()
{
    ::calmcar::proto::_Header_default_instance_._instance.get_mutable()->image_info_ =
        const_cast<::calmcar::proto::ImageInfo* >(::calmcar::proto::ImageInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kPdaqSerialNumberFieldNumber;
const int Header::kProtocolVersionFieldNumber;
const int Header::kCalmcarVersionFieldNumber;
const int Header::kPdaqVersionFieldNumber;
const int Header::kImageInfoFieldNumber;
const int Header::kCarTypeFieldNumber;
const int Header::kCalmcarConfigFieldNumber;
const int Header::kRunModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Header.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Header)
}
Header::Header(const Header& from) : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    pdaq_serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.pdaq_serial_number().size() > 0)
    {
        pdaq_serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                              from.pdaq_serial_number_);
    }
    protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.protocol_version().size() > 0)
    {
        protocol_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                            from.protocol_version_);
    }
    calmcar_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.calmcar_version().size() > 0)
    {
        calmcar_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                           from.calmcar_version_);
    }
    pdaq_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.pdaq_version().size() > 0)
    {
        pdaq_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                        from.pdaq_version_);
    }
    car_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.car_type().size() > 0)
    {
        car_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_type_);
    }
    calmcar_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.calmcar_config().size() > 0)
    {
        calmcar_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                          from.calmcar_config_);
    }
    run_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (from.run_mode().size() > 0)
    {
        run_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.run_mode_);
    }
    if (from.has_image_info())
    {
        image_info_ = new ::calmcar::proto::ImageInfo(*from.image_info_);
    }
    else
    {
        image_info_ = NULL;
    }
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Header)
}

void Header::SharedCtor()
{
    pdaq_serial_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    protocol_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    calmcar_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    pdaq_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    car_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    calmcar_config_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    run_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    image_info_ = NULL;
}

Header::~Header()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Header)
    SharedDtor();
}

void Header::SharedDtor()
{
    pdaq_serial_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    protocol_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    calmcar_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    pdaq_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    car_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    calmcar_config_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    run_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (this != internal_default_instance())
        delete image_info_;
}

void Header::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Header::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Header.base);
    return *internal_default_instance();
}

void Header::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Header)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    pdaq_serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    protocol_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    calmcar_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    pdaq_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    car_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    calmcar_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    run_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    if (GetArenaNoVirtual() == NULL && image_info_ != NULL)
    {
        delete image_info_;
    }
    image_info_ = NULL;
    _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Header)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // string pdaq_serial_number = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(10u /* 10 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                                 this->mutable_pdaq_serial_number()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->pdaq_serial_number().data(),
                        static_cast< int >(this->pdaq_serial_number().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "calmcar.proto.Header.pdaq_serial_number"));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // string protocol_version = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(18u /* 18 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                                 this->mutable_protocol_version()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->protocol_version().data(),
                        static_cast< int >(this->protocol_version().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "calmcar.proto.Header.protocol_version"));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // string calmcar_version = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(26u /* 26 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input,
                                                                                 this->mutable_calmcar_version()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->calmcar_version().data(),
                        static_cast< int >(this->calmcar_version().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "calmcar.proto.Header.calmcar_version"));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // string pdaq_version = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(34u /* 34 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, this->mutable_pdaq_version()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->pdaq_version().data(),
                        static_cast< int >(this->pdaq_version().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "calmcar.proto.Header.pdaq_version"));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.ImageInfo image_info = 5;
            case 5:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(42u /* 42 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_image_info()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // string car_type = 6;
            case 6:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(50u /* 50 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, this->mutable_car_type()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->car_type().data(),
                        static_cast< int >(this->car_type().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "calmcar.proto.Header.car_type"));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // bytes calmcar_config = 7;
            case 7:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(58u /* 58 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(input, this->mutable_calmcar_config()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // string run_mode = 8;
            case 8:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(66u /* 66 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadString(input, this->mutable_run_mode()));
                    DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                        this->run_mode().data(),
                        static_cast< int >(this->run_mode().length()),
                        ::google::protobuf::internal::WireFormatLite::PARSE,
                        "calmcar.proto.Header.run_mode"));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Header)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Header)
    return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Header)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string pdaq_serial_number = 1;
    if (this->pdaq_serial_number().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pdaq_serial_number().data(),
            static_cast< int >(this->pdaq_serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.pdaq_serial_number");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(1, this->pdaq_serial_number(), output);
    }

    // string protocol_version = 2;
    if (this->protocol_version().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol_version().data(),
            static_cast< int >(this->protocol_version().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.protocol_version");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(2, this->protocol_version(), output);
    }

    // string calmcar_version = 3;
    if (this->calmcar_version().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->calmcar_version().data(),
            static_cast< int >(this->calmcar_version().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.calmcar_version");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(3, this->calmcar_version(), output);
    }

    // string pdaq_version = 4;
    if (this->pdaq_version().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pdaq_version().data(),
            static_cast< int >(this->pdaq_version().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.pdaq_version");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(4, this->pdaq_version(), output);
    }

    // .calmcar.proto.ImageInfo image_info = 5;
    if (this->has_image_info())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, this->_internal_image_info(), output);
    }

    // string car_type = 6;
    if (this->car_type().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car_type().data(),
            static_cast< int >(this->car_type().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.car_type");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(6, this->car_type(), output);
    }

    // bytes calmcar_config = 7;
    if (this->calmcar_config().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(7, this->calmcar_config(), output);
    }

    // string run_mode = 8;
    if (this->run_mode().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->run_mode().data(),
            static_cast< int >(this->run_mode().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.run_mode");
        ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(8, this->run_mode(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                           ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Header)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // string pdaq_serial_number = 1;
    if (this->pdaq_serial_number().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pdaq_serial_number().data(),
            static_cast< int >(this->pdaq_serial_number().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.pdaq_serial_number");
        target =
            ::google::protobuf::internal::WireFormatLite::WriteStringToArray(1, this->pdaq_serial_number(), target);
    }

    // string protocol_version = 2;
    if (this->protocol_version().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol_version().data(),
            static_cast< int >(this->protocol_version().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.protocol_version");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(2, this->protocol_version(), target);
    }

    // string calmcar_version = 3;
    if (this->calmcar_version().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->calmcar_version().data(),
            static_cast< int >(this->calmcar_version().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.calmcar_version");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(3, this->calmcar_version(), target);
    }

    // string pdaq_version = 4;
    if (this->pdaq_version().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pdaq_version().data(),
            static_cast< int >(this->pdaq_version().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.pdaq_version");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(4, this->pdaq_version(), target);
    }

    // .calmcar.proto.ImageInfo image_info = 5;
    if (this->has_image_info())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            5, this->_internal_image_info(), deterministic, target);
    }

    // string car_type = 6;
    if (this->car_type().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->car_type().data(),
            static_cast< int >(this->car_type().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.car_type");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(6, this->car_type(), target);
    }

    // bytes calmcar_config = 7;
    if (this->calmcar_config().size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(7, this->calmcar_config(), target);
    }

    // string run_mode = 8;
    if (this->run_mode().size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->run_mode().data(),
            static_cast< int >(this->run_mode().length()),
            ::google::protobuf::internal::WireFormatLite::SERIALIZE,
            "calmcar.proto.Header.run_mode");
        target = ::google::protobuf::internal::WireFormatLite::WriteStringToArray(8, this->run_mode(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Header)
    return target;
}

size_t Header::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Header)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // string pdaq_serial_number = 1;
    if (this->pdaq_serial_number().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->pdaq_serial_number());
    }

    // string protocol_version = 2;
    if (this->protocol_version().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->protocol_version());
    }

    // string calmcar_version = 3;
    if (this->calmcar_version().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->calmcar_version());
    }

    // string pdaq_version = 4;
    if (this->pdaq_version().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->pdaq_version());
    }

    // string car_type = 6;
    if (this->car_type().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->car_type());
    }

    // bytes calmcar_config = 7;
    if (this->calmcar_config().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(this->calmcar_config());
    }

    // string run_mode = 8;
    if (this->run_mode().size() > 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(this->run_mode());
    }

    // .calmcar.proto.ImageInfo image_info = 5;
    if (this->has_image_info())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*image_info_);
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Header)
    GOOGLE_DCHECK_NE(&from, this);
    const Header* source = ::google::protobuf::internal::DynamicCastToGenerated< const Header >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Header)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Header)
        MergeFrom(*source);
    }
}

void Header::MergeFrom(const Header& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Header)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    if (from.pdaq_serial_number().size() > 0)
    {

        pdaq_serial_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                              from.pdaq_serial_number_);
    }
    if (from.protocol_version().size() > 0)
    {

        protocol_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                            from.protocol_version_);
    }
    if (from.calmcar_version().size() > 0)
    {

        calmcar_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                           from.calmcar_version_);
    }
    if (from.pdaq_version().size() > 0)
    {

        pdaq_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                        from.pdaq_version_);
    }
    if (from.car_type().size() > 0)
    {

        car_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.car_type_);
    }
    if (from.calmcar_config().size() > 0)
    {

        calmcar_config_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                          from.calmcar_config_);
    }
    if (from.run_mode().size() > 0)
    {

        run_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.run_mode_);
    }
    if (from.has_image_info())
    {
        mutable_image_info()->::calmcar::proto::ImageInfo::MergeFrom(from.image_info());
    }
}

void Header::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Header)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Header::CopyFrom(const Header& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Header)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Header::IsInitialized() const
{
    return true;
}

void Header::Swap(Header* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Header::InternalSwap(Header* other)
{
    using std::swap;
    pdaq_serial_number_.Swap(
        &other->pdaq_serial_number_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    protocol_version_.Swap(
        &other->protocol_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    calmcar_version_.Swap(
        &other->calmcar_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    pdaq_version_.Swap(
        &other->pdaq_version_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    car_type_.Swap(
        &other->car_type_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    calmcar_config_.Swap(
        &other->calmcar_config_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    run_mode_.Swap(
        &other->run_mode_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
    swap(image_info_, other->image_info_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Header::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Contour::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Contour::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Contour::Contour() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Contour.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Contour)
}
Contour::Contour(const Contour& from) : ::google::protobuf::Message(), _internal_metadata_(NULL), point_(from.point_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Contour)
}

void Contour::SharedCtor()
{
}

Contour::~Contour()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Contour)
    SharedDtor();
}

void Contour::SharedDtor()
{
}

void Contour::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Contour::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Contour& Contour::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Contour.base);
    return *internal_default_instance();
}

void Contour::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Contour)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    point_.Clear();
    _internal_metadata_.Clear();
}

bool Contour::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Contour)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // repeated .calmcar.proto.Point2i point = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(10u /* 10 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_point()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Contour)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Contour)
    return false;
#undef DO_
}

void Contour::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Contour)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated .calmcar.proto.Point2i point = 1;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->point_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, this->point(static_cast< int >(i)), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Contour)
}

::google::protobuf::uint8* Contour::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                            ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Contour)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // repeated .calmcar.proto.Point2i point = 1;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->point_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            1, this->point(static_cast< int >(i)), deterministic, target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Contour)
    return target;
}

size_t Contour::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Contour)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // repeated .calmcar.proto.Point2i point = 1;
    {
        unsigned int count = static_cast< unsigned int >(this->point_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(this->point(static_cast< int >(i)));
        }
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Contour::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Contour)
    GOOGLE_DCHECK_NE(&from, this);
    const Contour* source = ::google::protobuf::internal::DynamicCastToGenerated< const Contour >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Contour)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Contour)
        MergeFrom(*source);
    }
}

void Contour::MergeFrom(const Contour& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Contour)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    point_.MergeFrom(from.point_);
}

void Contour::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Contour)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Contour::CopyFrom(const Contour& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Contour)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Contour::IsInitialized() const
{
    return true;
}

void Contour::Swap(Contour* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Contour::InternalSwap(Contour* other)
{
    using std::swap;
    CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Contour::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Segmentation::InitAsDefaultInstance()
{
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Segmentation::kHeightFieldNumber;
const int Segmentation::kWidthFieldNumber;
const int Segmentation::kMaskFieldNumber;
const int Segmentation::kContourFieldNumber;
const int Segmentation::kFreespaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Segmentation::Segmentation() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Segmentation.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Segmentation)
}
Segmentation::Segmentation(const Segmentation& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mask_(from.mask_),
      contour_(from.contour_),
      freespace_(from.freespace_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::memcpy(&height_,
             &from.height_,
             static_cast< size_t >(reinterpret_cast< char* >(&width_) - reinterpret_cast< char* >(&height_)) +
                 sizeof(width_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Segmentation)
}

void Segmentation::SharedCtor()
{
    ::memset(&height_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&width_) - reinterpret_cast< char* >(&height_)) +
                 sizeof(width_));
}

Segmentation::~Segmentation()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Segmentation)
    SharedDtor();
}

void Segmentation::SharedDtor()
{
}

void Segmentation::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Segmentation::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Segmentation& Segmentation::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Segmentation.base);
    return *internal_default_instance();
}

void Segmentation::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Segmentation)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    mask_.Clear();
    contour_.Clear();
    freespace_.Clear();
    ::memset(&height_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&width_) - reinterpret_cast< char* >(&height_)) +
                 sizeof(width_));
    _internal_metadata_.Clear();
}

bool Segmentation::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Segmentation)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(127u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // int64 height = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(8u /* 8 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &height_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 width = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(16u /* 16 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &width_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated int64 mask = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(26u /* 26 & 0xFF */))
                {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, this->mutable_mask())));
                }
                else if (static_cast<::google::protobuf::uint8 >(tag) ==
                         static_cast<::google::protobuf::uint8 >(24u /* 24 & 0xFF */))
                {
                    DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(
                        1, 26u, input, this->mutable_mask())));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .calmcar.proto.Contour contour = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(34u /* 34 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_contour()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .calmcar.proto.Point freespace = 5;
            case 5:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(42u /* 42 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_freespace()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Segmentation)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Segmentation)
    return false;
#undef DO_
}

void Segmentation::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Segmentation)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 height = 1;
    if (this->height() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->height(), output);
    }

    // int64 width = 2;
    if (this->width() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->width(), output);
    }

    // repeated int64 mask = 3;
    if (this->mask_size() > 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteTag(
            3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
        output->WriteVarint32(static_cast<::google::protobuf::uint32 >(_mask_cached_byte_size_));
    }
    for (int i = 0, n = this->mask_size(); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(this->mask(i), output);
    }

    // repeated .calmcar.proto.Contour contour = 4;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->contour_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, this->contour(static_cast< int >(i)), output);
    }

    // repeated .calmcar.proto.Point freespace = 5;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->freespace_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, this->freespace(static_cast< int >(i)), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Segmentation)
}

::google::protobuf::uint8* Segmentation::InternalSerializeWithCachedSizesToArray(
    bool deterministic,
    ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Segmentation)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // int64 height = 1;
    if (this->height() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->height(), target);
    }

    // int64 width = 2;
    if (this->width() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->width(), target);
    }

    // repeated int64 mask = 3;
    if (this->mask_size() > 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
            3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, target);
        target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
            static_cast<::google::protobuf::int32 >(_mask_cached_byte_size_), target);
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64NoTagToArray(this->mask_, target);
    }

    // repeated .calmcar.proto.Contour contour = 4;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->contour_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            4, this->contour(static_cast< int >(i)), deterministic, target);
    }

    // repeated .calmcar.proto.Point freespace = 5;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->freespace_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            5, this->freespace(static_cast< int >(i)), deterministic, target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Segmentation)
    return target;
}

size_t Segmentation::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Segmentation)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // repeated int64 mask = 3;
    {
        size_t data_size = ::google::protobuf::internal::WireFormatLite::Int64Size(this->mask_);
        if (data_size > 0)
        {
            total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int32Size(
                                  static_cast<::google::protobuf::int32 >(data_size));
        }
        int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
        GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
        _mask_cached_byte_size_ = cached_size;
        GOOGLE_SAFE_CONCURRENT_WRITES_END();
        total_size += data_size;
    }

    // repeated .calmcar.proto.Contour contour = 4;
    {
        unsigned int count = static_cast< unsigned int >(this->contour_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(this->contour(static_cast< int >(i)));
        }
    }

    // repeated .calmcar.proto.Point freespace = 5;
    {
        unsigned int count = static_cast< unsigned int >(this->freespace_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(this->freespace(static_cast< int >(i)));
        }
    }

    // int64 height = 1;
    if (this->height() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->height());
    }

    // int64 width = 2;
    if (this->width() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->width());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Segmentation::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Segmentation)
    GOOGLE_DCHECK_NE(&from, this);
    const Segmentation* source = ::google::protobuf::internal::DynamicCastToGenerated< const Segmentation >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Segmentation)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Segmentation)
        MergeFrom(*source);
    }
}

void Segmentation::MergeFrom(const Segmentation& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Segmentation)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    mask_.MergeFrom(from.mask_);
    contour_.MergeFrom(from.contour_);
    freespace_.MergeFrom(from.freespace_);
    if (from.height() != 0)
    {
        set_height(from.height());
    }
    if (from.width() != 0)
    {
        set_width(from.width());
    }
}

void Segmentation::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Segmentation)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Segmentation::CopyFrom(const Segmentation& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Segmentation)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Segmentation::IsInitialized() const
{
    return true;
}

void Segmentation::Swap(Segmentation* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Segmentation::InternalSwap(Segmentation* other)
{
    using std::swap;
    mask_.InternalSwap(&other->mask_);
    CastToBase(&contour_)->InternalSwap(CastToBase(&other->contour_));
    CastToBase(&freespace_)->InternalSwap(CastToBase(&other->freespace_));
    swap(height_, other->height_);
    swap(width_, other->width_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Segmentation::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// ===================================================================

void Frame::InitAsDefaultInstance()
{
    ::calmcar::proto::_Frame_default_instance_._instance.get_mutable()->header_ =
        const_cast<::calmcar::proto::Header* >(::calmcar::proto::Header::internal_default_instance());
    ::calmcar::proto::_Frame_default_instance_._instance.get_mutable()->raw_image_ =
        const_cast<::calmcar::proto::Image* >(::calmcar::proto::Image::internal_default_instance());
    ::calmcar::proto::_Frame_default_instance_._instance.get_mutable()->gps_ =
        const_cast<::calmcar::proto::Gps* >(::calmcar::proto::Gps::internal_default_instance());
    ::calmcar::proto::_Frame_default_instance_._instance.get_mutable()->segmentation_ =
        const_cast<::calmcar::proto::Segmentation* >(::calmcar::proto::Segmentation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kHeaderFieldNumber;
const int Frame::kIdFieldNumber;
const int Frame::kRawImageFieldNumber;
const int Frame::kRawCanFieldNumber;
const int Frame::kGpsFieldNumber;
const int Frame::kObjectFieldNumber;
const int Frame::kLaneFieldNumber;
const int Frame::kCipvIdFieldNumber;
const int Frame::kLdwStatusFieldNumber;
const int Frame::kFcwStatusFieldNumber;
const int Frame::kPcwStatusFieldNumber;
const int Frame::kAswStatusFieldNumber;
const int Frame::kBsdStatusFieldNumber;
const int Frame::kSegmentationFieldNumber;
const int Frame::kLaneNumberFieldNumber;
const int Frame::kRoadTypeFieldNumber;
const int Frame::kTtlcFieldNumber;
const int Frame::kLeftRightIndicationFieldNumber;
const int Frame::kCameraPositionFieldNumber;
const int Frame::kLaneBoundaryFieldNumber;
const int Frame::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame() : ::google::protobuf::Message(), _internal_metadata_(NULL)
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Frame.base);
    SharedCtor();
    // @@protoc_insertion_point(constructor:calmcar.proto.Frame)
}
Frame::Frame(const Frame& from)
    : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      raw_can_(from.raw_can_),
      object_(from.object_),
      lane_(from.lane_),
      camera_position_(from.camera_position_),
      lane_boundary_(from.lane_boundary_)
{
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    if (from.has_header())
    {
        header_ = new ::calmcar::proto::Header(*from.header_);
    }
    else
    {
        header_ = NULL;
    }
    if (from.has_raw_image())
    {
        raw_image_ = new ::calmcar::proto::Image(*from.raw_image_);
    }
    else
    {
        raw_image_ = NULL;
    }
    if (from.has_gps())
    {
        gps_ = new ::calmcar::proto::Gps(*from.gps_);
    }
    else
    {
        gps_ = NULL;
    }
    if (from.has_segmentation())
    {
        segmentation_ = new ::calmcar::proto::Segmentation(*from.segmentation_);
    }
    else
    {
        segmentation_ = NULL;
    }
    ::memcpy(&id_,
             &from.id_,
             static_cast< size_t >(reinterpret_cast< char* >(&timestamp_) - reinterpret_cast< char* >(&id_)) +
                 sizeof(timestamp_));
    // @@protoc_insertion_point(copy_constructor:calmcar.proto.Frame)
}

void Frame::SharedCtor()
{
    ::memset(&header_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&timestamp_) - reinterpret_cast< char* >(&header_)) +
                 sizeof(timestamp_));
}

Frame::~Frame()
{
    // @@protoc_insertion_point(destructor:calmcar.proto.Frame)
    SharedDtor();
}

void Frame::SharedDtor()
{
    if (this != internal_default_instance())
        delete header_;
    if (this != internal_default_instance())
        delete raw_image_;
    if (this != internal_default_instance())
        delete gps_;
    if (this != internal_default_instance())
        delete segmentation_;
}

void Frame::SetCachedSize(int size) const
{
    _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Frame::descriptor()
{
    ::protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Frame& Frame::default_instance()
{
    ::google::protobuf::internal::InitSCC(&protobuf_calmcar_2eproto::scc_info_Frame.base);
    return *internal_default_instance();
}

void Frame::Clear()
{
    // @@protoc_insertion_point(message_clear_start:calmcar.proto.Frame)
    ::google::protobuf::uint32 cached_has_bits = 0;
    // Prevent compiler warnings about cached_has_bits being unused
    (void)cached_has_bits;

    raw_can_.Clear();
    object_.Clear();
    lane_.Clear();
    camera_position_.Clear();
    lane_boundary_.Clear();
    if (GetArenaNoVirtual() == NULL && header_ != NULL)
    {
        delete header_;
    }
    header_ = NULL;
    if (GetArenaNoVirtual() == NULL && raw_image_ != NULL)
    {
        delete raw_image_;
    }
    raw_image_ = NULL;
    if (GetArenaNoVirtual() == NULL && gps_ != NULL)
    {
        delete gps_;
    }
    gps_ = NULL;
    if (GetArenaNoVirtual() == NULL && segmentation_ != NULL)
    {
        delete segmentation_;
    }
    segmentation_ = NULL;
    ::memset(&id_,
             0,
             static_cast< size_t >(reinterpret_cast< char* >(&timestamp_) - reinterpret_cast< char* >(&id_)) +
                 sizeof(timestamp_));
    _internal_metadata_.Clear();
}

bool Frame::MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input)
{
#define DO_(EXPRESSION)                   \
    if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
    goto failure
    ::google::protobuf::uint32 tag;
    // @@protoc_insertion_point(parse_start:calmcar.proto.Frame)
    for (;;)
    {
        ::std::pair<::google::protobuf::uint32, bool > p = input->ReadTagWithCutoffNoLastTag(16383u);
        tag = p.first;
        if (!p.second)
            goto handle_unusual;
        switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
            // .calmcar.proto.Header header = 1;
            case 1:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(10u /* 10 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_header()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 id = 2;
            case 2:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(16u /* 16 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &id_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Image raw_image = 3;
            case 3:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(26u /* 26 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_raw_image()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .calmcar.proto.Can raw_can = 4;
            case 4:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(34u /* 34 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_raw_can()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Gps gps = 5;
            case 5:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(42u /* 42 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_gps()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .calmcar.proto.Object object = 6;
            case 6:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(50u /* 50 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_object()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .calmcar.proto.Lane lane = 7;
            case 7:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(58u /* 58 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 cipv_id = 8;
            case 8:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(64u /* 64 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &cipv_id_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 ldw_status = 9;
            case 9:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(72u /* 72 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &ldw_status_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 fcw_status = 10;
            case 10:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(80u /* 80 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &fcw_status_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 pcw_status = 11;
            case 11:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(88u /* 88 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &pcw_status_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 asw_status = 12;
            case 12:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(96u /* 96 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &asw_status_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 bsd_status = 13;
            case 13:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(104u /* 104 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &bsd_status_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.Segmentation segmentation = 14;
            case 14:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(114u /* 114 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, mutable_segmentation()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 lane_number = 15;
            case 15:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(120u /* 120 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &lane_number_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.RoadType road_type = 16;
            case 16:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(128u /* 128 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_road_type(static_cast<::calmcar::proto::RoadType >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // double ttlc = 17;
            case 17:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(137u /* 137 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         double,
                         ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE >(input, &ttlc_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // .calmcar.proto.LeftRightIndication left_right_indication = 18;
            case 18:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(144u /* 144 & 0xFF */))
                {
                    int value;
                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         int,
                         ::google::protobuf::internal::WireFormatLite::TYPE_ENUM >(input, &value)));
                    set_left_right_indication(static_cast<::calmcar::proto::LeftRightIndication >(value));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .calmcar.proto.Point camera_position = 19;
            case 19:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(154u /* 154 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_camera_position()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // repeated .calmcar.proto.Point lane_boundary = 20;
            case 20:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(162u /* 162 & 0xFF */))
                {
                    DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_lane_boundary()));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            // int64 timestamp = 21;
            case 21:
            {
                if (static_cast<::google::protobuf::uint8 >(tag) ==
                    static_cast<::google::protobuf::uint8 >(168u /* 168 & 0xFF */))
                {

                    DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                         ::google::protobuf::int64,
                         ::google::protobuf::internal::WireFormatLite::TYPE_INT64 >(input, &timestamp_)));
                }
                else
                {
                    goto handle_unusual;
                }
                break;
            }

            default:
            {
            handle_unusual:
                if (tag == 0)
                {
                    goto success;
                }
                DO_(::google::protobuf::internal::WireFormat::SkipField(
                    input, tag, _internal_metadata_.mutable_unknown_fields()));
                break;
            }
        }
    }
success:
    // @@protoc_insertion_point(parse_success:calmcar.proto.Frame)
    return true;
failure:
    // @@protoc_insertion_point(parse_failure:calmcar.proto.Frame)
    return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const
{
    // @@protoc_insertion_point(serialize_start:calmcar.proto.Frame)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .calmcar.proto.Header header = 1;
    if (this->has_header())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(1, this->_internal_header(), output);
    }

    // int64 id = 2;
    if (this->id() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
    }

    // .calmcar.proto.Image raw_image = 3;
    if (this->has_raw_image())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(3, this->_internal_raw_image(), output);
    }

    // repeated .calmcar.proto.Can raw_can = 4;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->raw_can_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, this->raw_can(static_cast< int >(i)), output);
    }

    // .calmcar.proto.Gps gps = 5;
    if (this->has_gps())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(5, this->_internal_gps(), output);
    }

    // repeated .calmcar.proto.Object object = 6;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->object_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, this->object(static_cast< int >(i)), output);
    }

    // repeated .calmcar.proto.Lane lane = 7;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->lane_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, this->lane(static_cast< int >(i)), output);
    }

    // int64 cipv_id = 8;
    if (this->cipv_id() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->cipv_id(), output);
    }

    // int64 ldw_status = 9;
    if (this->ldw_status() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->ldw_status(), output);
    }

    // int64 fcw_status = 10;
    if (this->fcw_status() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->fcw_status(), output);
    }

    // int64 pcw_status = 11;
    if (this->pcw_status() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->pcw_status(), output);
    }

    // int64 asw_status = 12;
    if (this->asw_status() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->asw_status(), output);
    }

    // int64 bsd_status = 13;
    if (this->bsd_status() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->bsd_status(), output);
    }

    // .calmcar.proto.Segmentation segmentation = 14;
    if (this->has_segmentation())
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            14, this->_internal_segmentation(), output);
    }

    // int64 lane_number = 15;
    if (this->lane_number() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->lane_number(), output);
    }

    // .calmcar.proto.RoadType road_type = 16;
    if (this->road_type() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(16, this->road_type(), output);
    }

    // double ttlc = 17;
    if (this->ttlc() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->ttlc(), output);
    }

    // .calmcar.proto.LeftRightIndication left_right_indication = 18;
    if (this->left_right_indication() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteEnum(18, this->left_right_indication(), output);
    }

    // repeated .calmcar.proto.Point camera_position = 19;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->camera_position_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            19, this->camera_position(static_cast< int >(i)), output);
    }

    // repeated .calmcar.proto.Point lane_boundary = 20;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->lane_boundary_size()); i < n; i++)
    {
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            20, this->lane_boundary(static_cast< int >(i)), output);
    }

    // int64 timestamp = 21;
    if (this->timestamp() != 0)
    {
        ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->timestamp(), output);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            output);
    }
    // @@protoc_insertion_point(serialize_end:calmcar.proto.Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                          ::google::protobuf::uint8* target) const
{
    (void)deterministic;  // Unused
    // @@protoc_insertion_point(serialize_to_array_start:calmcar.proto.Frame)
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    // .calmcar.proto.Header header = 1;
    if (this->has_header())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            1, this->_internal_header(), deterministic, target);
    }

    // int64 id = 2;
    if (this->id() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
    }

    // .calmcar.proto.Image raw_image = 3;
    if (this->has_raw_image())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            3, this->_internal_raw_image(), deterministic, target);
    }

    // repeated .calmcar.proto.Can raw_can = 4;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->raw_can_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            4, this->raw_can(static_cast< int >(i)), deterministic, target);
    }

    // .calmcar.proto.Gps gps = 5;
    if (this->has_gps())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            5, this->_internal_gps(), deterministic, target);
    }

    // repeated .calmcar.proto.Object object = 6;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->object_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            6, this->object(static_cast< int >(i)), deterministic, target);
    }

    // repeated .calmcar.proto.Lane lane = 7;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->lane_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            7, this->lane(static_cast< int >(i)), deterministic, target);
    }

    // int64 cipv_id = 8;
    if (this->cipv_id() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->cipv_id(), target);
    }

    // int64 ldw_status = 9;
    if (this->ldw_status() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->ldw_status(), target);
    }

    // int64 fcw_status = 10;
    if (this->fcw_status() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->fcw_status(), target);
    }

    // int64 pcw_status = 11;
    if (this->pcw_status() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->pcw_status(), target);
    }

    // int64 asw_status = 12;
    if (this->asw_status() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->asw_status(), target);
    }

    // int64 bsd_status = 13;
    if (this->bsd_status() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->bsd_status(), target);
    }

    // .calmcar.proto.Segmentation segmentation = 14;
    if (this->has_segmentation())
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            14, this->_internal_segmentation(), deterministic, target);
    }

    // int64 lane_number = 15;
    if (this->lane_number() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->lane_number(), target);
    }

    // .calmcar.proto.RoadType road_type = 16;
    if (this->road_type() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(16, this->road_type(), target);
    }

    // double ttlc = 17;
    if (this->ttlc() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->ttlc(), target);
    }

    // .calmcar.proto.LeftRightIndication left_right_indication = 18;
    if (this->left_right_indication() != 0)
    {
        target =
            ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(18, this->left_right_indication(), target);
    }

    // repeated .calmcar.proto.Point camera_position = 19;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->camera_position_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            19, this->camera_position(static_cast< int >(i)), deterministic, target);
    }

    // repeated .calmcar.proto.Point lane_boundary = 20;
    for (unsigned int i = 0, n = static_cast< unsigned int >(this->lane_boundary_size()); i < n; i++)
    {
        target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessageToArray(
            20, this->lane_boundary(static_cast< int >(i)), deterministic, target);
    }

    // int64 timestamp = 21;
    if (this->timestamp() != 0)
    {
        target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->timestamp(), target);
    }

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
            (::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                              : _internal_metadata_.default_instance()),
            target);
    }
    // @@protoc_insertion_point(serialize_to_array_end:calmcar.proto.Frame)
    return target;
}

size_t Frame::ByteSizeLong() const
{
    // @@protoc_insertion_point(message_byte_size_start:calmcar.proto.Frame)
    size_t total_size = 0;

    if ((_internal_metadata_.have_unknown_fields() && ::google::protobuf::internal::GetProto3PreserveUnknownsDefault()))
    {
        total_size += ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize((
            ::google::protobuf::internal::GetProto3PreserveUnknownsDefault() ? _internal_metadata_.unknown_fields()
                                                                             : _internal_metadata_.default_instance()));
    }
    // repeated .calmcar.proto.Can raw_can = 4;
    {
        unsigned int count = static_cast< unsigned int >(this->raw_can_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(this->raw_can(static_cast< int >(i)));
        }
    }

    // repeated .calmcar.proto.Object object = 6;
    {
        unsigned int count = static_cast< unsigned int >(this->object_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(this->object(static_cast< int >(i)));
        }
    }

    // repeated .calmcar.proto.Lane lane = 7;
    {
        unsigned int count = static_cast< unsigned int >(this->lane_size());
        total_size += 1UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(this->lane(static_cast< int >(i)));
        }
    }

    // repeated .calmcar.proto.Point camera_position = 19;
    {
        unsigned int count = static_cast< unsigned int >(this->camera_position_size());
        total_size += 2UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(this->camera_position(static_cast< int >(i)));
        }
    }

    // repeated .calmcar.proto.Point lane_boundary = 20;
    {
        unsigned int count = static_cast< unsigned int >(this->lane_boundary_size());
        total_size += 2UL * count;
        for (unsigned int i = 0; i < count; i++)
        {
            total_size +=
                ::google::protobuf::internal::WireFormatLite::MessageSize(this->lane_boundary(static_cast< int >(i)));
        }
    }

    // .calmcar.proto.Header header = 1;
    if (this->has_header())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*header_);
    }

    // .calmcar.proto.Image raw_image = 3;
    if (this->has_raw_image())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*raw_image_);
    }

    // .calmcar.proto.Gps gps = 5;
    if (this->has_gps())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*gps_);
    }

    // .calmcar.proto.Segmentation segmentation = 14;
    if (this->has_segmentation())
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*segmentation_);
    }

    // int64 id = 2;
    if (this->id() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->id());
    }

    // int64 cipv_id = 8;
    if (this->cipv_id() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->cipv_id());
    }

    // int64 ldw_status = 9;
    if (this->ldw_status() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->ldw_status());
    }

    // int64 fcw_status = 10;
    if (this->fcw_status() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->fcw_status());
    }

    // int64 pcw_status = 11;
    if (this->pcw_status() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->pcw_status());
    }

    // int64 asw_status = 12;
    if (this->asw_status() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->asw_status());
    }

    // int64 bsd_status = 13;
    if (this->bsd_status() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->bsd_status());
    }

    // int64 lane_number = 15;
    if (this->lane_number() != 0)
    {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->lane_number());
    }

    // double ttlc = 17;
    if (this->ttlc() != 0)
    {
        total_size += 2 + 8;
    }

    // .calmcar.proto.RoadType road_type = 16;
    if (this->road_type() != 0)
    {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->road_type());
    }

    // .calmcar.proto.LeftRightIndication left_right_indication = 18;
    if (this->left_right_indication() != 0)
    {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::EnumSize(this->left_right_indication());
    }

    // int64 timestamp = 21;
    if (this->timestamp() != 0)
    {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::Int64Size(this->timestamp());
    }

    int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
    SetCachedSize(cached_size);
    return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_merge_from_start:calmcar.proto.Frame)
    GOOGLE_DCHECK_NE(&from, this);
    const Frame* source = ::google::protobuf::internal::DynamicCastToGenerated< const Frame >(&from);
    if (source == NULL)
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_fail:calmcar.proto.Frame)
        ::google::protobuf::internal::ReflectionOps::Merge(from, this);
    }
    else
    {
        // @@protoc_insertion_point(generalized_merge_from_cast_success:calmcar.proto.Frame)
        MergeFrom(*source);
    }
}

void Frame::MergeFrom(const Frame& from)
{
    // @@protoc_insertion_point(class_specific_merge_from_start:calmcar.proto.Frame)
    GOOGLE_DCHECK_NE(&from, this);
    _internal_metadata_.MergeFrom(from._internal_metadata_);
    ::google::protobuf::uint32 cached_has_bits = 0;
    (void)cached_has_bits;

    raw_can_.MergeFrom(from.raw_can_);
    object_.MergeFrom(from.object_);
    lane_.MergeFrom(from.lane_);
    camera_position_.MergeFrom(from.camera_position_);
    lane_boundary_.MergeFrom(from.lane_boundary_);
    if (from.has_header())
    {
        mutable_header()->::calmcar::proto::Header::MergeFrom(from.header());
    }
    if (from.has_raw_image())
    {
        mutable_raw_image()->::calmcar::proto::Image::MergeFrom(from.raw_image());
    }
    if (from.has_gps())
    {
        mutable_gps()->::calmcar::proto::Gps::MergeFrom(from.gps());
    }
    if (from.has_segmentation())
    {
        mutable_segmentation()->::calmcar::proto::Segmentation::MergeFrom(from.segmentation());
    }
    if (from.id() != 0)
    {
        set_id(from.id());
    }
    if (from.cipv_id() != 0)
    {
        set_cipv_id(from.cipv_id());
    }
    if (from.ldw_status() != 0)
    {
        set_ldw_status(from.ldw_status());
    }
    if (from.fcw_status() != 0)
    {
        set_fcw_status(from.fcw_status());
    }
    if (from.pcw_status() != 0)
    {
        set_pcw_status(from.pcw_status());
    }
    if (from.asw_status() != 0)
    {
        set_asw_status(from.asw_status());
    }
    if (from.bsd_status() != 0)
    {
        set_bsd_status(from.bsd_status());
    }
    if (from.lane_number() != 0)
    {
        set_lane_number(from.lane_number());
    }
    if (from.ttlc() != 0)
    {
        set_ttlc(from.ttlc());
    }
    if (from.road_type() != 0)
    {
        set_road_type(from.road_type());
    }
    if (from.left_right_indication() != 0)
    {
        set_left_right_indication(from.left_right_indication());
    }
    if (from.timestamp() != 0)
    {
        set_timestamp(from.timestamp());
    }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from)
{
    // @@protoc_insertion_point(generalized_copy_from_start:calmcar.proto.Frame)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from)
{
    // @@protoc_insertion_point(class_specific_copy_from_start:calmcar.proto.Frame)
    if (&from == this)
        return;
    Clear();
    MergeFrom(from);
}

bool Frame::IsInitialized() const
{
    return true;
}

void Frame::Swap(Frame* other)
{
    if (other == this)
        return;
    InternalSwap(other);
}
void Frame::InternalSwap(Frame* other)
{
    using std::swap;
    CastToBase(&raw_can_)->InternalSwap(CastToBase(&other->raw_can_));
    CastToBase(&object_)->InternalSwap(CastToBase(&other->object_));
    CastToBase(&lane_)->InternalSwap(CastToBase(&other->lane_));
    CastToBase(&camera_position_)->InternalSwap(CastToBase(&other->camera_position_));
    CastToBase(&lane_boundary_)->InternalSwap(CastToBase(&other->lane_boundary_));
    swap(header_, other->header_);
    swap(raw_image_, other->raw_image_);
    swap(gps_, other->gps_);
    swap(segmentation_, other->segmentation_);
    swap(id_, other->id_);
    swap(cipv_id_, other->cipv_id_);
    swap(ldw_status_, other->ldw_status_);
    swap(fcw_status_, other->fcw_status_);
    swap(pcw_status_, other->pcw_status_);
    swap(asw_status_, other->asw_status_);
    swap(bsd_status_, other->bsd_status_);
    swap(lane_number_, other->lane_number_);
    swap(ttlc_, other->ttlc_);
    swap(road_type_, other->road_type_);
    swap(left_right_indication_, other->left_right_indication_);
    swap(timestamp_, other->timestamp_);
    _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Frame::GetMetadata() const
{
    protobuf_calmcar_2eproto::protobuf_AssignDescriptorsOnce();
    return ::protobuf_calmcar_2eproto::file_level_metadata[kIndexInFileMessages];
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace calmcar
namespace google
{
namespace protobuf
{
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Point* Arena::CreateMaybeMessage<::calmcar::proto::Point >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Point >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Point2i* Arena::CreateMaybeMessage<::calmcar::proto::Point2i >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Point2i >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Rect* Arena::CreateMaybeMessage<::calmcar::proto::Rect >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Rect >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::ImageInfo* Arena::CreateMaybeMessage<::calmcar::proto::ImageInfo >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::ImageInfo >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Image* Arena::CreateMaybeMessage<::calmcar::proto::Image >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Image >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Can* Arena::CreateMaybeMessage<::calmcar::proto::Can >(Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Can >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Gps* Arena::CreateMaybeMessage<::calmcar::proto::Gps >(Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Gps >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Object* Arena::CreateMaybeMessage<::calmcar::proto::Object >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Object >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Lane* Arena::CreateMaybeMessage<::calmcar::proto::Lane >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Lane >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Header* Arena::CreateMaybeMessage<::calmcar::proto::Header >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Header >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Contour* Arena::CreateMaybeMessage<::calmcar::proto::Contour >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Contour >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Segmentation*
Arena::CreateMaybeMessage<::calmcar::proto::Segmentation >(Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Segmentation >(arena);
}
template <>
GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE::calmcar::proto::Frame* Arena::CreateMaybeMessage<::calmcar::proto::Frame >(
    Arena* arena)
{
    return Arena::CreateInternal<::calmcar::proto::Frame >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
