// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calmcar.proto

#ifndef PROTOBUF_INCLUDED_calmcar_2eproto
#define PROTOBUF_INCLUDED_calmcar_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_calmcar_2eproto

namespace protobuf_calmcar_2eproto
{
// Internal implementation detail -- do not use these members.
struct TableStruct
{
    static const ::google::protobuf::internal::ParseTableField entries[];
    static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    static const ::google::protobuf::internal::ParseTable schema[13];
    static const ::google::protobuf::internal::FieldMetadata field_metadata[];
    static const ::google::protobuf::internal::SerializationTable serialization_table[];
    static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_calmcar_2eproto
namespace calmcar
{
namespace proto
{
class Can;
class CanDefaultTypeInternal;
extern CanDefaultTypeInternal _Can_default_instance_;
class Contour;
class ContourDefaultTypeInternal;
extern ContourDefaultTypeInternal _Contour_default_instance_;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Gps;
class GpsDefaultTypeInternal;
extern GpsDefaultTypeInternal _Gps_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ImageInfo;
class ImageInfoDefaultTypeInternal;
extern ImageInfoDefaultTypeInternal _ImageInfo_default_instance_;
class Lane;
class LaneDefaultTypeInternal;
extern LaneDefaultTypeInternal _Lane_default_instance_;
class Object;
class ObjectDefaultTypeInternal;
extern ObjectDefaultTypeInternal _Object_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Point2i;
class Point2iDefaultTypeInternal;
extern Point2iDefaultTypeInternal _Point2i_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class Segmentation;
class SegmentationDefaultTypeInternal;
extern SegmentationDefaultTypeInternal _Segmentation_default_instance_;
}  // namespace proto
}  // namespace calmcar
namespace google
{
namespace protobuf
{
template <>
::calmcar::proto::Can* Arena::CreateMaybeMessage<::calmcar::proto::Can >(Arena*);
template <>
::calmcar::proto::Contour* Arena::CreateMaybeMessage<::calmcar::proto::Contour >(Arena*);
template <>
::calmcar::proto::Frame* Arena::CreateMaybeMessage<::calmcar::proto::Frame >(Arena*);
template <>
::calmcar::proto::Gps* Arena::CreateMaybeMessage<::calmcar::proto::Gps >(Arena*);
template <>
::calmcar::proto::Header* Arena::CreateMaybeMessage<::calmcar::proto::Header >(Arena*);
template <>
::calmcar::proto::Image* Arena::CreateMaybeMessage<::calmcar::proto::Image >(Arena*);
template <>
::calmcar::proto::ImageInfo* Arena::CreateMaybeMessage<::calmcar::proto::ImageInfo >(Arena*);
template <>
::calmcar::proto::Lane* Arena::CreateMaybeMessage<::calmcar::proto::Lane >(Arena*);
template <>
::calmcar::proto::Object* Arena::CreateMaybeMessage<::calmcar::proto::Object >(Arena*);
template <>
::calmcar::proto::Point* Arena::CreateMaybeMessage<::calmcar::proto::Point >(Arena*);
template <>
::calmcar::proto::Point2i* Arena::CreateMaybeMessage<::calmcar::proto::Point2i >(Arena*);
template <>
::calmcar::proto::Rect* Arena::CreateMaybeMessage<::calmcar::proto::Rect >(Arena*);
template <>
::calmcar::proto::Segmentation* Arena::CreateMaybeMessage<::calmcar::proto::Segmentation >(Arena*);
}  // namespace protobuf
}  // namespace google
namespace calmcar
{
namespace proto
{

enum ImageInfo_PixelFormat
{
    ImageInfo_PixelFormat_PIXEL_FORMAT_UNKNOWN = 0,
    ImageInfo_PixelFormat_PIXEL_FORMAT_YUV422 = 1,
    ImageInfo_PixelFormat_PIXEL_FORMAT_YUV420 = 2,
    ImageInfo_PixelFormat_PIXEL_FORMAT_BGR = 3,
    ImageInfo_PixelFormat_PIXEL_FORMAT_RGB = 4,
    ImageInfo_PixelFormat_PIXEL_FORMAT_JPEG = 5,
    ImageInfo_PixelFormat_ImageInfo_PixelFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    ImageInfo_PixelFormat_ImageInfo_PixelFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ImageInfo_PixelFormat_IsValid(int value);
const ImageInfo_PixelFormat ImageInfo_PixelFormat_PixelFormat_MIN = ImageInfo_PixelFormat_PIXEL_FORMAT_UNKNOWN;
const ImageInfo_PixelFormat ImageInfo_PixelFormat_PixelFormat_MAX = ImageInfo_PixelFormat_PIXEL_FORMAT_JPEG;
const int ImageInfo_PixelFormat_PixelFormat_ARRAYSIZE = ImageInfo_PixelFormat_PixelFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageInfo_PixelFormat_descriptor();
inline const ::std::string& ImageInfo_PixelFormat_Name(ImageInfo_PixelFormat value)
{
    return ::google::protobuf::internal::NameOfEnum(ImageInfo_PixelFormat_descriptor(), value);
}
inline bool ImageInfo_PixelFormat_Parse(const ::std::string& name, ImageInfo_PixelFormat* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< ImageInfo_PixelFormat >(
        ImageInfo_PixelFormat_descriptor(), name, value);
}
enum Object_SensorType
{
    Object_SensorType_SENSOR_TYPE_UNKNOWN = 0,
    Object_SensorType_SENSOR_TYPE_CAMERA = 1,
    Object_SensorType_SENSOR_TYPE_RADAR = 2,
    Object_SensorType_SENSOR_TYPE_LIDAR = 3,
    Object_SensorType_SENSOR_TYPE_FUSED = 4,
    Object_SensorType_Object_SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    Object_SensorType_Object_SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Object_SensorType_IsValid(int value);
const Object_SensorType Object_SensorType_SensorType_MIN = Object_SensorType_SENSOR_TYPE_UNKNOWN;
const Object_SensorType Object_SensorType_SensorType_MAX = Object_SensorType_SENSOR_TYPE_FUSED;
const int Object_SensorType_SensorType_ARRAYSIZE = Object_SensorType_SensorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Object_SensorType_descriptor();
inline const ::std::string& Object_SensorType_Name(Object_SensorType value)
{
    return ::google::protobuf::internal::NameOfEnum(Object_SensorType_descriptor(), value);
}
inline bool Object_SensorType_Parse(const ::std::string& name, Object_SensorType* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< Object_SensorType >(
        Object_SensorType_descriptor(), name, value);
}
enum Object_LaneAssignment
{
    Object_LaneAssignment_LANE_ASSIGNMENT_NOT_ASSIGNED = 0,
    Object_LaneAssignment_LANE_ASSIGNMENT_EGO_LANE = 1,
    Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_LANE_LEFT = 2,
    Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_LANE_RIGHT = 3,
    Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_NEXT_LANE_LEFT = 4,
    Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_NEXT_LANE_RIGHT = 5,
    Object_LaneAssignment_Object_LaneAssignment_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    Object_LaneAssignment_Object_LaneAssignment_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Object_LaneAssignment_IsValid(int value);
const Object_LaneAssignment Object_LaneAssignment_LaneAssignment_MIN =
    Object_LaneAssignment_LANE_ASSIGNMENT_NOT_ASSIGNED;
const Object_LaneAssignment Object_LaneAssignment_LaneAssignment_MAX =
    Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_NEXT_LANE_RIGHT;
const int Object_LaneAssignment_LaneAssignment_ARRAYSIZE = Object_LaneAssignment_LaneAssignment_MAX + 1;

const ::google::protobuf::EnumDescriptor* Object_LaneAssignment_descriptor();
inline const ::std::string& Object_LaneAssignment_Name(Object_LaneAssignment value)
{
    return ::google::protobuf::internal::NameOfEnum(Object_LaneAssignment_descriptor(), value);
}
inline bool Object_LaneAssignment_Parse(const ::std::string& name, Object_LaneAssignment* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< Object_LaneAssignment >(
        Object_LaneAssignment_descriptor(), name, value);
}
enum Object_MotionStatus
{
    Object_MotionStatus_MOTION_STATUS_UNKNOWN = 0,
    Object_MotionStatus_MOTION_STATUS_PARKED = 1,
    Object_MotionStatus_MOTION_STATUS_STOPPED = 2,
    Object_MotionStatus_MOTION_STATUS_MOVING = 3,
    Object_MotionStatus_MOTION_STATUS_ONCOMING = 4,
    Object_MotionStatus_MOTION_STATUS_CROSSING = 5,
    Object_MotionStatus_Object_MotionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    Object_MotionStatus_Object_MotionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Object_MotionStatus_IsValid(int value);
const Object_MotionStatus Object_MotionStatus_MotionStatus_MIN = Object_MotionStatus_MOTION_STATUS_UNKNOWN;
const Object_MotionStatus Object_MotionStatus_MotionStatus_MAX = Object_MotionStatus_MOTION_STATUS_CROSSING;
const int Object_MotionStatus_MotionStatus_ARRAYSIZE = Object_MotionStatus_MotionStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Object_MotionStatus_descriptor();
inline const ::std::string& Object_MotionStatus_Name(Object_MotionStatus value)
{
    return ::google::protobuf::internal::NameOfEnum(Object_MotionStatus_descriptor(), value);
}
inline bool Object_MotionStatus_Parse(const ::std::string& name, Object_MotionStatus* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< Object_MotionStatus >(
        Object_MotionStatus_descriptor(), name, value);
}
enum Object_CutInCutOut
{
    Object_CutInCutOut_CUT_IN_CUT_OUT_UNKNOWN = 0,
    Object_CutInCutOut_CUT_IN_CUT_OUT_HOST_CUT_IN_LEFT = 1,
    Object_CutInCutOut_CUT_IN_CUT_OUT_HOST_CUT_IN_RIGHT = 2,
    Object_CutInCutOut_CUT_IN_CUT_OUT_HOST_CUT_OUT_LEFT = 3,
    Object_CutInCutOut_CUT_IN_CUT_OUT_HOST_CUT_OUT_RIGHT = 4,
    Object_CutInCutOut_CUT_IN_CUT_OUT_NO_CUT_IN_OUT = 5,
    Object_CutInCutOut_Object_CutInCutOut_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    Object_CutInCutOut_Object_CutInCutOut_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Object_CutInCutOut_IsValid(int value);
const Object_CutInCutOut Object_CutInCutOut_CutInCutOut_MIN = Object_CutInCutOut_CUT_IN_CUT_OUT_UNKNOWN;
const Object_CutInCutOut Object_CutInCutOut_CutInCutOut_MAX = Object_CutInCutOut_CUT_IN_CUT_OUT_NO_CUT_IN_OUT;
const int Object_CutInCutOut_CutInCutOut_ARRAYSIZE = Object_CutInCutOut_CutInCutOut_MAX + 1;

const ::google::protobuf::EnumDescriptor* Object_CutInCutOut_descriptor();
inline const ::std::string& Object_CutInCutOut_Name(Object_CutInCutOut value)
{
    return ::google::protobuf::internal::NameOfEnum(Object_CutInCutOut_descriptor(), value);
}
inline bool Object_CutInCutOut_Parse(const ::std::string& name, Object_CutInCutOut* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< Object_CutInCutOut >(
        Object_CutInCutOut_descriptor(), name, value);
}
enum Lane_CoordinateType
{
    Lane_CoordinateType_COORDINATE_TYPE_IMAGE = 0,
    Lane_CoordinateType_COORDINATE_TYPE_WORLD = 1,
    Lane_CoordinateType_Lane_CoordinateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    Lane_CoordinateType_Lane_CoordinateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Lane_CoordinateType_IsValid(int value);
const Lane_CoordinateType Lane_CoordinateType_CoordinateType_MIN = Lane_CoordinateType_COORDINATE_TYPE_IMAGE;
const Lane_CoordinateType Lane_CoordinateType_CoordinateType_MAX = Lane_CoordinateType_COORDINATE_TYPE_WORLD;
const int Lane_CoordinateType_CoordinateType_ARRAYSIZE = Lane_CoordinateType_CoordinateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_CoordinateType_descriptor();
inline const ::std::string& Lane_CoordinateType_Name(Lane_CoordinateType value)
{
    return ::google::protobuf::internal::NameOfEnum(Lane_CoordinateType_descriptor(), value);
}
inline bool Lane_CoordinateType_Parse(const ::std::string& name, Lane_CoordinateType* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< Lane_CoordinateType >(
        Lane_CoordinateType_descriptor(), name, value);
}
enum Lane_LineType
{
    Lane_LineType_LINE_TYPE_UNDECIDED = 0,
    Lane_LineType_LINE_TYPE_SOLID = 1,
    Lane_LineType_LINE_TYPE_DASHED = 2,
    Lane_LineType_LINE_TYPE_VIRTUAL = 3,
    Lane_LineType_LINE_TYPE_ROAD_EDGE = 4,
    Lane_LineType_LINE_TYPE_BOTTS_DOTS = 5,
    Lane_LineType_Lane_LineType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    Lane_LineType_Lane_LineType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Lane_LineType_IsValid(int value);
const Lane_LineType Lane_LineType_LineType_MIN = Lane_LineType_LINE_TYPE_UNDECIDED;
const Lane_LineType Lane_LineType_LineType_MAX = Lane_LineType_LINE_TYPE_BOTTS_DOTS;
const int Lane_LineType_LineType_ARRAYSIZE = Lane_LineType_LineType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LineType_descriptor();
inline const ::std::string& Lane_LineType_Name(Lane_LineType value)
{
    return ::google::protobuf::internal::NameOfEnum(Lane_LineType_descriptor(), value);
}
inline bool Lane_LineType_Parse(const ::std::string& name, Lane_LineType* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< Lane_LineType >(Lane_LineType_descriptor(), name, value);
}
enum Lane_LineColor
{
    Lane_LineColor_LINE_COLOR_UNKNOWN = 0,
    Lane_LineColor_LINE_COLOR_WHITE = 1,
    Lane_LineColor_LINE_COLOR_YELLOW = 2,
    Lane_LineColor_LINE_COLOR_BLUE_GREEN = 3,
    Lane_LineColor_LINE_COLOR_ORANGE_RED = 4,
    Lane_LineColor_Lane_LineColor_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    Lane_LineColor_Lane_LineColor_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Lane_LineColor_IsValid(int value);
const Lane_LineColor Lane_LineColor_LineColor_MIN = Lane_LineColor_LINE_COLOR_UNKNOWN;
const Lane_LineColor Lane_LineColor_LineColor_MAX = Lane_LineColor_LINE_COLOR_ORANGE_RED;
const int Lane_LineColor_LineColor_ARRAYSIZE = Lane_LineColor_LineColor_MAX + 1;

const ::google::protobuf::EnumDescriptor* Lane_LineColor_descriptor();
inline const ::std::string& Lane_LineColor_Name(Lane_LineColor value)
{
    return ::google::protobuf::internal::NameOfEnum(Lane_LineColor_descriptor(), value);
}
inline bool Lane_LineColor_Parse(const ::std::string& name, Lane_LineColor* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< Lane_LineColor >(Lane_LineColor_descriptor(), name, value);
}
enum RoadType
{
    ROAD_TYPE_UNKNOWN = 0,
    ROAD_TYPE_HIGHWAY = 1,
    RoadType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    RoadType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RoadType_IsValid(int value);
const RoadType RoadType_MIN = ROAD_TYPE_UNKNOWN;
const RoadType RoadType_MAX = ROAD_TYPE_HIGHWAY;
const int RoadType_ARRAYSIZE = RoadType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RoadType_descriptor();
inline const ::std::string& RoadType_Name(RoadType value)
{
    return ::google::protobuf::internal::NameOfEnum(RoadType_descriptor(), value);
}
inline bool RoadType_Parse(const ::std::string& name, RoadType* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< RoadType >(RoadType_descriptor(), name, value);
}
enum LeftRightIndication
{
    LEFT_RIGHT_INDICATION_NO_LANE_CROSSING_DETECTED = 0,
    LEFT_RIGHT_INDICATION_LEFT_CROSSING = 1,
    LEFT_RIGHT_INDICATION_RIGHT_CROSSING = 2,
    LeftRightIndication_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
    LeftRightIndication_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool LeftRightIndication_IsValid(int value);
const LeftRightIndication LeftRightIndication_MIN = LEFT_RIGHT_INDICATION_NO_LANE_CROSSING_DETECTED;
const LeftRightIndication LeftRightIndication_MAX = LEFT_RIGHT_INDICATION_RIGHT_CROSSING;
const int LeftRightIndication_ARRAYSIZE = LeftRightIndication_MAX + 1;

const ::google::protobuf::EnumDescriptor* LeftRightIndication_descriptor();
inline const ::std::string& LeftRightIndication_Name(LeftRightIndication value)
{
    return ::google::protobuf::internal::NameOfEnum(LeftRightIndication_descriptor(), value);
}
inline bool LeftRightIndication_Parse(const ::std::string& name, LeftRightIndication* value)
{
    return ::google::protobuf::internal::ParseNamedEnum< LeftRightIndication >(
        LeftRightIndication_descriptor(), name, value);
}
// ===================================================================

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Point)
                                                  */
{
  public:
    Point();
    virtual ~Point();

    Point(const Point& from);

    inline Point& operator=(const Point& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Point(Point&& from) noexcept : Point() { *this = ::std::move(from); }

    inline Point& operator=(Point&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Point& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Point* internal_default_instance()
    {
        return reinterpret_cast< const Point* >(&_Point_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 0;

    void Swap(Point* other);
    friend void swap(Point& a, Point& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Point* New() const final { return CreateMaybeMessage< Point >(NULL); }

    Point* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Point >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Point& from);
    void MergeFrom(const Point& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Point* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // double x = 1;
    void clear_x();
    static const int kXFieldNumber = 1;
    double x() const;
    void set_x(double value);

    // double y = 2;
    void clear_y();
    static const int kYFieldNumber = 2;
    double y() const;
    void set_y(double value);

    // double z = 3;
    void clear_z();
    static const int kZFieldNumber = 3;
    double z() const;
    void set_z(double value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Point)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    double x_;
    double y_;
    double z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point2i : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Point2i)
                                                    */
{
  public:
    Point2i();
    virtual ~Point2i();

    Point2i(const Point2i& from);

    inline Point2i& operator=(const Point2i& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Point2i(Point2i&& from) noexcept : Point2i() { *this = ::std::move(from); }

    inline Point2i& operator=(Point2i&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Point2i& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Point2i* internal_default_instance()
    {
        return reinterpret_cast< const Point2i* >(&_Point2i_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 1;

    void Swap(Point2i* other);
    friend void swap(Point2i& a, Point2i& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Point2i* New() const final { return CreateMaybeMessage< Point2i >(NULL); }

    Point2i* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Point2i >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Point2i& from);
    void MergeFrom(const Point2i& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Point2i* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // int64 x = 1;
    void clear_x();
    static const int kXFieldNumber = 1;
    ::google::protobuf::int64 x() const;
    void set_x(::google::protobuf::int64 value);

    // int64 y = 2;
    void clear_y();
    static const int kYFieldNumber = 2;
    ::google::protobuf::int64 y() const;
    void set_y(::google::protobuf::int64 value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Point2i)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::int64 x_;
    ::google::protobuf::int64 y_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Rect)
                                                 */
{
  public:
    Rect();
    virtual ~Rect();

    Rect(const Rect& from);

    inline Rect& operator=(const Rect& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Rect(Rect&& from) noexcept : Rect() { *this = ::std::move(from); }

    inline Rect& operator=(Rect&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Rect& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Rect* internal_default_instance()
    {
        return reinterpret_cast< const Rect* >(&_Rect_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 2;

    void Swap(Rect* other);
    friend void swap(Rect& a, Rect& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Rect* New() const final { return CreateMaybeMessage< Rect >(NULL); }

    Rect* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Rect >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Rect& from);
    void MergeFrom(const Rect& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Rect* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // double x = 1;
    void clear_x();
    static const int kXFieldNumber = 1;
    double x() const;
    void set_x(double value);

    // double y = 2;
    void clear_y();
    static const int kYFieldNumber = 2;
    double y() const;
    void set_y(double value);

    // double width = 3;
    void clear_width();
    static const int kWidthFieldNumber = 3;
    double width() const;
    void set_width(double value);

    // double height = 4;
    void clear_height();
    static const int kHeightFieldNumber = 4;
    double height() const;
    void set_height(double value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Rect)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    double x_;
    double y_;
    double width_;
    double height_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImageInfo
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.ImageInfo)
                                          */
{
  public:
    ImageInfo();
    virtual ~ImageInfo();

    ImageInfo(const ImageInfo& from);

    inline ImageInfo& operator=(const ImageInfo& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    ImageInfo(ImageInfo&& from) noexcept : ImageInfo() { *this = ::std::move(from); }

    inline ImageInfo& operator=(ImageInfo&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const ImageInfo& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const ImageInfo* internal_default_instance()
    {
        return reinterpret_cast< const ImageInfo* >(&_ImageInfo_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 3;

    void Swap(ImageInfo* other);
    friend void swap(ImageInfo& a, ImageInfo& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline ImageInfo* New() const final { return CreateMaybeMessage< ImageInfo >(NULL); }

    ImageInfo* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< ImageInfo >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const ImageInfo& from);
    void MergeFrom(const ImageInfo& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(ImageInfo* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    typedef ImageInfo_PixelFormat PixelFormat;
    static const PixelFormat PIXEL_FORMAT_UNKNOWN = ImageInfo_PixelFormat_PIXEL_FORMAT_UNKNOWN;
    static const PixelFormat PIXEL_FORMAT_YUV422 = ImageInfo_PixelFormat_PIXEL_FORMAT_YUV422;
    static const PixelFormat PIXEL_FORMAT_YUV420 = ImageInfo_PixelFormat_PIXEL_FORMAT_YUV420;
    static const PixelFormat PIXEL_FORMAT_BGR = ImageInfo_PixelFormat_PIXEL_FORMAT_BGR;
    static const PixelFormat PIXEL_FORMAT_RGB = ImageInfo_PixelFormat_PIXEL_FORMAT_RGB;
    static const PixelFormat PIXEL_FORMAT_JPEG = ImageInfo_PixelFormat_PIXEL_FORMAT_JPEG;
    static inline bool PixelFormat_IsValid(int value) { return ImageInfo_PixelFormat_IsValid(value); }
    static const PixelFormat PixelFormat_MIN = ImageInfo_PixelFormat_PixelFormat_MIN;
    static const PixelFormat PixelFormat_MAX = ImageInfo_PixelFormat_PixelFormat_MAX;
    static const int PixelFormat_ARRAYSIZE = ImageInfo_PixelFormat_PixelFormat_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* PixelFormat_descriptor()
    {
        return ImageInfo_PixelFormat_descriptor();
    }
    static inline const ::std::string& PixelFormat_Name(PixelFormat value) { return ImageInfo_PixelFormat_Name(value); }
    static inline bool PixelFormat_Parse(const ::std::string& name, PixelFormat* value)
    {
        return ImageInfo_PixelFormat_Parse(name, value);
    }

    // accessors -------------------------------------------------------

    // bytes intrinsic = 4;
    void clear_intrinsic();
    static const int kIntrinsicFieldNumber = 4;
    const ::std::string& intrinsic() const;
    void set_intrinsic(const ::std::string& value);
#if LANG_CXX11
    void set_intrinsic(::std::string&& value);
#endif
    void set_intrinsic(const char* value);
    void set_intrinsic(const void* value, size_t size);
    ::std::string* mutable_intrinsic();
    ::std::string* release_intrinsic();
    void set_allocated_intrinsic(::std::string* intrinsic);

    // bytes extrinsic = 5;
    void clear_extrinsic();
    static const int kExtrinsicFieldNumber = 5;
    const ::std::string& extrinsic() const;
    void set_extrinsic(const ::std::string& value);
#if LANG_CXX11
    void set_extrinsic(::std::string&& value);
#endif
    void set_extrinsic(const char* value);
    void set_extrinsic(const void* value, size_t size);
    ::std::string* mutable_extrinsic();
    ::std::string* release_extrinsic();
    void set_allocated_extrinsic(::std::string* extrinsic);

    // int64 height = 1;
    void clear_height();
    static const int kHeightFieldNumber = 1;
    ::google::protobuf::int64 height() const;
    void set_height(::google::protobuf::int64 value);

    // int64 width = 2;
    void clear_width();
    static const int kWidthFieldNumber = 2;
    ::google::protobuf::int64 width() const;
    void set_width(::google::protobuf::int64 value);

    // .calmcar.proto.ImageInfo.PixelFormat pixel_format = 3;
    void clear_pixel_format();
    static const int kPixelFormatFieldNumber = 3;
    ::calmcar::proto::ImageInfo_PixelFormat pixel_format() const;
    void set_pixel_format(::calmcar::proto::ImageInfo_PixelFormat value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.ImageInfo)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::ArenaStringPtr intrinsic_;
    ::google::protobuf::internal::ArenaStringPtr extrinsic_;
    ::google::protobuf::int64 height_;
    ::google::protobuf::int64 width_;
    int pixel_format_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Image)
                                                  */
{
  public:
    Image();
    virtual ~Image();

    Image(const Image& from);

    inline Image& operator=(const Image& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Image(Image&& from) noexcept : Image() { *this = ::std::move(from); }

    inline Image& operator=(Image&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Image& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Image* internal_default_instance()
    {
        return reinterpret_cast< const Image* >(&_Image_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 4;

    void Swap(Image* other);
    friend void swap(Image& a, Image& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Image* New() const final { return CreateMaybeMessage< Image >(NULL); }

    Image* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Image >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Image& from);
    void MergeFrom(const Image& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Image* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // bytes data = 1;
    void clear_data();
    static const int kDataFieldNumber = 1;
    const ::std::string& data() const;
    void set_data(const ::std::string& value);
#if LANG_CXX11
    void set_data(::std::string&& value);
#endif
    void set_data(const char* value);
    void set_data(const void* value, size_t size);
    ::std::string* mutable_data();
    ::std::string* release_data();
    void set_allocated_data(::std::string* data);

    // int64 timestamp = 2;
    void clear_timestamp();
    static const int kTimestampFieldNumber = 2;
    ::google::protobuf::int64 timestamp() const;
    void set_timestamp(::google::protobuf::int64 value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Image)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::int64 timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Can : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Can)
                                                */
{
  public:
    Can();
    virtual ~Can();

    Can(const Can& from);

    inline Can& operator=(const Can& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Can(Can&& from) noexcept : Can() { *this = ::std::move(from); }

    inline Can& operator=(Can&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Can& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Can* internal_default_instance()
    {
        return reinterpret_cast< const Can* >(&_Can_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 5;

    void Swap(Can* other);
    friend void swap(Can& a, Can& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Can* New() const final { return CreateMaybeMessage< Can >(NULL); }

    Can* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Can >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Can& from);
    void MergeFrom(const Can& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Can* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // bytes data = 3;
    void clear_data();
    static const int kDataFieldNumber = 3;
    const ::std::string& data() const;
    void set_data(const ::std::string& value);
#if LANG_CXX11
    void set_data(::std::string&& value);
#endif
    void set_data(const char* value);
    void set_data(const void* value, size_t size);
    ::std::string* mutable_data();
    ::std::string* release_data();
    void set_allocated_data(::std::string* data);

    // int64 id = 1;
    void clear_id();
    static const int kIdFieldNumber = 1;
    ::google::protobuf::int64 id() const;
    void set_id(::google::protobuf::int64 value);

    // int64 dlc = 2;
    void clear_dlc();
    static const int kDlcFieldNumber = 2;
    ::google::protobuf::int64 dlc() const;
    void set_dlc(::google::protobuf::int64 value);

    // int64 timestamp = 4;
    void clear_timestamp();
    static const int kTimestampFieldNumber = 4;
    ::google::protobuf::int64 timestamp() const;
    void set_timestamp(::google::protobuf::int64 value);

    // int32 channel = 5;
    void clear_channel();
    static const int kChannelFieldNumber = 5;
    ::google::protobuf::int32 channel() const;
    void set_channel(::google::protobuf::int32 value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Can)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::google::protobuf::int64 id_;
    ::google::protobuf::int64 dlc_;
    ::google::protobuf::int64 timestamp_;
    ::google::protobuf::int32 channel_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Gps : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Gps)
                                                */
{
  public:
    Gps();
    virtual ~Gps();

    Gps(const Gps& from);

    inline Gps& operator=(const Gps& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Gps(Gps&& from) noexcept : Gps() { *this = ::std::move(from); }

    inline Gps& operator=(Gps&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Gps& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Gps* internal_default_instance()
    {
        return reinterpret_cast< const Gps* >(&_Gps_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 6;

    void Swap(Gps* other);
    friend void swap(Gps& a, Gps& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Gps* New() const final { return CreateMaybeMessage< Gps >(NULL); }

    Gps* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Gps >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Gps& from);
    void MergeFrom(const Gps& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Gps* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // double latitude = 1;
    void clear_latitude();
    static const int kLatitudeFieldNumber = 1;
    double latitude() const;
    void set_latitude(double value);

    // double longitude = 2;
    void clear_longitude();
    static const int kLongitudeFieldNumber = 2;
    double longitude() const;
    void set_longitude(double value);

    // double height = 3;
    void clear_height();
    static const int kHeightFieldNumber = 3;
    double height() const;
    void set_height(double value);

    // double angle = 4;
    void clear_angle();
    static const int kAngleFieldNumber = 4;
    double angle() const;
    void set_angle(double value);

    // double speed = 5;
    void clear_speed();
    static const int kSpeedFieldNumber = 5;
    double speed() const;
    void set_speed(double value);

    // int64 hour = 6;
    void clear_hour();
    static const int kHourFieldNumber = 6;
    ::google::protobuf::int64 hour() const;
    void set_hour(::google::protobuf::int64 value);

    // int64 minute = 7;
    void clear_minute();
    static const int kMinuteFieldNumber = 7;
    ::google::protobuf::int64 minute() const;
    void set_minute(::google::protobuf::int64 value);

    // int64 second = 8;
    void clear_second();
    static const int kSecondFieldNumber = 8;
    ::google::protobuf::int64 second() const;
    void set_second(::google::protobuf::int64 value);

    // int64 millisecond = 9;
    void clear_millisecond();
    static const int kMillisecondFieldNumber = 9;
    ::google::protobuf::int64 millisecond() const;
    void set_millisecond(::google::protobuf::int64 value);

    // int64 day = 10;
    void clear_day();
    static const int kDayFieldNumber = 10;
    ::google::protobuf::int64 day() const;
    void set_day(::google::protobuf::int64 value);

    // int64 month = 11;
    void clear_month();
    static const int kMonthFieldNumber = 11;
    ::google::protobuf::int64 month() const;
    void set_month(::google::protobuf::int64 value);

    // int64 year = 12;
    void clear_year();
    static const int kYearFieldNumber = 12;
    ::google::protobuf::int64 year() const;
    void set_year(::google::protobuf::int64 value);

    // double course = 13;
    void clear_course();
    static const int kCourseFieldNumber = 13;
    double course() const;
    void set_course(double value);

    // int64 satellites = 14;
    void clear_satellites();
    static const int kSatellitesFieldNumber = 14;
    ::google::protobuf::int64 satellites() const;
    void set_satellites(::google::protobuf::int64 value);

    // double ground_height = 15;
    void clear_ground_height();
    static const int kGroundHeightFieldNumber = 15;
    double ground_height() const;
    void set_ground_height(double value);

    // int64 unit = 16;
    void clear_unit();
    static const int kUnitFieldNumber = 16;
    ::google::protobuf::int64 unit() const;
    void set_unit(::google::protobuf::int64 value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Gps)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    double latitude_;
    double longitude_;
    double height_;
    double angle_;
    double speed_;
    ::google::protobuf::int64 hour_;
    ::google::protobuf::int64 minute_;
    ::google::protobuf::int64 second_;
    ::google::protobuf::int64 millisecond_;
    ::google::protobuf::int64 day_;
    ::google::protobuf::int64 month_;
    ::google::protobuf::int64 year_;
    double course_;
    ::google::protobuf::int64 satellites_;
    double ground_height_;
    ::google::protobuf::int64 unit_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Object : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Object)
                                                   */
{
  public:
    Object();
    virtual ~Object();

    Object(const Object& from);

    inline Object& operator=(const Object& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Object(Object&& from) noexcept : Object() { *this = ::std::move(from); }

    inline Object& operator=(Object&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Object& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Object* internal_default_instance()
    {
        return reinterpret_cast< const Object* >(&_Object_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 7;

    void Swap(Object* other);
    friend void swap(Object& a, Object& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Object* New() const final { return CreateMaybeMessage< Object >(NULL); }

    Object* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Object >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Object& from);
    void MergeFrom(const Object& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Object* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    typedef Object_SensorType SensorType;
    static const SensorType SENSOR_TYPE_UNKNOWN = Object_SensorType_SENSOR_TYPE_UNKNOWN;
    static const SensorType SENSOR_TYPE_CAMERA = Object_SensorType_SENSOR_TYPE_CAMERA;
    static const SensorType SENSOR_TYPE_RADAR = Object_SensorType_SENSOR_TYPE_RADAR;
    static const SensorType SENSOR_TYPE_LIDAR = Object_SensorType_SENSOR_TYPE_LIDAR;
    static const SensorType SENSOR_TYPE_FUSED = Object_SensorType_SENSOR_TYPE_FUSED;
    static inline bool SensorType_IsValid(int value) { return Object_SensorType_IsValid(value); }
    static const SensorType SensorType_MIN = Object_SensorType_SensorType_MIN;
    static const SensorType SensorType_MAX = Object_SensorType_SensorType_MAX;
    static const int SensorType_ARRAYSIZE = Object_SensorType_SensorType_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* SensorType_descriptor()
    {
        return Object_SensorType_descriptor();
    }
    static inline const ::std::string& SensorType_Name(SensorType value) { return Object_SensorType_Name(value); }
    static inline bool SensorType_Parse(const ::std::string& name, SensorType* value)
    {
        return Object_SensorType_Parse(name, value);
    }

    typedef Object_LaneAssignment LaneAssignment;
    static const LaneAssignment LANE_ASSIGNMENT_NOT_ASSIGNED = Object_LaneAssignment_LANE_ASSIGNMENT_NOT_ASSIGNED;
    static const LaneAssignment LANE_ASSIGNMENT_EGO_LANE = Object_LaneAssignment_LANE_ASSIGNMENT_EGO_LANE;
    static const LaneAssignment LANE_ASSIGNMENT_NEXT_LANE_LEFT = Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_LANE_LEFT;
    static const LaneAssignment LANE_ASSIGNMENT_NEXT_LANE_RIGHT = Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_LANE_RIGHT;
    static const LaneAssignment LANE_ASSIGNMENT_NEXT_NEXT_LANE_LEFT =
        Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_NEXT_LANE_LEFT;
    static const LaneAssignment LANE_ASSIGNMENT_NEXT_NEXT_LANE_RIGHT =
        Object_LaneAssignment_LANE_ASSIGNMENT_NEXT_NEXT_LANE_RIGHT;
    static inline bool LaneAssignment_IsValid(int value) { return Object_LaneAssignment_IsValid(value); }
    static const LaneAssignment LaneAssignment_MIN = Object_LaneAssignment_LaneAssignment_MIN;
    static const LaneAssignment LaneAssignment_MAX = Object_LaneAssignment_LaneAssignment_MAX;
    static const int LaneAssignment_ARRAYSIZE = Object_LaneAssignment_LaneAssignment_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* LaneAssignment_descriptor()
    {
        return Object_LaneAssignment_descriptor();
    }
    static inline const ::std::string& LaneAssignment_Name(LaneAssignment value)
    {
        return Object_LaneAssignment_Name(value);
    }
    static inline bool LaneAssignment_Parse(const ::std::string& name, LaneAssignment* value)
    {
        return Object_LaneAssignment_Parse(name, value);
    }

    typedef Object_MotionStatus MotionStatus;
    static const MotionStatus MOTION_STATUS_UNKNOWN = Object_MotionStatus_MOTION_STATUS_UNKNOWN;
    static const MotionStatus MOTION_STATUS_PARKED = Object_MotionStatus_MOTION_STATUS_PARKED;
    static const MotionStatus MOTION_STATUS_STOPPED = Object_MotionStatus_MOTION_STATUS_STOPPED;
    static const MotionStatus MOTION_STATUS_MOVING = Object_MotionStatus_MOTION_STATUS_MOVING;
    static const MotionStatus MOTION_STATUS_ONCOMING = Object_MotionStatus_MOTION_STATUS_ONCOMING;
    static const MotionStatus MOTION_STATUS_CROSSING = Object_MotionStatus_MOTION_STATUS_CROSSING;
    static inline bool MotionStatus_IsValid(int value) { return Object_MotionStatus_IsValid(value); }
    static const MotionStatus MotionStatus_MIN = Object_MotionStatus_MotionStatus_MIN;
    static const MotionStatus MotionStatus_MAX = Object_MotionStatus_MotionStatus_MAX;
    static const int MotionStatus_ARRAYSIZE = Object_MotionStatus_MotionStatus_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* MotionStatus_descriptor()
    {
        return Object_MotionStatus_descriptor();
    }
    static inline const ::std::string& MotionStatus_Name(MotionStatus value) { return Object_MotionStatus_Name(value); }
    static inline bool MotionStatus_Parse(const ::std::string& name, MotionStatus* value)
    {
        return Object_MotionStatus_Parse(name, value);
    }

    typedef Object_CutInCutOut CutInCutOut;
    static const CutInCutOut CUT_IN_CUT_OUT_UNKNOWN = Object_CutInCutOut_CUT_IN_CUT_OUT_UNKNOWN;
    static const CutInCutOut CUT_IN_CUT_OUT_HOST_CUT_IN_LEFT = Object_CutInCutOut_CUT_IN_CUT_OUT_HOST_CUT_IN_LEFT;
    static const CutInCutOut CUT_IN_CUT_OUT_HOST_CUT_IN_RIGHT = Object_CutInCutOut_CUT_IN_CUT_OUT_HOST_CUT_IN_RIGHT;
    static const CutInCutOut CUT_IN_CUT_OUT_HOST_CUT_OUT_LEFT = Object_CutInCutOut_CUT_IN_CUT_OUT_HOST_CUT_OUT_LEFT;
    static const CutInCutOut CUT_IN_CUT_OUT_HOST_CUT_OUT_RIGHT = Object_CutInCutOut_CUT_IN_CUT_OUT_HOST_CUT_OUT_RIGHT;
    static const CutInCutOut CUT_IN_CUT_OUT_NO_CUT_IN_OUT = Object_CutInCutOut_CUT_IN_CUT_OUT_NO_CUT_IN_OUT;
    static inline bool CutInCutOut_IsValid(int value) { return Object_CutInCutOut_IsValid(value); }
    static const CutInCutOut CutInCutOut_MIN = Object_CutInCutOut_CutInCutOut_MIN;
    static const CutInCutOut CutInCutOut_MAX = Object_CutInCutOut_CutInCutOut_MAX;
    static const int CutInCutOut_ARRAYSIZE = Object_CutInCutOut_CutInCutOut_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* CutInCutOut_descriptor()
    {
        return Object_CutInCutOut_descriptor();
    }
    static inline const ::std::string& CutInCutOut_Name(CutInCutOut value) { return Object_CutInCutOut_Name(value); }
    static inline bool CutInCutOut_Parse(const ::std::string& name, CutInCutOut* value)
    {
        return Object_CutInCutOut_Parse(name, value);
    }

    // accessors -------------------------------------------------------

    // string class_name = 4;
    void clear_class_name();
    static const int kClassNameFieldNumber = 4;
    const ::std::string& class_name() const;
    void set_class_name(const ::std::string& value);
#if LANG_CXX11
    void set_class_name(::std::string&& value);
#endif
    void set_class_name(const char* value);
    void set_class_name(const char* value, size_t size);
    ::std::string* mutable_class_name();
    ::std::string* release_class_name();
    void set_allocated_class_name(::std::string* class_name);

    // string subclass_name = 6;
    void clear_subclass_name();
    static const int kSubclassNameFieldNumber = 6;
    const ::std::string& subclass_name() const;
    void set_subclass_name(const ::std::string& value);
#if LANG_CXX11
    void set_subclass_name(::std::string&& value);
#endif
    void set_subclass_name(const char* value);
    void set_subclass_name(const char* value, size_t size);
    ::std::string* mutable_subclass_name();
    ::std::string* release_subclass_name();
    void set_allocated_subclass_name(::std::string* subclass_name);

    // .calmcar.proto.Rect bbox = 8;
    bool has_bbox() const;
    void clear_bbox();
    static const int kBboxFieldNumber = 8;

  private:
    const ::calmcar::proto::Rect& _internal_bbox() const;

  public:
    const ::calmcar::proto::Rect& bbox() const;
    ::calmcar::proto::Rect* release_bbox();
    ::calmcar::proto::Rect* mutable_bbox();
    void set_allocated_bbox(::calmcar::proto::Rect* bbox);

    // .calmcar.proto.Point distance = 14;
    bool has_distance() const;
    void clear_distance();
    static const int kDistanceFieldNumber = 14;

  private:
    const ::calmcar::proto::Point& _internal_distance() const;

  public:
    const ::calmcar::proto::Point& distance() const;
    ::calmcar::proto::Point* release_distance();
    ::calmcar::proto::Point* mutable_distance();
    void set_allocated_distance(::calmcar::proto::Point* distance);

    // .calmcar.proto.Point relative_velocity = 15;
    bool has_relative_velocity() const;
    void clear_relative_velocity();
    static const int kRelativeVelocityFieldNumber = 15;

  private:
    const ::calmcar::proto::Point& _internal_relative_velocity() const;

  public:
    const ::calmcar::proto::Point& relative_velocity() const;
    ::calmcar::proto::Point* release_relative_velocity();
    ::calmcar::proto::Point* mutable_relative_velocity();
    void set_allocated_relative_velocity(::calmcar::proto::Point* relative_velocity);

    // .calmcar.proto.Point relative_acceleration = 16;
    bool has_relative_acceleration() const;
    void clear_relative_acceleration();
    static const int kRelativeAccelerationFieldNumber = 16;

  private:
    const ::calmcar::proto::Point& _internal_relative_acceleration() const;

  public:
    const ::calmcar::proto::Point& relative_acceleration() const;
    ::calmcar::proto::Point* release_relative_acceleration();
    ::calmcar::proto::Point* mutable_relative_acceleration();
    void set_allocated_relative_acceleration(::calmcar::proto::Point* relative_acceleration);

    // int64 id = 2;
    void clear_id();
    static const int kIdFieldNumber = 2;
    ::google::protobuf::int64 id() const;
    void set_id(::google::protobuf::int64 value);

    // int64 class_ = 3;
    void clear_class_();
    static const int kClassFieldNumber = 3;
    ::google::protobuf::int64 class_() const;
    void set_class_(::google::protobuf::int64 value);

    // int64 subclass = 5;
    void clear_subclass();
    static const int kSubclassFieldNumber = 5;
    ::google::protobuf::int64 subclass() const;
    void set_subclass(::google::protobuf::int64 value);

    // double confidence = 7;
    void clear_confidence();
    static const int kConfidenceFieldNumber = 7;
    double confidence() const;
    void set_confidence(double value);

    // int64 life_time = 9;
    void clear_life_time();
    static const int kLifeTimeFieldNumber = 9;
    ::google::protobuf::int64 life_time() const;
    void set_life_time(::google::protobuf::int64 value);

    // int64 timestamp = 10;
    void clear_timestamp();
    static const int kTimestampFieldNumber = 10;
    ::google::protobuf::int64 timestamp() const;
    void set_timestamp(::google::protobuf::int64 value);

    // double height = 11;
    void clear_height();
    static const int kHeightFieldNumber = 11;
    double height() const;
    void set_height(double value);

    // .calmcar.proto.Object.SensorType sensor_type = 1;
    void clear_sensor_type();
    static const int kSensorTypeFieldNumber = 1;
    ::calmcar::proto::Object_SensorType sensor_type() const;
    void set_sensor_type(::calmcar::proto::Object_SensorType value);

    // .calmcar.proto.Object.LaneAssignment lane_assignment = 22;
    void clear_lane_assignment();
    static const int kLaneAssignmentFieldNumber = 22;
    ::calmcar::proto::Object_LaneAssignment lane_assignment() const;
    void set_lane_assignment(::calmcar::proto::Object_LaneAssignment value);

    // double width = 12;
    void clear_width();
    static const int kWidthFieldNumber = 12;
    double width() const;
    void set_width(double value);

    // double length = 13;
    void clear_length();
    static const int kLengthFieldNumber = 13;
    double length() const;
    void set_length(double value);

    // double ttc = 17;
    void clear_ttc();
    static const int kTtcFieldNumber = 17;
    double ttc() const;
    void set_ttc(double value);

    // double thw = 18;
    void clear_thw();
    static const int kThwFieldNumber = 18;
    double thw() const;
    void set_thw(double value);

    // double angle_left = 19;
    void clear_angle_left();
    static const int kAngleLeftFieldNumber = 19;
    double angle_left() const;
    void set_angle_left(double value);

    // double angle_right = 20;
    void clear_angle_right();
    static const int kAngleRightFieldNumber = 20;
    double angle_right() const;
    void set_angle_right(double value);

    // double yaw_angle = 21;
    void clear_yaw_angle();
    static const int kYawAngleFieldNumber = 21;
    double yaw_angle() const;
    void set_yaw_angle(double value);

    // .calmcar.proto.Object.MotionStatus motion_status = 23;
    void clear_motion_status();
    static const int kMotionStatusFieldNumber = 23;
    ::calmcar::proto::Object_MotionStatus motion_status() const;
    void set_motion_status(::calmcar::proto::Object_MotionStatus value);

    // .calmcar.proto.Object.CutInCutOut cutin_cutout = 24;
    void clear_cutin_cutout();
    static const int kCutinCutoutFieldNumber = 24;
    ::calmcar::proto::Object_CutInCutOut cutin_cutout() const;
    void set_cutin_cutout(::calmcar::proto::Object_CutInCutOut value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Object)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::ArenaStringPtr class_name_;
    ::google::protobuf::internal::ArenaStringPtr subclass_name_;
    ::calmcar::proto::Rect* bbox_;
    ::calmcar::proto::Point* distance_;
    ::calmcar::proto::Point* relative_velocity_;
    ::calmcar::proto::Point* relative_acceleration_;
    ::google::protobuf::int64 id_;
    ::google::protobuf::int64 class__;
    ::google::protobuf::int64 subclass_;
    double confidence_;
    ::google::protobuf::int64 life_time_;
    ::google::protobuf::int64 timestamp_;
    double height_;
    int sensor_type_;
    int lane_assignment_;
    double width_;
    double length_;
    double ttc_;
    double thw_;
    double angle_left_;
    double angle_right_;
    double yaw_angle_;
    int motion_status_;
    int cutin_cutout_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Lane : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Lane)
                                                 */
{
  public:
    Lane();
    virtual ~Lane();

    Lane(const Lane& from);

    inline Lane& operator=(const Lane& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Lane(Lane&& from) noexcept : Lane() { *this = ::std::move(from); }

    inline Lane& operator=(Lane&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Lane& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Lane* internal_default_instance()
    {
        return reinterpret_cast< const Lane* >(&_Lane_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 8;

    void Swap(Lane* other);
    friend void swap(Lane& a, Lane& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Lane* New() const final { return CreateMaybeMessage< Lane >(NULL); }

    Lane* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Lane >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Lane& from);
    void MergeFrom(const Lane& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Lane* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    typedef Lane_CoordinateType CoordinateType;
    static const CoordinateType COORDINATE_TYPE_IMAGE = Lane_CoordinateType_COORDINATE_TYPE_IMAGE;
    static const CoordinateType COORDINATE_TYPE_WORLD = Lane_CoordinateType_COORDINATE_TYPE_WORLD;
    static inline bool CoordinateType_IsValid(int value) { return Lane_CoordinateType_IsValid(value); }
    static const CoordinateType CoordinateType_MIN = Lane_CoordinateType_CoordinateType_MIN;
    static const CoordinateType CoordinateType_MAX = Lane_CoordinateType_CoordinateType_MAX;
    static const int CoordinateType_ARRAYSIZE = Lane_CoordinateType_CoordinateType_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* CoordinateType_descriptor()
    {
        return Lane_CoordinateType_descriptor();
    }
    static inline const ::std::string& CoordinateType_Name(CoordinateType value)
    {
        return Lane_CoordinateType_Name(value);
    }
    static inline bool CoordinateType_Parse(const ::std::string& name, CoordinateType* value)
    {
        return Lane_CoordinateType_Parse(name, value);
    }

    typedef Lane_LineType LineType;
    static const LineType LINE_TYPE_UNDECIDED = Lane_LineType_LINE_TYPE_UNDECIDED;
    static const LineType LINE_TYPE_SOLID = Lane_LineType_LINE_TYPE_SOLID;
    static const LineType LINE_TYPE_DASHED = Lane_LineType_LINE_TYPE_DASHED;
    static const LineType LINE_TYPE_VIRTUAL = Lane_LineType_LINE_TYPE_VIRTUAL;
    static const LineType LINE_TYPE_ROAD_EDGE = Lane_LineType_LINE_TYPE_ROAD_EDGE;
    static const LineType LINE_TYPE_BOTTS_DOTS = Lane_LineType_LINE_TYPE_BOTTS_DOTS;
    static inline bool LineType_IsValid(int value) { return Lane_LineType_IsValid(value); }
    static const LineType LineType_MIN = Lane_LineType_LineType_MIN;
    static const LineType LineType_MAX = Lane_LineType_LineType_MAX;
    static const int LineType_ARRAYSIZE = Lane_LineType_LineType_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* LineType_descriptor() { return Lane_LineType_descriptor(); }
    static inline const ::std::string& LineType_Name(LineType value) { return Lane_LineType_Name(value); }
    static inline bool LineType_Parse(const ::std::string& name, LineType* value)
    {
        return Lane_LineType_Parse(name, value);
    }

    typedef Lane_LineColor LineColor;
    static const LineColor LINE_COLOR_UNKNOWN = Lane_LineColor_LINE_COLOR_UNKNOWN;
    static const LineColor LINE_COLOR_WHITE = Lane_LineColor_LINE_COLOR_WHITE;
    static const LineColor LINE_COLOR_YELLOW = Lane_LineColor_LINE_COLOR_YELLOW;
    static const LineColor LINE_COLOR_BLUE_GREEN = Lane_LineColor_LINE_COLOR_BLUE_GREEN;
    static const LineColor LINE_COLOR_ORANGE_RED = Lane_LineColor_LINE_COLOR_ORANGE_RED;
    static inline bool LineColor_IsValid(int value) { return Lane_LineColor_IsValid(value); }
    static const LineColor LineColor_MIN = Lane_LineColor_LineColor_MIN;
    static const LineColor LineColor_MAX = Lane_LineColor_LineColor_MAX;
    static const int LineColor_ARRAYSIZE = Lane_LineColor_LineColor_ARRAYSIZE;
    static inline const ::google::protobuf::EnumDescriptor* LineColor_descriptor()
    {
        return Lane_LineColor_descriptor();
    }
    static inline const ::std::string& LineColor_Name(LineColor value) { return Lane_LineColor_Name(value); }
    static inline bool LineColor_Parse(const ::std::string& name, LineColor* value)
    {
        return Lane_LineColor_Parse(name, value);
    }

    // accessors -------------------------------------------------------

    // repeated .calmcar.proto.Point image_points = 13;
    int image_points_size() const;
    void clear_image_points();
    static const int kImagePointsFieldNumber = 13;
    ::calmcar::proto::Point* mutable_image_points(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >* mutable_image_points();
    const ::calmcar::proto::Point& image_points(int index) const;
    ::calmcar::proto::Point* add_image_points();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >& image_points() const;

    // .calmcar.proto.Point start = 10;
    bool has_start() const;
    void clear_start();
    static const int kStartFieldNumber = 10;

  private:
    const ::calmcar::proto::Point& _internal_start() const;

  public:
    const ::calmcar::proto::Point& start() const;
    ::calmcar::proto::Point* release_start();
    ::calmcar::proto::Point* mutable_start();
    void set_allocated_start(::calmcar::proto::Point* start);

    // .calmcar.proto.Point end = 11;
    bool has_end() const;
    void clear_end();
    static const int kEndFieldNumber = 11;

  private:
    const ::calmcar::proto::Point& _internal_end() const;

  public:
    const ::calmcar::proto::Point& end() const;
    ::calmcar::proto::Point* release_end();
    ::calmcar::proto::Point* mutable_end();
    void set_allocated_end(::calmcar::proto::Point* end);

    // double C0 = 2;
    void clear_c0();
    static const int kC0FieldNumber = 2;
    double c0() const;
    void set_c0(double value);

    // double C1 = 3;
    void clear_c1();
    static const int kC1FieldNumber = 3;
    double c1() const;
    void set_c1(double value);

    // double C2 = 4;
    void clear_c2();
    static const int kC2FieldNumber = 4;
    double c2() const;
    void set_c2(double value);

    // .calmcar.proto.Lane.CoordinateType coordinate_type = 1;
    void clear_coordinate_type();
    static const int kCoordinateTypeFieldNumber = 1;
    ::calmcar::proto::Lane_CoordinateType coordinate_type() const;
    void set_coordinate_type(::calmcar::proto::Lane_CoordinateType value);

    // .calmcar.proto.Lane.LineType line_type = 8;
    void clear_line_type();
    static const int kLineTypeFieldNumber = 8;
    ::calmcar::proto::Lane_LineType line_type() const;
    void set_line_type(::calmcar::proto::Lane_LineType value);

    // double C3 = 5;
    void clear_c3();
    static const int kC3FieldNumber = 5;
    double c3() const;
    void set_c3(double value);

    // int64 index = 6;
    void clear_index();
    static const int kIndexFieldNumber = 6;
    ::google::protobuf::int64 index() const;
    void set_index(::google::protobuf::int64 value);

    // int64 quality = 7;
    void clear_quality();
    static const int kQualityFieldNumber = 7;
    ::google::protobuf::int64 quality() const;
    void set_quality(::google::protobuf::int64 value);

    // double distance_to_host = 12;
    void clear_distance_to_host();
    static const int kDistanceToHostFieldNumber = 12;
    double distance_to_host() const;
    void set_distance_to_host(double value);

    // double width = 14;
    void clear_width();
    static const int kWidthFieldNumber = 14;
    double width() const;
    void set_width(double value);

    // .calmcar.proto.Lane.LineColor line_color = 9;
    void clear_line_color();
    static const int kLineColorFieldNumber = 9;
    ::calmcar::proto::Lane_LineColor line_color() const;
    void set_line_color(::calmcar::proto::Lane_LineColor value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Lane)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point > image_points_;
    ::calmcar::proto::Point* start_;
    ::calmcar::proto::Point* end_;
    double c0_;
    double c1_;
    double c2_;
    int coordinate_type_;
    int line_type_;
    double c3_;
    ::google::protobuf::int64 index_;
    ::google::protobuf::int64 quality_;
    double distance_to_host_;
    double width_;
    int line_color_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Header : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Header)
                                                   */
{
  public:
    Header();
    virtual ~Header();

    Header(const Header& from);

    inline Header& operator=(const Header& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Header(Header&& from) noexcept : Header() { *this = ::std::move(from); }

    inline Header& operator=(Header&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Header& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Header* internal_default_instance()
    {
        return reinterpret_cast< const Header* >(&_Header_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 9;

    void Swap(Header* other);
    friend void swap(Header& a, Header& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Header* New() const final { return CreateMaybeMessage< Header >(NULL); }

    Header* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Header >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Header& from);
    void MergeFrom(const Header& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Header* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // string pdaq_serial_number = 1;
    void clear_pdaq_serial_number();
    static const int kPdaqSerialNumberFieldNumber = 1;
    const ::std::string& pdaq_serial_number() const;
    void set_pdaq_serial_number(const ::std::string& value);
#if LANG_CXX11
    void set_pdaq_serial_number(::std::string&& value);
#endif
    void set_pdaq_serial_number(const char* value);
    void set_pdaq_serial_number(const char* value, size_t size);
    ::std::string* mutable_pdaq_serial_number();
    ::std::string* release_pdaq_serial_number();
    void set_allocated_pdaq_serial_number(::std::string* pdaq_serial_number);

    // string protocol_version = 2;
    void clear_protocol_version();
    static const int kProtocolVersionFieldNumber = 2;
    const ::std::string& protocol_version() const;
    void set_protocol_version(const ::std::string& value);
#if LANG_CXX11
    void set_protocol_version(::std::string&& value);
#endif
    void set_protocol_version(const char* value);
    void set_protocol_version(const char* value, size_t size);
    ::std::string* mutable_protocol_version();
    ::std::string* release_protocol_version();
    void set_allocated_protocol_version(::std::string* protocol_version);

    // string calmcar_version = 3;
    void clear_calmcar_version();
    static const int kCalmcarVersionFieldNumber = 3;
    const ::std::string& calmcar_version() const;
    void set_calmcar_version(const ::std::string& value);
#if LANG_CXX11
    void set_calmcar_version(::std::string&& value);
#endif
    void set_calmcar_version(const char* value);
    void set_calmcar_version(const char* value, size_t size);
    ::std::string* mutable_calmcar_version();
    ::std::string* release_calmcar_version();
    void set_allocated_calmcar_version(::std::string* calmcar_version);

    // string pdaq_version = 4;
    void clear_pdaq_version();
    static const int kPdaqVersionFieldNumber = 4;
    const ::std::string& pdaq_version() const;
    void set_pdaq_version(const ::std::string& value);
#if LANG_CXX11
    void set_pdaq_version(::std::string&& value);
#endif
    void set_pdaq_version(const char* value);
    void set_pdaq_version(const char* value, size_t size);
    ::std::string* mutable_pdaq_version();
    ::std::string* release_pdaq_version();
    void set_allocated_pdaq_version(::std::string* pdaq_version);

    // string car_type = 6;
    void clear_car_type();
    static const int kCarTypeFieldNumber = 6;
    const ::std::string& car_type() const;
    void set_car_type(const ::std::string& value);
#if LANG_CXX11
    void set_car_type(::std::string&& value);
#endif
    void set_car_type(const char* value);
    void set_car_type(const char* value, size_t size);
    ::std::string* mutable_car_type();
    ::std::string* release_car_type();
    void set_allocated_car_type(::std::string* car_type);

    // bytes calmcar_config = 7;
    void clear_calmcar_config();
    static const int kCalmcarConfigFieldNumber = 7;
    const ::std::string& calmcar_config() const;
    void set_calmcar_config(const ::std::string& value);
#if LANG_CXX11
    void set_calmcar_config(::std::string&& value);
#endif
    void set_calmcar_config(const char* value);
    void set_calmcar_config(const void* value, size_t size);
    ::std::string* mutable_calmcar_config();
    ::std::string* release_calmcar_config();
    void set_allocated_calmcar_config(::std::string* calmcar_config);

    // string run_mode = 8;
    void clear_run_mode();
    static const int kRunModeFieldNumber = 8;
    const ::std::string& run_mode() const;
    void set_run_mode(const ::std::string& value);
#if LANG_CXX11
    void set_run_mode(::std::string&& value);
#endif
    void set_run_mode(const char* value);
    void set_run_mode(const char* value, size_t size);
    ::std::string* mutable_run_mode();
    ::std::string* release_run_mode();
    void set_allocated_run_mode(::std::string* run_mode);

    // .calmcar.proto.ImageInfo image_info = 5;
    bool has_image_info() const;
    void clear_image_info();
    static const int kImageInfoFieldNumber = 5;

  private:
    const ::calmcar::proto::ImageInfo& _internal_image_info() const;

  public:
    const ::calmcar::proto::ImageInfo& image_info() const;
    ::calmcar::proto::ImageInfo* release_image_info();
    ::calmcar::proto::ImageInfo* mutable_image_info();
    void set_allocated_image_info(::calmcar::proto::ImageInfo* image_info);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Header)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::internal::ArenaStringPtr pdaq_serial_number_;
    ::google::protobuf::internal::ArenaStringPtr protocol_version_;
    ::google::protobuf::internal::ArenaStringPtr calmcar_version_;
    ::google::protobuf::internal::ArenaStringPtr pdaq_version_;
    ::google::protobuf::internal::ArenaStringPtr car_type_;
    ::google::protobuf::internal::ArenaStringPtr calmcar_config_;
    ::google::protobuf::internal::ArenaStringPtr run_mode_;
    ::calmcar::proto::ImageInfo* image_info_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Contour : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Contour)
                                                    */
{
  public:
    Contour();
    virtual ~Contour();

    Contour(const Contour& from);

    inline Contour& operator=(const Contour& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Contour(Contour&& from) noexcept : Contour() { *this = ::std::move(from); }

    inline Contour& operator=(Contour&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Contour& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Contour* internal_default_instance()
    {
        return reinterpret_cast< const Contour* >(&_Contour_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 10;

    void Swap(Contour* other);
    friend void swap(Contour& a, Contour& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Contour* New() const final { return CreateMaybeMessage< Contour >(NULL); }

    Contour* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Contour >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Contour& from);
    void MergeFrom(const Contour& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Contour* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .calmcar.proto.Point2i point = 1;
    int point_size() const;
    void clear_point();
    static const int kPointFieldNumber = 1;
    ::calmcar::proto::Point2i* mutable_point(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point2i >* mutable_point();
    const ::calmcar::proto::Point2i& point(int index) const;
    ::calmcar::proto::Point2i* add_point();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point2i >& point() const;

    // @@protoc_insertion_point(class_scope:calmcar.proto.Contour)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point2i > point_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Segmentation
    : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Segmentation)
                                          */
{
  public:
    Segmentation();
    virtual ~Segmentation();

    Segmentation(const Segmentation& from);

    inline Segmentation& operator=(const Segmentation& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Segmentation(Segmentation&& from) noexcept : Segmentation() { *this = ::std::move(from); }

    inline Segmentation& operator=(Segmentation&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Segmentation& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Segmentation* internal_default_instance()
    {
        return reinterpret_cast< const Segmentation* >(&_Segmentation_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 11;

    void Swap(Segmentation* other);
    friend void swap(Segmentation& a, Segmentation& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Segmentation* New() const final { return CreateMaybeMessage< Segmentation >(NULL); }

    Segmentation* New(::google::protobuf::Arena* arena) const final
    {
        return CreateMaybeMessage< Segmentation >(arena);
    }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Segmentation& from);
    void MergeFrom(const Segmentation& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Segmentation* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated int64 mask = 3;
    int mask_size() const;
    void clear_mask();
    static const int kMaskFieldNumber = 3;
    ::google::protobuf::int64 mask(int index) const;
    void set_mask(int index, ::google::protobuf::int64 value);
    void add_mask(::google::protobuf::int64 value);
    const ::google::protobuf::RepeatedField<::google::protobuf::int64 >& mask() const;
    ::google::protobuf::RepeatedField<::google::protobuf::int64 >* mutable_mask();

    // repeated .calmcar.proto.Contour contour = 4;
    int contour_size() const;
    void clear_contour();
    static const int kContourFieldNumber = 4;
    ::calmcar::proto::Contour* mutable_contour(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Contour >* mutable_contour();
    const ::calmcar::proto::Contour& contour(int index) const;
    ::calmcar::proto::Contour* add_contour();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Contour >& contour() const;

    // repeated .calmcar.proto.Point freespace = 5;
    int freespace_size() const;
    void clear_freespace();
    static const int kFreespaceFieldNumber = 5;
    ::calmcar::proto::Point* mutable_freespace(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >* mutable_freespace();
    const ::calmcar::proto::Point& freespace(int index) const;
    ::calmcar::proto::Point* add_freespace();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >& freespace() const;

    // int64 height = 1;
    void clear_height();
    static const int kHeightFieldNumber = 1;
    ::google::protobuf::int64 height() const;
    void set_height(::google::protobuf::int64 value);

    // int64 width = 2;
    void clear_width();
    static const int kWidthFieldNumber = 2;
    ::google::protobuf::int64 width() const;
    void set_width(::google::protobuf::int64 value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Segmentation)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedField<::google::protobuf::int64 > mask_;
    mutable int _mask_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Contour > contour_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point > freespace_;
    ::google::protobuf::int64 height_;
    ::google::protobuf::int64 width_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:calmcar.proto.Frame)
                                                  */
{
  public:
    Frame();
    virtual ~Frame();

    Frame(const Frame& from);

    inline Frame& operator=(const Frame& from)
    {
        CopyFrom(from);
        return *this;
    }
#if LANG_CXX11
    Frame(Frame&& from) noexcept : Frame() { *this = ::std::move(from); }

    inline Frame& operator=(Frame&& from) noexcept
    {
        if (GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
            if (this != &from)
                InternalSwap(&from);
        }
        else
        {
            CopyFrom(from);
        }
        return *this;
    }
#endif
    static const ::google::protobuf::Descriptor* descriptor();
    static const Frame& default_instance();

    static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
    static inline const Frame* internal_default_instance()
    {
        return reinterpret_cast< const Frame* >(&_Frame_default_instance_);
    }
    static constexpr int kIndexInFileMessages = 12;

    void Swap(Frame* other);
    friend void swap(Frame& a, Frame& b) { a.Swap(&b); }

    // implements Message ----------------------------------------------

    inline Frame* New() const final { return CreateMaybeMessage< Frame >(NULL); }

    Frame* New(::google::protobuf::Arena* arena) const final { return CreateMaybeMessage< Frame >(arena); }
    void CopyFrom(const ::google::protobuf::Message& from) final;
    void MergeFrom(const ::google::protobuf::Message& from) final;
    void CopyFrom(const Frame& from);
    void MergeFrom(const Frame& from);
    void Clear() final;
    bool IsInitialized() const final;

    size_t ByteSizeLong() const final;
    bool MergePartialFromCodedStream(::google::protobuf::io::CodedInputStream* input) final;
    void SerializeWithCachedSizes(::google::protobuf::io::CodedOutputStream* output) const final;
    ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(bool deterministic,
                                                                       ::google::protobuf::uint8* target) const final;
    int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const final;
    void InternalSwap(Frame* other);

  private:
    inline ::google::protobuf::Arena* GetArenaNoVirtual() const { return NULL; }
    inline void* MaybeArenaPtr() const { return NULL; }

  public:
    ::google::protobuf::Metadata GetMetadata() const final;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // repeated .calmcar.proto.Can raw_can = 4;
    int raw_can_size() const;
    void clear_raw_can();
    static const int kRawCanFieldNumber = 4;
    ::calmcar::proto::Can* mutable_raw_can(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Can >* mutable_raw_can();
    const ::calmcar::proto::Can& raw_can(int index) const;
    ::calmcar::proto::Can* add_raw_can();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Can >& raw_can() const;

    // repeated .calmcar.proto.Object object = 6;
    int object_size() const;
    void clear_object();
    static const int kObjectFieldNumber = 6;
    ::calmcar::proto::Object* mutable_object(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Object >* mutable_object();
    const ::calmcar::proto::Object& object(int index) const;
    ::calmcar::proto::Object* add_object();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Object >& object() const;

    // repeated .calmcar.proto.Lane lane = 7;
    int lane_size() const;
    void clear_lane();
    static const int kLaneFieldNumber = 7;
    ::calmcar::proto::Lane* mutable_lane(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Lane >* mutable_lane();
    const ::calmcar::proto::Lane& lane(int index) const;
    ::calmcar::proto::Lane* add_lane();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Lane >& lane() const;

    // repeated .calmcar.proto.Point camera_position = 19;
    int camera_position_size() const;
    void clear_camera_position();
    static const int kCameraPositionFieldNumber = 19;
    ::calmcar::proto::Point* mutable_camera_position(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >* mutable_camera_position();
    const ::calmcar::proto::Point& camera_position(int index) const;
    ::calmcar::proto::Point* add_camera_position();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >& camera_position() const;

    // repeated .calmcar.proto.Point lane_boundary = 20;
    int lane_boundary_size() const;
    void clear_lane_boundary();
    static const int kLaneBoundaryFieldNumber = 20;
    ::calmcar::proto::Point* mutable_lane_boundary(int index);
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >* mutable_lane_boundary();
    const ::calmcar::proto::Point& lane_boundary(int index) const;
    ::calmcar::proto::Point* add_lane_boundary();
    const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >& lane_boundary() const;

    // .calmcar.proto.Header header = 1;
    bool has_header() const;
    void clear_header();
    static const int kHeaderFieldNumber = 1;

  private:
    const ::calmcar::proto::Header& _internal_header() const;

  public:
    const ::calmcar::proto::Header& header() const;
    ::calmcar::proto::Header* release_header();
    ::calmcar::proto::Header* mutable_header();
    void set_allocated_header(::calmcar::proto::Header* header);

    // .calmcar.proto.Image raw_image = 3;
    bool has_raw_image() const;
    void clear_raw_image();
    static const int kRawImageFieldNumber = 3;

  private:
    const ::calmcar::proto::Image& _internal_raw_image() const;

  public:
    const ::calmcar::proto::Image& raw_image() const;
    ::calmcar::proto::Image* release_raw_image();
    ::calmcar::proto::Image* mutable_raw_image();
    void set_allocated_raw_image(::calmcar::proto::Image* raw_image);

    // .calmcar.proto.Gps gps = 5;
    bool has_gps() const;
    void clear_gps();
    static const int kGpsFieldNumber = 5;

  private:
    const ::calmcar::proto::Gps& _internal_gps() const;

  public:
    const ::calmcar::proto::Gps& gps() const;
    ::calmcar::proto::Gps* release_gps();
    ::calmcar::proto::Gps* mutable_gps();
    void set_allocated_gps(::calmcar::proto::Gps* gps);

    // .calmcar.proto.Segmentation segmentation = 14;
    bool has_segmentation() const;
    void clear_segmentation();
    static const int kSegmentationFieldNumber = 14;

  private:
    const ::calmcar::proto::Segmentation& _internal_segmentation() const;

  public:
    const ::calmcar::proto::Segmentation& segmentation() const;
    ::calmcar::proto::Segmentation* release_segmentation();
    ::calmcar::proto::Segmentation* mutable_segmentation();
    void set_allocated_segmentation(::calmcar::proto::Segmentation* segmentation);

    // int64 id = 2;
    void clear_id();
    static const int kIdFieldNumber = 2;
    ::google::protobuf::int64 id() const;
    void set_id(::google::protobuf::int64 value);

    // int64 cipv_id = 8;
    void clear_cipv_id();
    static const int kCipvIdFieldNumber = 8;
    ::google::protobuf::int64 cipv_id() const;
    void set_cipv_id(::google::protobuf::int64 value);

    // int64 ldw_status = 9;
    void clear_ldw_status();
    static const int kLdwStatusFieldNumber = 9;
    ::google::protobuf::int64 ldw_status() const;
    void set_ldw_status(::google::protobuf::int64 value);

    // int64 fcw_status = 10;
    void clear_fcw_status();
    static const int kFcwStatusFieldNumber = 10;
    ::google::protobuf::int64 fcw_status() const;
    void set_fcw_status(::google::protobuf::int64 value);

    // int64 pcw_status = 11;
    void clear_pcw_status();
    static const int kPcwStatusFieldNumber = 11;
    ::google::protobuf::int64 pcw_status() const;
    void set_pcw_status(::google::protobuf::int64 value);

    // int64 asw_status = 12;
    void clear_asw_status();
    static const int kAswStatusFieldNumber = 12;
    ::google::protobuf::int64 asw_status() const;
    void set_asw_status(::google::protobuf::int64 value);

    // int64 bsd_status = 13;
    void clear_bsd_status();
    static const int kBsdStatusFieldNumber = 13;
    ::google::protobuf::int64 bsd_status() const;
    void set_bsd_status(::google::protobuf::int64 value);

    // int64 lane_number = 15;
    void clear_lane_number();
    static const int kLaneNumberFieldNumber = 15;
    ::google::protobuf::int64 lane_number() const;
    void set_lane_number(::google::protobuf::int64 value);

    // double ttlc = 17;
    void clear_ttlc();
    static const int kTtlcFieldNumber = 17;
    double ttlc() const;
    void set_ttlc(double value);

    // .calmcar.proto.RoadType road_type = 16;
    void clear_road_type();
    static const int kRoadTypeFieldNumber = 16;
    ::calmcar::proto::RoadType road_type() const;
    void set_road_type(::calmcar::proto::RoadType value);

    // .calmcar.proto.LeftRightIndication left_right_indication = 18;
    void clear_left_right_indication();
    static const int kLeftRightIndicationFieldNumber = 18;
    ::calmcar::proto::LeftRightIndication left_right_indication() const;
    void set_left_right_indication(::calmcar::proto::LeftRightIndication value);

    // int64 timestamp = 21;
    void clear_timestamp();
    static const int kTimestampFieldNumber = 21;
    ::google::protobuf::int64 timestamp() const;
    void set_timestamp(::google::protobuf::int64 value);

    // @@protoc_insertion_point(class_scope:calmcar.proto.Frame)
  private:
    ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Can > raw_can_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Object > object_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Lane > lane_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point > camera_position_;
    ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point > lane_boundary_;
    ::calmcar::proto::Header* header_;
    ::calmcar::proto::Image* raw_image_;
    ::calmcar::proto::Gps* gps_;
    ::calmcar::proto::Segmentation* segmentation_;
    ::google::protobuf::int64 id_;
    ::google::protobuf::int64 cipv_id_;
    ::google::protobuf::int64 ldw_status_;
    ::google::protobuf::int64 fcw_status_;
    ::google::protobuf::int64 pcw_status_;
    ::google::protobuf::int64 asw_status_;
    ::google::protobuf::int64 bsd_status_;
    ::google::protobuf::int64 lane_number_;
    double ttlc_;
    int road_type_;
    int left_right_indication_;
    ::google::protobuf::int64 timestamp_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    friend struct ::protobuf_calmcar_2eproto::TableStruct;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double x = 1;
inline void Point::clear_x()
{
    x_ = 0;
}
inline double Point::x() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Point.x)
    return x_;
}
inline void Point::set_x(double value)
{
    x_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Point.x)
}

// double y = 2;
inline void Point::clear_y()
{
    y_ = 0;
}
inline double Point::y() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Point.y)
    return y_;
}
inline void Point::set_y(double value)
{
    y_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Point.y)
}

// double z = 3;
inline void Point::clear_z()
{
    z_ = 0;
}
inline double Point::z() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Point.z)
    return z_;
}
inline void Point::set_z(double value)
{
    z_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Point.z)
}

// -------------------------------------------------------------------

// Point2i

// int64 x = 1;
inline void Point2i::clear_x()
{
    x_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Point2i::x() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Point2i.x)
    return x_;
}
inline void Point2i::set_x(::google::protobuf::int64 value)
{
    x_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Point2i.x)
}

// int64 y = 2;
inline void Point2i::clear_y()
{
    y_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Point2i::y() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Point2i.y)
    return y_;
}
inline void Point2i::set_y(::google::protobuf::int64 value)
{
    y_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Point2i.y)
}

// -------------------------------------------------------------------

// Rect

// double x = 1;
inline void Rect::clear_x()
{
    x_ = 0;
}
inline double Rect::x() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Rect.x)
    return x_;
}
inline void Rect::set_x(double value)
{
    x_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Rect.x)
}

// double y = 2;
inline void Rect::clear_y()
{
    y_ = 0;
}
inline double Rect::y() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Rect.y)
    return y_;
}
inline void Rect::set_y(double value)
{
    y_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Rect.y)
}

// double width = 3;
inline void Rect::clear_width()
{
    width_ = 0;
}
inline double Rect::width() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Rect.width)
    return width_;
}
inline void Rect::set_width(double value)
{
    width_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Rect.width)
}

// double height = 4;
inline void Rect::clear_height()
{
    height_ = 0;
}
inline double Rect::height() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Rect.height)
    return height_;
}
inline void Rect::set_height(double value)
{
    height_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Rect.height)
}

// -------------------------------------------------------------------

// ImageInfo

// int64 height = 1;
inline void ImageInfo::clear_height()
{
    height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ImageInfo::height() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.ImageInfo.height)
    return height_;
}
inline void ImageInfo::set_height(::google::protobuf::int64 value)
{
    height_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.ImageInfo.height)
}

// int64 width = 2;
inline void ImageInfo::clear_width()
{
    width_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ImageInfo::width() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.ImageInfo.width)
    return width_;
}
inline void ImageInfo::set_width(::google::protobuf::int64 value)
{
    width_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.ImageInfo.width)
}

// .calmcar.proto.ImageInfo.PixelFormat pixel_format = 3;
inline void ImageInfo::clear_pixel_format()
{
    pixel_format_ = 0;
}
inline ::calmcar::proto::ImageInfo_PixelFormat ImageInfo::pixel_format() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.ImageInfo.pixel_format)
    return static_cast<::calmcar::proto::ImageInfo_PixelFormat >(pixel_format_);
}
inline void ImageInfo::set_pixel_format(::calmcar::proto::ImageInfo_PixelFormat value)
{
    pixel_format_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.ImageInfo.pixel_format)
}

// bytes intrinsic = 4;
inline void ImageInfo::clear_intrinsic()
{
    intrinsic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageInfo::intrinsic() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.ImageInfo.intrinsic)
    return intrinsic_.GetNoArena();
}
inline void ImageInfo::set_intrinsic(const ::std::string& value)
{
    intrinsic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.ImageInfo.intrinsic)
}
#if LANG_CXX11
inline void ImageInfo::set_intrinsic(::std::string&& value)
{
    intrinsic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.ImageInfo.intrinsic)
}
#endif
inline void ImageInfo::set_intrinsic(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    intrinsic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.ImageInfo.intrinsic)
}
inline void ImageInfo::set_intrinsic(const void* value, size_t size)
{
    intrinsic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.ImageInfo.intrinsic)
}
inline ::std::string* ImageInfo::mutable_intrinsic()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.ImageInfo.intrinsic)
    return intrinsic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageInfo::release_intrinsic()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.ImageInfo.intrinsic)

    return intrinsic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageInfo::set_allocated_intrinsic(::std::string* intrinsic)
{
    if (intrinsic != NULL)
    {
    }
    else
    {
    }
    intrinsic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), intrinsic);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.ImageInfo.intrinsic)
}

// bytes extrinsic = 5;
inline void ImageInfo::clear_extrinsic()
{
    extrinsic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ImageInfo::extrinsic() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.ImageInfo.extrinsic)
    return extrinsic_.GetNoArena();
}
inline void ImageInfo::set_extrinsic(const ::std::string& value)
{
    extrinsic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.ImageInfo.extrinsic)
}
#if LANG_CXX11
inline void ImageInfo::set_extrinsic(::std::string&& value)
{
    extrinsic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.ImageInfo.extrinsic)
}
#endif
inline void ImageInfo::set_extrinsic(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    extrinsic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.ImageInfo.extrinsic)
}
inline void ImageInfo::set_extrinsic(const void* value, size_t size)
{
    extrinsic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                          ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.ImageInfo.extrinsic)
}
inline ::std::string* ImageInfo::mutable_extrinsic()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.ImageInfo.extrinsic)
    return extrinsic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageInfo::release_extrinsic()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.ImageInfo.extrinsic)

    return extrinsic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageInfo::set_allocated_extrinsic(::std::string* extrinsic)
{
    if (extrinsic != NULL)
    {
    }
    else
    {
    }
    extrinsic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extrinsic);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.ImageInfo.extrinsic)
}

// -------------------------------------------------------------------

// Image

// bytes data = 1;
inline void Image::clear_data()
{
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::data() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Image.data)
    return data_.GetNoArena();
}
inline void Image::set_data(const ::std::string& value)
{
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Image.data)
}
#if LANG_CXX11
inline void Image::set_data(::std::string&& value)
{
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Image.data)
}
#endif
inline void Image::set_data(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Image.data)
}
inline void Image::set_data(const void* value, size_t size)
{
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Image.data)
}
inline ::std::string* Image::mutable_data()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Image.data)
    return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_data()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Image.data)

    return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_data(::std::string* data)
{
    if (data != NULL)
    {
    }
    else
    {
    }
    data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Image.data)
}

// int64 timestamp = 2;
inline void Image::clear_timestamp()
{
    timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Image::timestamp() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Image.timestamp)
    return timestamp_;
}
inline void Image::set_timestamp(::google::protobuf::int64 value)
{
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Image.timestamp)
}

// -------------------------------------------------------------------

// Can

// int64 id = 1;
inline void Can::clear_id()
{
    id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Can::id() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Can.id)
    return id_;
}
inline void Can::set_id(::google::protobuf::int64 value)
{
    id_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Can.id)
}

// int64 dlc = 2;
inline void Can::clear_dlc()
{
    dlc_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Can::dlc() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Can.dlc)
    return dlc_;
}
inline void Can::set_dlc(::google::protobuf::int64 value)
{
    dlc_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Can.dlc)
}

// bytes data = 3;
inline void Can::clear_data()
{
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Can::data() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Can.data)
    return data_.GetNoArena();
}
inline void Can::set_data(const ::std::string& value)
{
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Can.data)
}
#if LANG_CXX11
inline void Can::set_data(::std::string&& value)
{
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Can.data)
}
#endif
inline void Can::set_data(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Can.data)
}
inline void Can::set_data(const void* value, size_t size)
{
    data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                     ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Can.data)
}
inline ::std::string* Can::mutable_data()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Can.data)
    return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Can::release_data()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Can.data)

    return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Can::set_allocated_data(::std::string* data)
{
    if (data != NULL)
    {
    }
    else
    {
    }
    data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Can.data)
}

// int64 timestamp = 4;
inline void Can::clear_timestamp()
{
    timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Can::timestamp() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Can.timestamp)
    return timestamp_;
}
inline void Can::set_timestamp(::google::protobuf::int64 value)
{
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Can.timestamp)
}

// int32 channel = 5;
inline void Can::clear_channel()
{
    channel_ = 0;
}
inline ::google::protobuf::int32 Can::channel() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Can.channel)
    return channel_;
}
inline void Can::set_channel(::google::protobuf::int32 value)
{
    channel_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Can.channel)
}

// -------------------------------------------------------------------

// Gps

// double latitude = 1;
inline void Gps::clear_latitude()
{
    latitude_ = 0;
}
inline double Gps::latitude() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.latitude)
    return latitude_;
}
inline void Gps::set_latitude(double value)
{
    latitude_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.latitude)
}

// double longitude = 2;
inline void Gps::clear_longitude()
{
    longitude_ = 0;
}
inline double Gps::longitude() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.longitude)
    return longitude_;
}
inline void Gps::set_longitude(double value)
{
    longitude_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.longitude)
}

// double height = 3;
inline void Gps::clear_height()
{
    height_ = 0;
}
inline double Gps::height() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.height)
    return height_;
}
inline void Gps::set_height(double value)
{
    height_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.height)
}

// double angle = 4;
inline void Gps::clear_angle()
{
    angle_ = 0;
}
inline double Gps::angle() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.angle)
    return angle_;
}
inline void Gps::set_angle(double value)
{
    angle_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.angle)
}

// double speed = 5;
inline void Gps::clear_speed()
{
    speed_ = 0;
}
inline double Gps::speed() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.speed)
    return speed_;
}
inline void Gps::set_speed(double value)
{
    speed_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.speed)
}

// int64 hour = 6;
inline void Gps::clear_hour()
{
    hour_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::hour() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.hour)
    return hour_;
}
inline void Gps::set_hour(::google::protobuf::int64 value)
{
    hour_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.hour)
}

// int64 minute = 7;
inline void Gps::clear_minute()
{
    minute_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::minute() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.minute)
    return minute_;
}
inline void Gps::set_minute(::google::protobuf::int64 value)
{
    minute_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.minute)
}

// int64 second = 8;
inline void Gps::clear_second()
{
    second_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::second() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.second)
    return second_;
}
inline void Gps::set_second(::google::protobuf::int64 value)
{
    second_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.second)
}

// int64 millisecond = 9;
inline void Gps::clear_millisecond()
{
    millisecond_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::millisecond() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.millisecond)
    return millisecond_;
}
inline void Gps::set_millisecond(::google::protobuf::int64 value)
{
    millisecond_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.millisecond)
}

// int64 day = 10;
inline void Gps::clear_day()
{
    day_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::day() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.day)
    return day_;
}
inline void Gps::set_day(::google::protobuf::int64 value)
{
    day_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.day)
}

// int64 month = 11;
inline void Gps::clear_month()
{
    month_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::month() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.month)
    return month_;
}
inline void Gps::set_month(::google::protobuf::int64 value)
{
    month_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.month)
}

// int64 year = 12;
inline void Gps::clear_year()
{
    year_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::year() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.year)
    return year_;
}
inline void Gps::set_year(::google::protobuf::int64 value)
{
    year_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.year)
}

// double course = 13;
inline void Gps::clear_course()
{
    course_ = 0;
}
inline double Gps::course() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.course)
    return course_;
}
inline void Gps::set_course(double value)
{
    course_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.course)
}

// int64 satellites = 14;
inline void Gps::clear_satellites()
{
    satellites_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::satellites() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.satellites)
    return satellites_;
}
inline void Gps::set_satellites(::google::protobuf::int64 value)
{
    satellites_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.satellites)
}

// double ground_height = 15;
inline void Gps::clear_ground_height()
{
    ground_height_ = 0;
}
inline double Gps::ground_height() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.ground_height)
    return ground_height_;
}
inline void Gps::set_ground_height(double value)
{
    ground_height_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.ground_height)
}

// int64 unit = 16;
inline void Gps::clear_unit()
{
    unit_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Gps::unit() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Gps.unit)
    return unit_;
}
inline void Gps::set_unit(::google::protobuf::int64 value)
{
    unit_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Gps.unit)
}

// -------------------------------------------------------------------

// Object

// .calmcar.proto.Object.SensorType sensor_type = 1;
inline void Object::clear_sensor_type()
{
    sensor_type_ = 0;
}
inline ::calmcar::proto::Object_SensorType Object::sensor_type() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.sensor_type)
    return static_cast<::calmcar::proto::Object_SensorType >(sensor_type_);
}
inline void Object::set_sensor_type(::calmcar::proto::Object_SensorType value)
{
    sensor_type_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.sensor_type)
}

// int64 id = 2;
inline void Object::clear_id()
{
    id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::id() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.id)
    return id_;
}
inline void Object::set_id(::google::protobuf::int64 value)
{
    id_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.id)
}

// int64 class_ = 3;
inline void Object::clear_class_()
{
    class__ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::class_() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.class_)
    return class__;
}
inline void Object::set_class_(::google::protobuf::int64 value)
{
    class__ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.class_)
}

// string class_name = 4;
inline void Object::clear_class_name()
{
    class_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::class_name() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.class_name)
    return class_name_.GetNoArena();
}
inline void Object::set_class_name(const ::std::string& value)
{
    class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.class_name)
}
#if LANG_CXX11
inline void Object::set_class_name(::std::string&& value)
{
    class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Object.class_name)
}
#endif
inline void Object::set_class_name(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Object.class_name)
}
inline void Object::set_class_name(const char* value, size_t size)
{
    class_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                           ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Object.class_name)
}
inline ::std::string* Object::mutable_class_name()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Object.class_name)
    return class_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_class_name()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Object.class_name)

    return class_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_class_name(::std::string* class_name)
{
    if (class_name != NULL)
    {
    }
    else
    {
    }
    class_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_name);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Object.class_name)
}

// int64 subclass = 5;
inline void Object::clear_subclass()
{
    subclass_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::subclass() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.subclass)
    return subclass_;
}
inline void Object::set_subclass(::google::protobuf::int64 value)
{
    subclass_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.subclass)
}

// string subclass_name = 6;
inline void Object::clear_subclass_name()
{
    subclass_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object::subclass_name() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.subclass_name)
    return subclass_name_.GetNoArena();
}
inline void Object::set_subclass_name(const ::std::string& value)
{
    subclass_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.subclass_name)
}
#if LANG_CXX11
inline void Object::set_subclass_name(::std::string&& value)
{
    subclass_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Object.subclass_name)
}
#endif
inline void Object::set_subclass_name(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    subclass_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Object.subclass_name)
}
inline void Object::set_subclass_name(const char* value, size_t size)
{
    subclass_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                              ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Object.subclass_name)
}
inline ::std::string* Object::mutable_subclass_name()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Object.subclass_name)
    return subclass_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object::release_subclass_name()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Object.subclass_name)

    return subclass_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object::set_allocated_subclass_name(::std::string* subclass_name)
{
    if (subclass_name != NULL)
    {
    }
    else
    {
    }
    subclass_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subclass_name);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Object.subclass_name)
}

// double confidence = 7;
inline void Object::clear_confidence()
{
    confidence_ = 0;
}
inline double Object::confidence() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.confidence)
    return confidence_;
}
inline void Object::set_confidence(double value)
{
    confidence_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.confidence)
}

// .calmcar.proto.Rect bbox = 8;
inline bool Object::has_bbox() const
{
    return this != internal_default_instance() && bbox_ != NULL;
}
inline void Object::clear_bbox()
{
    if (GetArenaNoVirtual() == NULL && bbox_ != NULL)
    {
        delete bbox_;
    }
    bbox_ = NULL;
}
inline const ::calmcar::proto::Rect& Object::_internal_bbox() const
{
    return *bbox_;
}
inline const ::calmcar::proto::Rect& Object::bbox() const
{
    const ::calmcar::proto::Rect* p = bbox_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.bbox)
    return p != NULL ? *p
                     : *reinterpret_cast< const ::calmcar::proto::Rect* >(&::calmcar::proto::_Rect_default_instance_);
}
inline ::calmcar::proto::Rect* Object::release_bbox()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Object.bbox)

    ::calmcar::proto::Rect* temp = bbox_;
    bbox_ = NULL;
    return temp;
}
inline ::calmcar::proto::Rect* Object::mutable_bbox()
{
    if (bbox_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Rect >(GetArenaNoVirtual());
        bbox_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Object.bbox)
    return bbox_;
}
inline void Object::set_allocated_bbox(::calmcar::proto::Rect* bbox)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete bbox_;
    }
    if (bbox)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            bbox = ::google::protobuf::internal::GetOwnedMessage(message_arena, bbox, submessage_arena);
        }
    }
    else
    {
    }
    bbox_ = bbox;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Object.bbox)
}

// int64 life_time = 9;
inline void Object::clear_life_time()
{
    life_time_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::life_time() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.life_time)
    return life_time_;
}
inline void Object::set_life_time(::google::protobuf::int64 value)
{
    life_time_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.life_time)
}

// int64 timestamp = 10;
inline void Object::clear_timestamp()
{
    timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Object::timestamp() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.timestamp)
    return timestamp_;
}
inline void Object::set_timestamp(::google::protobuf::int64 value)
{
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.timestamp)
}

// double height = 11;
inline void Object::clear_height()
{
    height_ = 0;
}
inline double Object::height() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.height)
    return height_;
}
inline void Object::set_height(double value)
{
    height_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.height)
}

// double width = 12;
inline void Object::clear_width()
{
    width_ = 0;
}
inline double Object::width() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.width)
    return width_;
}
inline void Object::set_width(double value)
{
    width_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.width)
}

// double length = 13;
inline void Object::clear_length()
{
    length_ = 0;
}
inline double Object::length() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.length)
    return length_;
}
inline void Object::set_length(double value)
{
    length_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.length)
}

// .calmcar.proto.Point distance = 14;
inline bool Object::has_distance() const
{
    return this != internal_default_instance() && distance_ != NULL;
}
inline void Object::clear_distance()
{
    if (GetArenaNoVirtual() == NULL && distance_ != NULL)
    {
        delete distance_;
    }
    distance_ = NULL;
}
inline const ::calmcar::proto::Point& Object::_internal_distance() const
{
    return *distance_;
}
inline const ::calmcar::proto::Point& Object::distance() const
{
    const ::calmcar::proto::Point* p = distance_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.distance)
    return p != NULL ? *p
                     : *reinterpret_cast< const ::calmcar::proto::Point* >(&::calmcar::proto::_Point_default_instance_);
}
inline ::calmcar::proto::Point* Object::release_distance()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Object.distance)

    ::calmcar::proto::Point* temp = distance_;
    distance_ = NULL;
    return temp;
}
inline ::calmcar::proto::Point* Object::mutable_distance()
{
    if (distance_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Point >(GetArenaNoVirtual());
        distance_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Object.distance)
    return distance_;
}
inline void Object::set_allocated_distance(::calmcar::proto::Point* distance)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete distance_;
    }
    if (distance)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            distance = ::google::protobuf::internal::GetOwnedMessage(message_arena, distance, submessage_arena);
        }
    }
    else
    {
    }
    distance_ = distance;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Object.distance)
}

// .calmcar.proto.Point relative_velocity = 15;
inline bool Object::has_relative_velocity() const
{
    return this != internal_default_instance() && relative_velocity_ != NULL;
}
inline void Object::clear_relative_velocity()
{
    if (GetArenaNoVirtual() == NULL && relative_velocity_ != NULL)
    {
        delete relative_velocity_;
    }
    relative_velocity_ = NULL;
}
inline const ::calmcar::proto::Point& Object::_internal_relative_velocity() const
{
    return *relative_velocity_;
}
inline const ::calmcar::proto::Point& Object::relative_velocity() const
{
    const ::calmcar::proto::Point* p = relative_velocity_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.relative_velocity)
    return p != NULL ? *p
                     : *reinterpret_cast< const ::calmcar::proto::Point* >(&::calmcar::proto::_Point_default_instance_);
}
inline ::calmcar::proto::Point* Object::release_relative_velocity()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Object.relative_velocity)

    ::calmcar::proto::Point* temp = relative_velocity_;
    relative_velocity_ = NULL;
    return temp;
}
inline ::calmcar::proto::Point* Object::mutable_relative_velocity()
{
    if (relative_velocity_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Point >(GetArenaNoVirtual());
        relative_velocity_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Object.relative_velocity)
    return relative_velocity_;
}
inline void Object::set_allocated_relative_velocity(::calmcar::proto::Point* relative_velocity)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete relative_velocity_;
    }
    if (relative_velocity)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            relative_velocity =
                ::google::protobuf::internal::GetOwnedMessage(message_arena, relative_velocity, submessage_arena);
        }
    }
    else
    {
    }
    relative_velocity_ = relative_velocity;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Object.relative_velocity)
}

// .calmcar.proto.Point relative_acceleration = 16;
inline bool Object::has_relative_acceleration() const
{
    return this != internal_default_instance() && relative_acceleration_ != NULL;
}
inline void Object::clear_relative_acceleration()
{
    if (GetArenaNoVirtual() == NULL && relative_acceleration_ != NULL)
    {
        delete relative_acceleration_;
    }
    relative_acceleration_ = NULL;
}
inline const ::calmcar::proto::Point& Object::_internal_relative_acceleration() const
{
    return *relative_acceleration_;
}
inline const ::calmcar::proto::Point& Object::relative_acceleration() const
{
    const ::calmcar::proto::Point* p = relative_acceleration_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.relative_acceleration)
    return p != NULL ? *p
                     : *reinterpret_cast< const ::calmcar::proto::Point* >(&::calmcar::proto::_Point_default_instance_);
}
inline ::calmcar::proto::Point* Object::release_relative_acceleration()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Object.relative_acceleration)

    ::calmcar::proto::Point* temp = relative_acceleration_;
    relative_acceleration_ = NULL;
    return temp;
}
inline ::calmcar::proto::Point* Object::mutable_relative_acceleration()
{
    if (relative_acceleration_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Point >(GetArenaNoVirtual());
        relative_acceleration_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Object.relative_acceleration)
    return relative_acceleration_;
}
inline void Object::set_allocated_relative_acceleration(::calmcar::proto::Point* relative_acceleration)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete relative_acceleration_;
    }
    if (relative_acceleration)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            relative_acceleration =
                ::google::protobuf::internal::GetOwnedMessage(message_arena, relative_acceleration, submessage_arena);
        }
    }
    else
    {
    }
    relative_acceleration_ = relative_acceleration;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Object.relative_acceleration)
}

// double ttc = 17;
inline void Object::clear_ttc()
{
    ttc_ = 0;
}
inline double Object::ttc() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.ttc)
    return ttc_;
}
inline void Object::set_ttc(double value)
{
    ttc_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.ttc)
}

// double thw = 18;
inline void Object::clear_thw()
{
    thw_ = 0;
}
inline double Object::thw() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.thw)
    return thw_;
}
inline void Object::set_thw(double value)
{
    thw_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.thw)
}

// double angle_left = 19;
inline void Object::clear_angle_left()
{
    angle_left_ = 0;
}
inline double Object::angle_left() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.angle_left)
    return angle_left_;
}
inline void Object::set_angle_left(double value)
{
    angle_left_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.angle_left)
}

// double angle_right = 20;
inline void Object::clear_angle_right()
{
    angle_right_ = 0;
}
inline double Object::angle_right() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.angle_right)
    return angle_right_;
}
inline void Object::set_angle_right(double value)
{
    angle_right_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.angle_right)
}

// double yaw_angle = 21;
inline void Object::clear_yaw_angle()
{
    yaw_angle_ = 0;
}
inline double Object::yaw_angle() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.yaw_angle)
    return yaw_angle_;
}
inline void Object::set_yaw_angle(double value)
{
    yaw_angle_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.yaw_angle)
}

// .calmcar.proto.Object.LaneAssignment lane_assignment = 22;
inline void Object::clear_lane_assignment()
{
    lane_assignment_ = 0;
}
inline ::calmcar::proto::Object_LaneAssignment Object::lane_assignment() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.lane_assignment)
    return static_cast<::calmcar::proto::Object_LaneAssignment >(lane_assignment_);
}
inline void Object::set_lane_assignment(::calmcar::proto::Object_LaneAssignment value)
{
    lane_assignment_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.lane_assignment)
}

// .calmcar.proto.Object.MotionStatus motion_status = 23;
inline void Object::clear_motion_status()
{
    motion_status_ = 0;
}
inline ::calmcar::proto::Object_MotionStatus Object::motion_status() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.motion_status)
    return static_cast<::calmcar::proto::Object_MotionStatus >(motion_status_);
}
inline void Object::set_motion_status(::calmcar::proto::Object_MotionStatus value)
{
    motion_status_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.motion_status)
}

// .calmcar.proto.Object.CutInCutOut cutin_cutout = 24;
inline void Object::clear_cutin_cutout()
{
    cutin_cutout_ = 0;
}
inline ::calmcar::proto::Object_CutInCutOut Object::cutin_cutout() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Object.cutin_cutout)
    return static_cast<::calmcar::proto::Object_CutInCutOut >(cutin_cutout_);
}
inline void Object::set_cutin_cutout(::calmcar::proto::Object_CutInCutOut value)
{
    cutin_cutout_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Object.cutin_cutout)
}

// -------------------------------------------------------------------

// Lane

// .calmcar.proto.Lane.CoordinateType coordinate_type = 1;
inline void Lane::clear_coordinate_type()
{
    coordinate_type_ = 0;
}
inline ::calmcar::proto::Lane_CoordinateType Lane::coordinate_type() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.coordinate_type)
    return static_cast<::calmcar::proto::Lane_CoordinateType >(coordinate_type_);
}
inline void Lane::set_coordinate_type(::calmcar::proto::Lane_CoordinateType value)
{
    coordinate_type_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.coordinate_type)
}

// double C0 = 2;
inline void Lane::clear_c0()
{
    c0_ = 0;
}
inline double Lane::c0() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.C0)
    return c0_;
}
inline void Lane::set_c0(double value)
{
    c0_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.C0)
}

// double C1 = 3;
inline void Lane::clear_c1()
{
    c1_ = 0;
}
inline double Lane::c1() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.C1)
    return c1_;
}
inline void Lane::set_c1(double value)
{
    c1_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.C1)
}

// double C2 = 4;
inline void Lane::clear_c2()
{
    c2_ = 0;
}
inline double Lane::c2() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.C2)
    return c2_;
}
inline void Lane::set_c2(double value)
{
    c2_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.C2)
}

// double C3 = 5;
inline void Lane::clear_c3()
{
    c3_ = 0;
}
inline double Lane::c3() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.C3)
    return c3_;
}
inline void Lane::set_c3(double value)
{
    c3_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.C3)
}

// int64 index = 6;
inline void Lane::clear_index()
{
    index_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lane::index() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.index)
    return index_;
}
inline void Lane::set_index(::google::protobuf::int64 value)
{
    index_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.index)
}

// int64 quality = 7;
inline void Lane::clear_quality()
{
    quality_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Lane::quality() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.quality)
    return quality_;
}
inline void Lane::set_quality(::google::protobuf::int64 value)
{
    quality_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.quality)
}

// .calmcar.proto.Lane.LineType line_type = 8;
inline void Lane::clear_line_type()
{
    line_type_ = 0;
}
inline ::calmcar::proto::Lane_LineType Lane::line_type() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.line_type)
    return static_cast<::calmcar::proto::Lane_LineType >(line_type_);
}
inline void Lane::set_line_type(::calmcar::proto::Lane_LineType value)
{
    line_type_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.line_type)
}

// .calmcar.proto.Lane.LineColor line_color = 9;
inline void Lane::clear_line_color()
{
    line_color_ = 0;
}
inline ::calmcar::proto::Lane_LineColor Lane::line_color() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.line_color)
    return static_cast<::calmcar::proto::Lane_LineColor >(line_color_);
}
inline void Lane::set_line_color(::calmcar::proto::Lane_LineColor value)
{
    line_color_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.line_color)
}

// .calmcar.proto.Point start = 10;
inline bool Lane::has_start() const
{
    return this != internal_default_instance() && start_ != NULL;
}
inline void Lane::clear_start()
{
    if (GetArenaNoVirtual() == NULL && start_ != NULL)
    {
        delete start_;
    }
    start_ = NULL;
}
inline const ::calmcar::proto::Point& Lane::_internal_start() const
{
    return *start_;
}
inline const ::calmcar::proto::Point& Lane::start() const
{
    const ::calmcar::proto::Point* p = start_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.start)
    return p != NULL ? *p
                     : *reinterpret_cast< const ::calmcar::proto::Point* >(&::calmcar::proto::_Point_default_instance_);
}
inline ::calmcar::proto::Point* Lane::release_start()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Lane.start)

    ::calmcar::proto::Point* temp = start_;
    start_ = NULL;
    return temp;
}
inline ::calmcar::proto::Point* Lane::mutable_start()
{
    if (start_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Point >(GetArenaNoVirtual());
        start_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Lane.start)
    return start_;
}
inline void Lane::set_allocated_start(::calmcar::proto::Point* start)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete start_;
    }
    if (start)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            start = ::google::protobuf::internal::GetOwnedMessage(message_arena, start, submessage_arena);
        }
    }
    else
    {
    }
    start_ = start;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Lane.start)
}

// .calmcar.proto.Point end = 11;
inline bool Lane::has_end() const
{
    return this != internal_default_instance() && end_ != NULL;
}
inline void Lane::clear_end()
{
    if (GetArenaNoVirtual() == NULL && end_ != NULL)
    {
        delete end_;
    }
    end_ = NULL;
}
inline const ::calmcar::proto::Point& Lane::_internal_end() const
{
    return *end_;
}
inline const ::calmcar::proto::Point& Lane::end() const
{
    const ::calmcar::proto::Point* p = end_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.end)
    return p != NULL ? *p
                     : *reinterpret_cast< const ::calmcar::proto::Point* >(&::calmcar::proto::_Point_default_instance_);
}
inline ::calmcar::proto::Point* Lane::release_end()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Lane.end)

    ::calmcar::proto::Point* temp = end_;
    end_ = NULL;
    return temp;
}
inline ::calmcar::proto::Point* Lane::mutable_end()
{
    if (end_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Point >(GetArenaNoVirtual());
        end_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Lane.end)
    return end_;
}
inline void Lane::set_allocated_end(::calmcar::proto::Point* end)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete end_;
    }
    if (end)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            end = ::google::protobuf::internal::GetOwnedMessage(message_arena, end, submessage_arena);
        }
    }
    else
    {
    }
    end_ = end;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Lane.end)
}

// double distance_to_host = 12;
inline void Lane::clear_distance_to_host()
{
    distance_to_host_ = 0;
}
inline double Lane::distance_to_host() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.distance_to_host)
    return distance_to_host_;
}
inline void Lane::set_distance_to_host(double value)
{
    distance_to_host_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.distance_to_host)
}

// repeated .calmcar.proto.Point image_points = 13;
inline int Lane::image_points_size() const
{
    return image_points_.size();
}
inline void Lane::clear_image_points()
{
    image_points_.Clear();
}
inline ::calmcar::proto::Point* Lane::mutable_image_points(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Lane.image_points)
    return image_points_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >* Lane::mutable_image_points()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Lane.image_points)
    return &image_points_;
}
inline const ::calmcar::proto::Point& Lane::image_points(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.image_points)
    return image_points_.Get(index);
}
inline ::calmcar::proto::Point* Lane::add_image_points()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Lane.image_points)
    return image_points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >& Lane::image_points() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Lane.image_points)
    return image_points_;
}

// double width = 14;
inline void Lane::clear_width()
{
    width_ = 0;
}
inline double Lane::width() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Lane.width)
    return width_;
}
inline void Lane::set_width(double value)
{
    width_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Lane.width)
}

// -------------------------------------------------------------------

// Header

// string pdaq_serial_number = 1;
inline void Header::clear_pdaq_serial_number()
{
    pdaq_serial_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::pdaq_serial_number() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Header.pdaq_serial_number)
    return pdaq_serial_number_.GetNoArena();
}
inline void Header::set_pdaq_serial_number(const ::std::string& value)
{
    pdaq_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Header.pdaq_serial_number)
}
#if LANG_CXX11
inline void Header::set_pdaq_serial_number(::std::string&& value)
{
    pdaq_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Header.pdaq_serial_number)
}
#endif
inline void Header::set_pdaq_serial_number(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    pdaq_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Header.pdaq_serial_number)
}
inline void Header::set_pdaq_serial_number(const char* value, size_t size)
{
    pdaq_serial_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                   ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Header.pdaq_serial_number)
}
inline ::std::string* Header::mutable_pdaq_serial_number()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Header.pdaq_serial_number)
    return pdaq_serial_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_pdaq_serial_number()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Header.pdaq_serial_number)

    return pdaq_serial_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_pdaq_serial_number(::std::string* pdaq_serial_number)
{
    if (pdaq_serial_number != NULL)
    {
    }
    else
    {
    }
    pdaq_serial_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                            pdaq_serial_number);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Header.pdaq_serial_number)
}

// string protocol_version = 2;
inline void Header::clear_protocol_version()
{
    protocol_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::protocol_version() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Header.protocol_version)
    return protocol_version_.GetNoArena();
}
inline void Header::set_protocol_version(const ::std::string& value)
{
    protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Header.protocol_version)
}
#if LANG_CXX11
inline void Header::set_protocol_version(::std::string&& value)
{
    protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Header.protocol_version)
}
#endif
inline void Header::set_protocol_version(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Header.protocol_version)
}
inline void Header::set_protocol_version(const char* value, size_t size)
{
    protocol_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                 ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Header.protocol_version)
}
inline ::std::string* Header::mutable_protocol_version()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Header.protocol_version)
    return protocol_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_protocol_version()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Header.protocol_version)

    return protocol_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_protocol_version(::std::string* protocol_version)
{
    if (protocol_version != NULL)
    {
    }
    else
    {
    }
    protocol_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                          protocol_version);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Header.protocol_version)
}

// string calmcar_version = 3;
inline void Header::clear_calmcar_version()
{
    calmcar_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::calmcar_version() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Header.calmcar_version)
    return calmcar_version_.GetNoArena();
}
inline void Header::set_calmcar_version(const ::std::string& value)
{
    calmcar_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Header.calmcar_version)
}
#if LANG_CXX11
inline void Header::set_calmcar_version(::std::string&& value)
{
    calmcar_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Header.calmcar_version)
}
#endif
inline void Header::set_calmcar_version(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    calmcar_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Header.calmcar_version)
}
inline void Header::set_calmcar_version(const char* value, size_t size)
{
    calmcar_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                                ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Header.calmcar_version)
}
inline ::std::string* Header::mutable_calmcar_version()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Header.calmcar_version)
    return calmcar_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_calmcar_version()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Header.calmcar_version)

    return calmcar_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_calmcar_version(::std::string* calmcar_version)
{
    if (calmcar_version != NULL)
    {
    }
    else
    {
    }
    calmcar_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calmcar_version);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Header.calmcar_version)
}

// string pdaq_version = 4;
inline void Header::clear_pdaq_version()
{
    pdaq_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::pdaq_version() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Header.pdaq_version)
    return pdaq_version_.GetNoArena();
}
inline void Header::set_pdaq_version(const ::std::string& value)
{
    pdaq_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Header.pdaq_version)
}
#if LANG_CXX11
inline void Header::set_pdaq_version(::std::string&& value)
{
    pdaq_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Header.pdaq_version)
}
#endif
inline void Header::set_pdaq_version(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    pdaq_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Header.pdaq_version)
}
inline void Header::set_pdaq_version(const char* value, size_t size)
{
    pdaq_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                             ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Header.pdaq_version)
}
inline ::std::string* Header::mutable_pdaq_version()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Header.pdaq_version)
    return pdaq_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_pdaq_version()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Header.pdaq_version)

    return pdaq_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_pdaq_version(::std::string* pdaq_version)
{
    if (pdaq_version != NULL)
    {
    }
    else
    {
    }
    pdaq_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pdaq_version);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Header.pdaq_version)
}

// .calmcar.proto.ImageInfo image_info = 5;
inline bool Header::has_image_info() const
{
    return this != internal_default_instance() && image_info_ != NULL;
}
inline void Header::clear_image_info()
{
    if (GetArenaNoVirtual() == NULL && image_info_ != NULL)
    {
        delete image_info_;
    }
    image_info_ = NULL;
}
inline const ::calmcar::proto::ImageInfo& Header::_internal_image_info() const
{
    return *image_info_;
}
inline const ::calmcar::proto::ImageInfo& Header::image_info() const
{
    const ::calmcar::proto::ImageInfo* p = image_info_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Header.image_info)
    return p != NULL ? *p : *reinterpret_cast< const ::calmcar::proto::ImageInfo* >(
                                &::calmcar::proto::_ImageInfo_default_instance_);
}
inline ::calmcar::proto::ImageInfo* Header::release_image_info()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Header.image_info)

    ::calmcar::proto::ImageInfo* temp = image_info_;
    image_info_ = NULL;
    return temp;
}
inline ::calmcar::proto::ImageInfo* Header::mutable_image_info()
{
    if (image_info_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::ImageInfo >(GetArenaNoVirtual());
        image_info_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Header.image_info)
    return image_info_;
}
inline void Header::set_allocated_image_info(::calmcar::proto::ImageInfo* image_info)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete image_info_;
    }
    if (image_info)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            image_info = ::google::protobuf::internal::GetOwnedMessage(message_arena, image_info, submessage_arena);
        }
    }
    else
    {
    }
    image_info_ = image_info;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Header.image_info)
}

// string car_type = 6;
inline void Header::clear_car_type()
{
    car_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::car_type() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Header.car_type)
    return car_type_.GetNoArena();
}
inline void Header::set_car_type(const ::std::string& value)
{
    car_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Header.car_type)
}
#if LANG_CXX11
inline void Header::set_car_type(::std::string&& value)
{
    car_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Header.car_type)
}
#endif
inline void Header::set_car_type(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    car_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Header.car_type)
}
inline void Header::set_car_type(const char* value, size_t size)
{
    car_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Header.car_type)
}
inline ::std::string* Header::mutable_car_type()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Header.car_type)
    return car_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_car_type()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Header.car_type)

    return car_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_car_type(::std::string* car_type)
{
    if (car_type != NULL)
    {
    }
    else
    {
    }
    car_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), car_type);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Header.car_type)
}

// bytes calmcar_config = 7;
inline void Header::clear_calmcar_config()
{
    calmcar_config_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::calmcar_config() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Header.calmcar_config)
    return calmcar_config_.GetNoArena();
}
inline void Header::set_calmcar_config(const ::std::string& value)
{
    calmcar_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Header.calmcar_config)
}
#if LANG_CXX11
inline void Header::set_calmcar_config(::std::string&& value)
{
    calmcar_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Header.calmcar_config)
}
#endif
inline void Header::set_calmcar_config(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    calmcar_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Header.calmcar_config)
}
inline void Header::set_calmcar_config(const void* value, size_t size)
{
    calmcar_config_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                               ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Header.calmcar_config)
}
inline ::std::string* Header::mutable_calmcar_config()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Header.calmcar_config)
    return calmcar_config_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_calmcar_config()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Header.calmcar_config)

    return calmcar_config_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_calmcar_config(::std::string* calmcar_config)
{
    if (calmcar_config != NULL)
    {
    }
    else
    {
    }
    calmcar_config_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), calmcar_config);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Header.calmcar_config)
}

// string run_mode = 8;
inline void Header::clear_run_mode()
{
    run_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Header::run_mode() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Header.run_mode)
    return run_mode_.GetNoArena();
}
inline void Header::set_run_mode(const ::std::string& value)
{
    run_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Header.run_mode)
}
#if LANG_CXX11
inline void Header::set_run_mode(::std::string&& value)
{
    run_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
    // @@protoc_insertion_point(field_set_rvalue:calmcar.proto.Header.run_mode)
}
#endif
inline void Header::set_run_mode(const char* value)
{
    GOOGLE_DCHECK(value != NULL);

    run_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
    // @@protoc_insertion_point(field_set_char:calmcar.proto.Header.run_mode)
}
inline void Header::set_run_mode(const char* value, size_t size)
{
    run_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
                         ::std::string(reinterpret_cast< const char* >(value), size));
    // @@protoc_insertion_point(field_set_pointer:calmcar.proto.Header.run_mode)
}
inline ::std::string* Header::mutable_run_mode()
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Header.run_mode)
    return run_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Header::release_run_mode()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Header.run_mode)

    return run_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Header::set_allocated_run_mode(::std::string* run_mode)
{
    if (run_mode != NULL)
    {
    }
    else
    {
    }
    run_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), run_mode);
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Header.run_mode)
}

// -------------------------------------------------------------------

// Contour

// repeated .calmcar.proto.Point2i point = 1;
inline int Contour::point_size() const
{
    return point_.size();
}
inline void Contour::clear_point()
{
    point_.Clear();
}
inline ::calmcar::proto::Point2i* Contour::mutable_point(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Contour.point)
    return point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point2i >* Contour::mutable_point()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Contour.point)
    return &point_;
}
inline const ::calmcar::proto::Point2i& Contour::point(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Contour.point)
    return point_.Get(index);
}
inline ::calmcar::proto::Point2i* Contour::add_point()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Contour.point)
    return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point2i >& Contour::point() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Contour.point)
    return point_;
}

// -------------------------------------------------------------------

// Segmentation

// int64 height = 1;
inline void Segmentation::clear_height()
{
    height_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Segmentation::height() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Segmentation.height)
    return height_;
}
inline void Segmentation::set_height(::google::protobuf::int64 value)
{
    height_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Segmentation.height)
}

// int64 width = 2;
inline void Segmentation::clear_width()
{
    width_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Segmentation::width() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Segmentation.width)
    return width_;
}
inline void Segmentation::set_width(::google::protobuf::int64 value)
{
    width_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Segmentation.width)
}

// repeated int64 mask = 3;
inline int Segmentation::mask_size() const
{
    return mask_.size();
}
inline void Segmentation::clear_mask()
{
    mask_.Clear();
}
inline ::google::protobuf::int64 Segmentation::mask(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Segmentation.mask)
    return mask_.Get(index);
}
inline void Segmentation::set_mask(int index, ::google::protobuf::int64 value)
{
    mask_.Set(index, value);
    // @@protoc_insertion_point(field_set:calmcar.proto.Segmentation.mask)
}
inline void Segmentation::add_mask(::google::protobuf::int64 value)
{
    mask_.Add(value);
    // @@protoc_insertion_point(field_add:calmcar.proto.Segmentation.mask)
}
inline const ::google::protobuf::RepeatedField<::google::protobuf::int64 >& Segmentation::mask() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Segmentation.mask)
    return mask_;
}
inline ::google::protobuf::RepeatedField<::google::protobuf::int64 >* Segmentation::mutable_mask()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Segmentation.mask)
    return &mask_;
}

// repeated .calmcar.proto.Contour contour = 4;
inline int Segmentation::contour_size() const
{
    return contour_.size();
}
inline void Segmentation::clear_contour()
{
    contour_.Clear();
}
inline ::calmcar::proto::Contour* Segmentation::mutable_contour(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Segmentation.contour)
    return contour_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Contour >* Segmentation::mutable_contour()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Segmentation.contour)
    return &contour_;
}
inline const ::calmcar::proto::Contour& Segmentation::contour(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Segmentation.contour)
    return contour_.Get(index);
}
inline ::calmcar::proto::Contour* Segmentation::add_contour()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Segmentation.contour)
    return contour_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Contour >& Segmentation::contour() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Segmentation.contour)
    return contour_;
}

// repeated .calmcar.proto.Point freespace = 5;
inline int Segmentation::freespace_size() const
{
    return freespace_.size();
}
inline void Segmentation::clear_freespace()
{
    freespace_.Clear();
}
inline ::calmcar::proto::Point* Segmentation::mutable_freespace(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Segmentation.freespace)
    return freespace_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >* Segmentation::mutable_freespace()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Segmentation.freespace)
    return &freespace_;
}
inline const ::calmcar::proto::Point& Segmentation::freespace(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Segmentation.freespace)
    return freespace_.Get(index);
}
inline ::calmcar::proto::Point* Segmentation::add_freespace()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Segmentation.freespace)
    return freespace_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >& Segmentation::freespace() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Segmentation.freespace)
    return freespace_;
}

// -------------------------------------------------------------------

// Frame

// .calmcar.proto.Header header = 1;
inline bool Frame::has_header() const
{
    return this != internal_default_instance() && header_ != NULL;
}
inline void Frame::clear_header()
{
    if (GetArenaNoVirtual() == NULL && header_ != NULL)
    {
        delete header_;
    }
    header_ = NULL;
}
inline const ::calmcar::proto::Header& Frame::_internal_header() const
{
    return *header_;
}
inline const ::calmcar::proto::Header& Frame::header() const
{
    const ::calmcar::proto::Header* p = header_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.header)
    return p != NULL
               ? *p
               : *reinterpret_cast< const ::calmcar::proto::Header* >(&::calmcar::proto::_Header_default_instance_);
}
inline ::calmcar::proto::Header* Frame::release_header()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Frame.header)

    ::calmcar::proto::Header* temp = header_;
    header_ = NULL;
    return temp;
}
inline ::calmcar::proto::Header* Frame::mutable_header()
{
    if (header_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Header >(GetArenaNoVirtual());
        header_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.header)
    return header_;
}
inline void Frame::set_allocated_header(::calmcar::proto::Header* header)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete header_;
    }
    if (header)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            header = ::google::protobuf::internal::GetOwnedMessage(message_arena, header, submessage_arena);
        }
    }
    else
    {
    }
    header_ = header;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Frame.header)
}

// int64 id = 2;
inline void Frame::clear_id()
{
    id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::id() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.id)
    return id_;
}
inline void Frame::set_id(::google::protobuf::int64 value)
{
    id_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.id)
}

// .calmcar.proto.Image raw_image = 3;
inline bool Frame::has_raw_image() const
{
    return this != internal_default_instance() && raw_image_ != NULL;
}
inline void Frame::clear_raw_image()
{
    if (GetArenaNoVirtual() == NULL && raw_image_ != NULL)
    {
        delete raw_image_;
    }
    raw_image_ = NULL;
}
inline const ::calmcar::proto::Image& Frame::_internal_raw_image() const
{
    return *raw_image_;
}
inline const ::calmcar::proto::Image& Frame::raw_image() const
{
    const ::calmcar::proto::Image* p = raw_image_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.raw_image)
    return p != NULL ? *p
                     : *reinterpret_cast< const ::calmcar::proto::Image* >(&::calmcar::proto::_Image_default_instance_);
}
inline ::calmcar::proto::Image* Frame::release_raw_image()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Frame.raw_image)

    ::calmcar::proto::Image* temp = raw_image_;
    raw_image_ = NULL;
    return temp;
}
inline ::calmcar::proto::Image* Frame::mutable_raw_image()
{
    if (raw_image_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Image >(GetArenaNoVirtual());
        raw_image_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.raw_image)
    return raw_image_;
}
inline void Frame::set_allocated_raw_image(::calmcar::proto::Image* raw_image)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete raw_image_;
    }
    if (raw_image)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            raw_image = ::google::protobuf::internal::GetOwnedMessage(message_arena, raw_image, submessage_arena);
        }
    }
    else
    {
    }
    raw_image_ = raw_image;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Frame.raw_image)
}

// repeated .calmcar.proto.Can raw_can = 4;
inline int Frame::raw_can_size() const
{
    return raw_can_.size();
}
inline void Frame::clear_raw_can()
{
    raw_can_.Clear();
}
inline ::calmcar::proto::Can* Frame::mutable_raw_can(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.raw_can)
    return raw_can_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Can >* Frame::mutable_raw_can()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Frame.raw_can)
    return &raw_can_;
}
inline const ::calmcar::proto::Can& Frame::raw_can(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.raw_can)
    return raw_can_.Get(index);
}
inline ::calmcar::proto::Can* Frame::add_raw_can()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Frame.raw_can)
    return raw_can_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Can >& Frame::raw_can() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Frame.raw_can)
    return raw_can_;
}

// .calmcar.proto.Gps gps = 5;
inline bool Frame::has_gps() const
{
    return this != internal_default_instance() && gps_ != NULL;
}
inline void Frame::clear_gps()
{
    if (GetArenaNoVirtual() == NULL && gps_ != NULL)
    {
        delete gps_;
    }
    gps_ = NULL;
}
inline const ::calmcar::proto::Gps& Frame::_internal_gps() const
{
    return *gps_;
}
inline const ::calmcar::proto::Gps& Frame::gps() const
{
    const ::calmcar::proto::Gps* p = gps_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.gps)
    return p != NULL ? *p
                     : *reinterpret_cast< const ::calmcar::proto::Gps* >(&::calmcar::proto::_Gps_default_instance_);
}
inline ::calmcar::proto::Gps* Frame::release_gps()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Frame.gps)

    ::calmcar::proto::Gps* temp = gps_;
    gps_ = NULL;
    return temp;
}
inline ::calmcar::proto::Gps* Frame::mutable_gps()
{
    if (gps_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Gps >(GetArenaNoVirtual());
        gps_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.gps)
    return gps_;
}
inline void Frame::set_allocated_gps(::calmcar::proto::Gps* gps)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete gps_;
    }
    if (gps)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            gps = ::google::protobuf::internal::GetOwnedMessage(message_arena, gps, submessage_arena);
        }
    }
    else
    {
    }
    gps_ = gps;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Frame.gps)
}

// repeated .calmcar.proto.Object object = 6;
inline int Frame::object_size() const
{
    return object_.size();
}
inline void Frame::clear_object()
{
    object_.Clear();
}
inline ::calmcar::proto::Object* Frame::mutable_object(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.object)
    return object_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Object >* Frame::mutable_object()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Frame.object)
    return &object_;
}
inline const ::calmcar::proto::Object& Frame::object(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.object)
    return object_.Get(index);
}
inline ::calmcar::proto::Object* Frame::add_object()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Frame.object)
    return object_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Object >& Frame::object() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Frame.object)
    return object_;
}

// repeated .calmcar.proto.Lane lane = 7;
inline int Frame::lane_size() const
{
    return lane_.size();
}
inline void Frame::clear_lane()
{
    lane_.Clear();
}
inline ::calmcar::proto::Lane* Frame::mutable_lane(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.lane)
    return lane_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Lane >* Frame::mutable_lane()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Frame.lane)
    return &lane_;
}
inline const ::calmcar::proto::Lane& Frame::lane(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.lane)
    return lane_.Get(index);
}
inline ::calmcar::proto::Lane* Frame::add_lane()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Frame.lane)
    return lane_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Lane >& Frame::lane() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Frame.lane)
    return lane_;
}

// int64 cipv_id = 8;
inline void Frame::clear_cipv_id()
{
    cipv_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::cipv_id() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.cipv_id)
    return cipv_id_;
}
inline void Frame::set_cipv_id(::google::protobuf::int64 value)
{
    cipv_id_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.cipv_id)
}

// int64 ldw_status = 9;
inline void Frame::clear_ldw_status()
{
    ldw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::ldw_status() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.ldw_status)
    return ldw_status_;
}
inline void Frame::set_ldw_status(::google::protobuf::int64 value)
{
    ldw_status_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.ldw_status)
}

// int64 fcw_status = 10;
inline void Frame::clear_fcw_status()
{
    fcw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::fcw_status() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.fcw_status)
    return fcw_status_;
}
inline void Frame::set_fcw_status(::google::protobuf::int64 value)
{
    fcw_status_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.fcw_status)
}

// int64 pcw_status = 11;
inline void Frame::clear_pcw_status()
{
    pcw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::pcw_status() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.pcw_status)
    return pcw_status_;
}
inline void Frame::set_pcw_status(::google::protobuf::int64 value)
{
    pcw_status_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.pcw_status)
}

// int64 asw_status = 12;
inline void Frame::clear_asw_status()
{
    asw_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::asw_status() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.asw_status)
    return asw_status_;
}
inline void Frame::set_asw_status(::google::protobuf::int64 value)
{
    asw_status_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.asw_status)
}

// int64 bsd_status = 13;
inline void Frame::clear_bsd_status()
{
    bsd_status_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::bsd_status() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.bsd_status)
    return bsd_status_;
}
inline void Frame::set_bsd_status(::google::protobuf::int64 value)
{
    bsd_status_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.bsd_status)
}

// .calmcar.proto.Segmentation segmentation = 14;
inline bool Frame::has_segmentation() const
{
    return this != internal_default_instance() && segmentation_ != NULL;
}
inline void Frame::clear_segmentation()
{
    if (GetArenaNoVirtual() == NULL && segmentation_ != NULL)
    {
        delete segmentation_;
    }
    segmentation_ = NULL;
}
inline const ::calmcar::proto::Segmentation& Frame::_internal_segmentation() const
{
    return *segmentation_;
}
inline const ::calmcar::proto::Segmentation& Frame::segmentation() const
{
    const ::calmcar::proto::Segmentation* p = segmentation_;
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.segmentation)
    return p != NULL ? *p : *reinterpret_cast< const ::calmcar::proto::Segmentation* >(
                                &::calmcar::proto::_Segmentation_default_instance_);
}
inline ::calmcar::proto::Segmentation* Frame::release_segmentation()
{
    // @@protoc_insertion_point(field_release:calmcar.proto.Frame.segmentation)

    ::calmcar::proto::Segmentation* temp = segmentation_;
    segmentation_ = NULL;
    return temp;
}
inline ::calmcar::proto::Segmentation* Frame::mutable_segmentation()
{
    if (segmentation_ == NULL)
    {
        auto* p = CreateMaybeMessage<::calmcar::proto::Segmentation >(GetArenaNoVirtual());
        segmentation_ = p;
    }
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.segmentation)
    return segmentation_;
}
inline void Frame::set_allocated_segmentation(::calmcar::proto::Segmentation* segmentation)
{
    ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
    if (message_arena == NULL)
    {
        delete segmentation_;
    }
    if (segmentation)
    {
        ::google::protobuf::Arena* submessage_arena = NULL;
        if (message_arena != submessage_arena)
        {
            segmentation = ::google::protobuf::internal::GetOwnedMessage(message_arena, segmentation, submessage_arena);
        }
    }
    else
    {
    }
    segmentation_ = segmentation;
    // @@protoc_insertion_point(field_set_allocated:calmcar.proto.Frame.segmentation)
}

// int64 lane_number = 15;
inline void Frame::clear_lane_number()
{
    lane_number_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::lane_number() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.lane_number)
    return lane_number_;
}
inline void Frame::set_lane_number(::google::protobuf::int64 value)
{
    lane_number_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.lane_number)
}

// .calmcar.proto.RoadType road_type = 16;
inline void Frame::clear_road_type()
{
    road_type_ = 0;
}
inline ::calmcar::proto::RoadType Frame::road_type() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.road_type)
    return static_cast<::calmcar::proto::RoadType >(road_type_);
}
inline void Frame::set_road_type(::calmcar::proto::RoadType value)
{
    road_type_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.road_type)
}

// double ttlc = 17;
inline void Frame::clear_ttlc()
{
    ttlc_ = 0;
}
inline double Frame::ttlc() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.ttlc)
    return ttlc_;
}
inline void Frame::set_ttlc(double value)
{
    ttlc_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.ttlc)
}

// .calmcar.proto.LeftRightIndication left_right_indication = 18;
inline void Frame::clear_left_right_indication()
{
    left_right_indication_ = 0;
}
inline ::calmcar::proto::LeftRightIndication Frame::left_right_indication() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.left_right_indication)
    return static_cast<::calmcar::proto::LeftRightIndication >(left_right_indication_);
}
inline void Frame::set_left_right_indication(::calmcar::proto::LeftRightIndication value)
{
    left_right_indication_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.left_right_indication)
}

// repeated .calmcar.proto.Point camera_position = 19;
inline int Frame::camera_position_size() const
{
    return camera_position_.size();
}
inline void Frame::clear_camera_position()
{
    camera_position_.Clear();
}
inline ::calmcar::proto::Point* Frame::mutable_camera_position(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.camera_position)
    return camera_position_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >* Frame::mutable_camera_position()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Frame.camera_position)
    return &camera_position_;
}
inline const ::calmcar::proto::Point& Frame::camera_position(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.camera_position)
    return camera_position_.Get(index);
}
inline ::calmcar::proto::Point* Frame::add_camera_position()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Frame.camera_position)
    return camera_position_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >& Frame::camera_position() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Frame.camera_position)
    return camera_position_;
}

// repeated .calmcar.proto.Point lane_boundary = 20;
inline int Frame::lane_boundary_size() const
{
    return lane_boundary_.size();
}
inline void Frame::clear_lane_boundary()
{
    lane_boundary_.Clear();
}
inline ::calmcar::proto::Point* Frame::mutable_lane_boundary(int index)
{
    // @@protoc_insertion_point(field_mutable:calmcar.proto.Frame.lane_boundary)
    return lane_boundary_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >* Frame::mutable_lane_boundary()
{
    // @@protoc_insertion_point(field_mutable_list:calmcar.proto.Frame.lane_boundary)
    return &lane_boundary_;
}
inline const ::calmcar::proto::Point& Frame::lane_boundary(int index) const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.lane_boundary)
    return lane_boundary_.Get(index);
}
inline ::calmcar::proto::Point* Frame::add_lane_boundary()
{
    // @@protoc_insertion_point(field_add:calmcar.proto.Frame.lane_boundary)
    return lane_boundary_.Add();
}
inline const ::google::protobuf::RepeatedPtrField<::calmcar::proto::Point >& Frame::lane_boundary() const
{
    // @@protoc_insertion_point(field_list:calmcar.proto.Frame.lane_boundary)
    return lane_boundary_;
}

// int64 timestamp = 21;
inline void Frame::clear_timestamp()
{
    timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Frame::timestamp() const
{
    // @@protoc_insertion_point(field_get:calmcar.proto.Frame.timestamp)
    return timestamp_;
}
inline void Frame::set_timestamp(::google::protobuf::int64 value)
{
    timestamp_ = value;
    // @@protoc_insertion_point(field_set:calmcar.proto.Frame.timestamp)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace calmcar

namespace google
{
namespace protobuf
{

template <>
struct is_proto_enum<::calmcar::proto::ImageInfo_PixelFormat > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::ImageInfo_PixelFormat >()
{
    return ::calmcar::proto::ImageInfo_PixelFormat_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::Object_SensorType > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::Object_SensorType >()
{
    return ::calmcar::proto::Object_SensorType_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::Object_LaneAssignment > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::Object_LaneAssignment >()
{
    return ::calmcar::proto::Object_LaneAssignment_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::Object_MotionStatus > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::Object_MotionStatus >()
{
    return ::calmcar::proto::Object_MotionStatus_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::Object_CutInCutOut > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::Object_CutInCutOut >()
{
    return ::calmcar::proto::Object_CutInCutOut_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::Lane_CoordinateType > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::Lane_CoordinateType >()
{
    return ::calmcar::proto::Lane_CoordinateType_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::Lane_LineType > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::Lane_LineType >()
{
    return ::calmcar::proto::Lane_LineType_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::Lane_LineColor > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::Lane_LineColor >()
{
    return ::calmcar::proto::Lane_LineColor_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::RoadType > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::RoadType >()
{
    return ::calmcar::proto::RoadType_descriptor();
}
template <>
struct is_proto_enum<::calmcar::proto::LeftRightIndication > : ::std::true_type
{
};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::calmcar::proto::LeftRightIndication >()
{
    return ::calmcar::proto::LeftRightIndication_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_calmcar_2eproto
